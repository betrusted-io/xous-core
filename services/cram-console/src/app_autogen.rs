#![cfg_attr(rustfmt, rustfmt_skip)]
// This file is auto-generated by xtask/main.rs generate_app_menus()
// NO APPS SELECTED: suppressing warning messages!
#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use crate::StatusOpcode;
use gam::{MenuItem, MenuPayload};
use locales::t;
use num_traits::*;
use std::{error::Error, fmt};

#[derive(Debug)]
pub enum AppDispatchError {
    IndexNotFound(usize),
}

impl Error for AppDispatchError {}

impl fmt::Display for AppDispatchError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            AppDispatchError::IndexNotFound(app_index) => write!(f, "Index {} not found", app_index),
        }
    }
}

pub(crate) fn app_dispatch(gam: &gam::Gam, token: [u32; 4], index: usize) -> Result<(), AppDispatchError> {
    match index {
        _ => Err(AppDispatchError::IndexNotFound(index)),
    }
}

pub(crate) fn app_index_to_name(index: usize) -> Result<&'static str, AppDispatchError> {
    match index {
        _ => Err(AppDispatchError::IndexNotFound(index)),
    }
}

pub(crate) fn app_menu_items(menu_items: &mut Vec::<MenuItem>, status_conn: u32) {

}
