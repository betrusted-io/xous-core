
#![cfg_attr(rustfmt, rustfmt_skip)] // don't format generated files
#![allow(dead_code)]
use core::convert::TryInto;
#[cfg(feature="std")]
use core::sync::atomic::AtomicPtr;
#[cfg(feature="std")]
use std::sync::Arc;

#[derive(Debug, Copy, Clone)]
pub struct Register {
    /// Offset of this register within this CSR
    offset: usize,
    /// Mask of SVD-specified bits for the register
    mask: usize,
}
impl Register {
    pub const fn new(offset: usize, mask: usize) -> Register {
        Register { offset, mask }
    }
    pub const fn offset(&self) -> usize { self.offset }
    pub const fn mask(&self) -> usize { self.mask }
}
#[derive(Debug, Copy, Clone)]
pub struct Field {
    /// A bitmask we use to AND to the value, unshifted.
    /// E.g. for a width of `3` bits, this mask would be 0b111.
    mask: usize,
    /// Offset of the first bit in this field
    offset: usize,
    /// A copy of the register address that this field
    /// is a member of. Ideally this is optimized out by the
    /// compiler.
    register: Register,
}
impl Field {
    /// Define a new CSR field with the given width at a specified
    /// offset from the start of the register.
    pub const fn new(width: usize, offset: usize, register: Register) -> Field {
        let mask = if width < 32 { (1 << width) - 1 } else {0xFFFF_FFFF};
        Field {
            mask,
            offset,
            register,
        }
    }
    pub const fn offset(&self) -> usize { self.offset }
    pub const fn mask(&self) -> usize { self.mask }
    pub const fn register(&self) -> Register { self.register }
}
#[derive(Debug, Copy, Clone)]
pub struct CSR<T> {
    base: *mut T,
}
impl<T> CSR<T>
where
    T: core::convert::TryFrom<usize> + core::convert::TryInto<usize> + core::default::Default,
{
    pub fn new(base: *mut T) -> Self {
        CSR { base }
    }
    /// Retrieve the raw pointer used as the base of the CSR. This is unsafe because the copied
    /// value can be used to do all kinds of awful shared mutable operations (like creating
    /// another CSR accessor owned by another thread). However, sometimes this is unavoidable
    /// because hardware is in fact shared mutable state.
    pub unsafe fn base(&self) -> *mut T {
        self.base
    }
    /// Read the contents of this register
    pub fn r(&self, reg: Register) -> T {
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);

        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
        unsafe { usize_base.add(reg.offset).read_volatile() }
            .try_into()
            .unwrap_or_default()
    }
    /// Read a field from this CSR
    pub fn rf(&self, field: Field) -> T {
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);

        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
            & field.mask)
            .try_into()
            .unwrap_or_default()
    }
    /// Read-modify-write a given field in this CSR
    pub fn rmwf(&mut self, field: Field, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
        let previous =
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
        unsafe {
            usize_base
                .add(field.register.offset)
                .write_volatile(previous | value_as_usize)
        };
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Write a given field without reading it first
    pub fn wfo(&mut self, field: Field, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
        let value_as_usize: usize = (value.try_into().unwrap_or_default() & field.mask) << field.offset;
        unsafe {
            usize_base
                .add(field.register.offset)
                .write_volatile(value_as_usize)
        };
        // Ensure the compiler doesn't re-order the write.
        // We use `SeqCst`, because `Acquire` only prevents later accesses from being reordered before
        // *reads*, but this method only *writes* to the locations.
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Write the entire contents of a register without reading it first
    pub fn wo(&mut self, reg: Register, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base) };
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        unsafe { usize_base.add(reg.offset).write_volatile(value_as_usize) };
        // Ensure the compiler doesn't re-order the write.
        // We use `SeqCst`, because `Acquire` only prevents later accesses from being reordered before
        // *reads*, but this method only *writes* to the locations.
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Zero a field from a provided value
    pub fn zf(&self, field: Field, value: T) -> T {
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        (value_as_usize & !(field.mask << field.offset))
            .try_into()
            .unwrap_or_default()
    }
    /// Shift & mask a value to its final field position
    pub fn ms(&self, field: Field, value: T) -> T {
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        ((value_as_usize & field.mask) << field.offset)
            .try_into()
            .unwrap_or_default()
    }
}

#[derive(Debug)]
#[cfg(feature="std")]
pub struct AtomicCsr<T> {
    base: Arc::<AtomicPtr<T>>,
}
#[cfg(feature="std")]
impl<T> AtomicCsr<T>
where
    T: core::convert::TryFrom<usize> + core::convert::TryInto<usize> + core::default::Default,
{
    /// AtomicCsr wraps the CSR in an Arc + AtomicPtr, so that write operations don't require
    /// a mutable reference. This allows us to stick CSR accesses into APIs that require
    /// non-mutable references to hardware state (such as certain "standardized" USB APIs).
    /// Hiding the fact that you're tweaking hardware registers behind Arc/AtomicPtr seems a little
    /// scary, but, it does make for nicer Rust semantics.
    pub fn new(base: *mut T) -> Self {
        AtomicCsr {
            base: Arc::new(AtomicPtr::new(base))
        }
    }
    pub unsafe fn base(&self) -> *mut T {
        self.base.load(core::sync::atomic::Ordering::SeqCst) as *mut T
    }
    pub fn clone(&self) -> Self {
        AtomicCsr {
            base: self.base.clone()
        }
    }
    /// Read the contents of this register
    pub fn r(&self, reg: Register) -> T {
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);

        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base.load(core::sync::atomic::Ordering::SeqCst)) };
        unsafe { usize_base.add(reg.offset).read_volatile() }
            .try_into()
            .unwrap_or_default()
    }
    /// Read a field from this CSR
    pub fn rf(&self, field: Field) -> T {
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);

        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base.load(core::sync::atomic::Ordering::SeqCst)) };
        ((unsafe { usize_base.add(field.register.offset).read_volatile() } >> field.offset)
            & field.mask)
            .try_into()
            .unwrap_or_default()
    }
    /// Read-modify-write a given field in this CSR
    pub fn rmwf(&self, field: Field, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base.load(core::sync::atomic::Ordering::SeqCst)) };
        let value_as_usize: usize = value.try_into().unwrap_or_default() << field.offset;
        let previous =
            unsafe { usize_base.add(field.register.offset).read_volatile() } & !(field.mask << field.offset);
        unsafe {
            usize_base
                .add(field.register.offset)
                .write_volatile(previous | value_as_usize)
        };
        // prevent re-ordering
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Write a given field without reading it first
    pub fn wfo(&self, field: Field, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base.load(core::sync::atomic::Ordering::SeqCst)) };
        let value_as_usize: usize = (value.try_into().unwrap_or_default() & field.mask) << field.offset;
        unsafe {
            usize_base
                .add(field.register.offset)
                .write_volatile(value_as_usize)
        };
        // Ensure the compiler doesn't re-order the write.
        // We use `SeqCst`, because `Acquire` only prevents later accesses from being reordered before
        // *reads*, but this method only *writes* to the locations.
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Write the entire contents of a register without reading it first
    pub fn wo(&self, reg: Register, value: T) {
        let usize_base: *mut usize = unsafe { core::mem::transmute(self.base.load(core::sync::atomic::Ordering::SeqCst)) };
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        unsafe { usize_base.add(reg.offset).write_volatile(value_as_usize) };
        // Ensure the compiler doesn't re-order the write.
        // We use `SeqCst`, because `Acquire` only prevents later accesses from being reordered before
        // *reads*, but this method only *writes* to the locations.
        core::sync::atomic::compiler_fence(core::sync::atomic::Ordering::SeqCst);
    }
    /// Zero a field from a provided value
    pub fn zf(&self, field: Field, value: T) -> T {
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        (value_as_usize & !(field.mask << field.offset))
            .try_into()
            .unwrap_or_default()
    }
    /// Shift & mask a value to its final field position
    pub fn ms(&self, field: Field, value: T) -> T {
        let value_as_usize: usize = value.try_into().unwrap_or_default();
        ((value_as_usize & field.mask) << field.offset)
            .try_into()
            .unwrap_or_default()
    }
}
// Physical base addresses of memory regions
pub const HW_RERAM_MEM:     usize = 0x60000000;
pub const HW_RERAM_MEM_LEN: usize = 4194304;
pub const HW_SRAM_MEM:     usize = 0x61000000;
pub const HW_SRAM_MEM_LEN: usize = 2097152;
pub const HW_XIP_MEM:     usize = 0x70000000;
pub const HW_XIP_MEM_LEN: usize = 134217728;
pub const HW_VEXRISCV_DEBUG_MEM:     usize = 0xefff0000;
pub const HW_VEXRISCV_DEBUG_MEM_LEN: usize = 4096;
pub const HW_CSR_MEM:     usize = 0x40080000;
pub const HW_CSR_MEM_LEN: usize = 262144;
pub const HW_CSR_X_MEM:     usize = 0xe0000000;
pub const HW_CSR_X_MEM_LEN: usize = 262144;
pub const HW_SCE_MEM:     usize = 0x40028000;
pub const HW_SCE_MEM_LEN: usize = 32768;
pub const HW_SYSCTRL_MEM:     usize = 0x40040000;
pub const HW_SYSCTRL_MEM_LEN: usize = 65536;
pub const HW_IFSUB_MEM:     usize = 0x50120000;
pub const HW_IFSUB_MEM_LEN: usize = 12288;
pub const HW_CORESUB_MEM:     usize = 0x40010000;
pub const HW_CORESUB_MEM_LEN: usize = 65536;
pub const HW_RRC_MEM:     usize = 0x40000000;
pub const HW_RRC_MEM_LEN: usize = 65536;
pub const HW_SECSUB_MEM:     usize = 0x40050000;
pub const HW_SECSUB_MEM_LEN: usize = 65536;
pub const HW_PIO_MEM:     usize = 0x50123000;
pub const HW_PIO_MEM_LEN: usize = 4096;
pub const HW_BIO_BDMA_MEM:     usize = 0x50124000;
pub const HW_BIO_BDMA_MEM_LEN: usize = 4096;
pub const HW_AO_MEM:     usize = 0x40060000;
pub const HW_AO_MEM_LEN: usize = 65536;
pub const HW_AOPERI_MEM:     usize = 0x40061000;
pub const HW_AOPERI_MEM_LEN: usize = 12288;
pub const HW_SEG_LKEY_MEM:     usize = 0x40020000;
pub const HW_SEG_LKEY_MEM_LEN: usize = 256;
pub const HW_SEG_KEY_MEM:     usize = 0x40020100;
pub const HW_SEG_KEY_MEM_LEN: usize = 256;
pub const HW_SEG_SKEY_MEM:     usize = 0x40020200;
pub const HW_SEG_SKEY_MEM_LEN: usize = 256;
pub const HW_SEG_SCRT_MEM:     usize = 0x40020300;
pub const HW_SEG_SCRT_MEM_LEN: usize = 256;
pub const HW_SEG_MSG_MEM:     usize = 0x40020400;
pub const HW_SEG_MSG_MEM_LEN: usize = 512;
pub const HW_SEG_HOUT_MEM:     usize = 0x40020600;
pub const HW_SEG_HOUT_MEM_LEN: usize = 256;
pub const HW_SEG_SOB_MEM:     usize = 0x40020700;
pub const HW_SEG_SOB_MEM_LEN: usize = 256;
pub const HW_SEG_PCON_MEM:     usize = 0x40020800;
pub const HW_SEG_PCON_MEM_LEN: usize = 0;
pub const HW_SEG_PKB_MEM:     usize = 0x40020800;
pub const HW_SEG_PKB_MEM_LEN: usize = 1024;
pub const HW_SEG_PIB_MEM:     usize = 0x40020c00;
pub const HW_SEG_PIB_MEM_LEN: usize = 2048;
pub const HW_SEG_PSIB_MEM:     usize = 0x40021400;
pub const HW_SEG_PSIB_MEM_LEN: usize = 0;
pub const HW_SEG_POB_MEM:     usize = 0x40021400;
pub const HW_SEG_POB_MEM_LEN: usize = 1024;
pub const HW_SEG_PSOB_MEM:     usize = 0x40021800;
pub const HW_SEG_PSOB_MEM_LEN: usize = 1024;
pub const HW_SEG_AKEY_MEM:     usize = 0x40021c00;
pub const HW_SEG_AKEY_MEM_LEN: usize = 256;
pub const HW_SEG_AIB_MEM:     usize = 0x40021d00;
pub const HW_SEG_AIB_MEM_LEN: usize = 256;
pub const HW_SEG_AOB_MEM:     usize = 0x40021e00;
pub const HW_SEG_AOB_MEM_LEN: usize = 256;
pub const HW_SEG_RNGA_MEM:     usize = 0x40021f00;
pub const HW_SEG_RNGA_MEM_LEN: usize = 1024;
pub const HW_SEG_RNGB_MEM:     usize = 0x40022300;
pub const HW_SEG_RNGB_MEM_LEN: usize = 1024;
pub const HW_IFRAM0_MEM:     usize = 0x50000000;
pub const HW_IFRAM0_MEM_LEN: usize = 131072;
pub const HW_IFRAM1_MEM:     usize = 0x50020000;
pub const HW_IFRAM1_MEM_LEN: usize = 131072;
pub const HW_NULL_MEM:     usize = 0x50040000;
pub const HW_NULL_MEM_LEN: usize = 65536;
pub const HW_UDMA_MEM:     usize = 0x50100000;
pub const HW_UDMA_MEM_LEN: usize = 131072;
pub const HW_UDP_MEM:     usize = 0x50122000;
pub const HW_UDP_MEM_LEN: usize = 4096;
pub const HW_SDDC_DAT_MEM:     usize = 0x50140000;
pub const HW_SDDC_DAT_MEM_LEN: usize = 65536;
pub const HW_UDC_MEM:     usize = 0x50200000;
pub const HW_UDC_MEM_LEN: usize = 65536;
pub const HW_SRAM_X_MEM:     usize = 0x61000000;
pub const HW_SRAM_X_MEM_LEN: usize = 2097152;
pub const HW_RERAM_X_MEM:     usize = 0x60000000;
pub const HW_RERAM_X_MEM_LEN: usize = 4194304;
pub const HW_XIP_X_MEM:     usize = 0x70000000;
pub const HW_XIP_X_MEM_LEN: usize = 67108864;
pub const HW_PL230_MEM:     usize = 0x40011000;
pub const HW_PL230_MEM_LEN: usize = 4096;
pub const HW_MDMA_MEM:     usize = 0x40012000;
pub const HW_MDMA_MEM_LEN: usize = 4096;
pub const HW_MBOX_APB_MEM:     usize = 0x40013000;
pub const HW_MBOX_APB_MEM_LEN: usize = 4096;
pub const HW_IOX_MEM:     usize = 0x5012f000;
pub const HW_IOX_MEM_LEN: usize = 4096;
pub const HW_BIO_IMEM0_MEM:     usize = 0x50125000;
pub const HW_BIO_IMEM0_MEM_LEN: usize = 4096;
pub const HW_BIO_IMEM1_MEM:     usize = 0x50126000;
pub const HW_BIO_IMEM1_MEM_LEN: usize = 4096;
pub const HW_BIO_IMEM2_MEM:     usize = 0x50127000;
pub const HW_BIO_IMEM2_MEM_LEN: usize = 4096;
pub const HW_BIO_IMEM3_MEM:     usize = 0x50128000;
pub const HW_BIO_IMEM3_MEM_LEN: usize = 4096;
pub const HW_BIO_FIFO0_MEM:     usize = 0x50129000;
pub const HW_BIO_FIFO0_MEM_LEN: usize = 4096;
pub const HW_BIO_FIFO1_MEM:     usize = 0x5012a000;
pub const HW_BIO_FIFO1_MEM_LEN: usize = 4096;
pub const HW_BIO_FIFO2_MEM:     usize = 0x5012b000;
pub const HW_BIO_FIFO2_MEM_LEN: usize = 4096;
pub const HW_BIO_FIFO3_MEM:     usize = 0x5012c000;
pub const HW_BIO_FIFO3_MEM_LEN: usize = 4096;

// Physical base addresses of registers
pub const HW_IDENTIFIER_MEM_BASE :   usize = 0x40080000;
pub const HW_MAIN_BASE :   usize = 0x40081000;
pub const HW_D11CTIME_BASE :   usize = 0xe0000000;
pub const HW_SUSRES_BASE :   usize = 0xe0001000;
pub const HW_COREUSER_BASE :   usize = 0xe0002000;
pub const HW_CSRTEST_BASE :   usize = 0xe0003000;
pub const HW_IRQARRAY0_BASE :   usize = 0xe0004000;
pub const HW_IRQARRAY1_BASE :   usize = 0xe0005000;
pub const HW_IRQARRAY10_BASE :   usize = 0xe0006000;
pub const HW_IRQARRAY11_BASE :   usize = 0xe0007000;
pub const HW_IRQARRAY12_BASE :   usize = 0xe0008000;
pub const HW_IRQARRAY13_BASE :   usize = 0xe0009000;
pub const HW_IRQARRAY14_BASE :   usize = 0xe000a000;
pub const HW_IRQARRAY15_BASE :   usize = 0xe000b000;
pub const HW_IRQARRAY16_BASE :   usize = 0xe000c000;
pub const HW_IRQARRAY17_BASE :   usize = 0xe000d000;
pub const HW_IRQARRAY18_BASE :   usize = 0xe000e000;
pub const HW_IRQARRAY19_BASE :   usize = 0xe000f000;
pub const HW_IRQARRAY2_BASE :   usize = 0xe0010000;
pub const HW_IRQARRAY3_BASE :   usize = 0xe0011000;
pub const HW_IRQARRAY4_BASE :   usize = 0xe0012000;
pub const HW_IRQARRAY5_BASE :   usize = 0xe0013000;
pub const HW_IRQARRAY6_BASE :   usize = 0xe0014000;
pub const HW_IRQARRAY7_BASE :   usize = 0xe0015000;
pub const HW_IRQARRAY8_BASE :   usize = 0xe0016000;
pub const HW_IRQARRAY9_BASE :   usize = 0xe0017000;
pub const HW_MAILBOX_BASE :   usize = 0xe0018000;
pub const HW_MB_CLIENT_BASE :   usize = 0xe0019000;
pub const HW_RESETVALUE_BASE :   usize = 0xe001a000;
pub const HW_TICKTIMER_BASE :   usize = 0xe001b000;
pub const HW_TIMER0_BASE :   usize = 0xe001c000;
pub const HW_PL230_BASE :   usize = 0x40011000;
pub const HW_ALU_BASE :   usize = 0x4002f000;
pub const HW_AES_BASE :   usize = 0x4002d000;
pub const HW_COMBOHASH_BASE :   usize = 0x4002b000;
pub const HW_PKE_BASE :   usize = 0x4002c000;
pub const HW_TRNG_BASE :   usize = 0x4002e000;
pub const HW_SCEDMA_BASE :   usize = 0x40029000;
pub const HW_SCE_GLBSFR_BASE :   usize = 0x40028000;
pub const HW_DUART_BASE :   usize = 0x40042000;
pub const HW_RBIST_WRP_BASE :   usize = 0x40045000;
pub const HW_WDG_INTF_BASE :   usize = 0x40041000;
pub const HW_TIMER_INTF_BASE :   usize = 0x40043000;
pub const HW_EVC_BASE :   usize = 0x40044000;
pub const HW_SYSCTRL_BASE :   usize = 0x40040000;
pub const HW_APB_THRU_BASE :   usize = 0x50122000;
pub const HW_BIO_BDMA_BASE :   usize = 0x50124000;
pub const HW_IOX_BASE :   usize = 0x5012f000;
pub const HW_PWM_BASE :   usize = 0x50120000;
pub const HW_SDDC_BASE :   usize = 0x50121000;
pub const HW_CORESUB_SRAMTRM_BASE :   usize = 0x40014000;
pub const HW_MDMA_BASE :   usize = 0x40012000;
pub const HW_QFC_BASE :   usize = 0x40010000;
pub const HW_MBOX_APB_BASE :   usize = 0x40013000;
pub const HW_RRC_BASE :   usize = 0x40000000;
pub const HW_GLUECHAIN_BASE :   usize = 0x40054000;
pub const HW_MESH_BASE :   usize = 0x40052000;
pub const HW_SENSORC_BASE :   usize = 0x40053000;
pub const HW_AOBUREG_BASE :   usize = 0x40065000;
pub const HW_AO_SYSCTRL_BASE :   usize = 0x40060000;
pub const HW_DKPC_BASE :   usize = 0x40064000;
pub const HW_UDMA_CTRL_BASE :   usize = 0x50100000;
pub const HW_UDMA_UART_0_BASE :   usize = 0x50101000;
pub const HW_UDMA_UART_1_BASE :   usize = 0x50102000;
pub const HW_UDMA_UART_2_BASE :   usize = 0x50103000;
pub const HW_UDMA_UART_3_BASE :   usize = 0x50104000;
pub const HW_UDMA_SPIM_0_BASE :   usize = 0x50105000;
pub const HW_UDMA_SPIM_1_BASE :   usize = 0x50106000;
pub const HW_UDMA_SPIM_2_BASE :   usize = 0x50107000;
pub const HW_UDMA_SPIM_3_BASE :   usize = 0x50108000;
pub const HW_UDMA_I2C_0_BASE :   usize = 0x50109000;
pub const HW_UDMA_I2C_1_BASE :   usize = 0x5010a000;
pub const HW_UDMA_I2C_2_BASE :   usize = 0x5010b000;
pub const HW_UDMA_I2C_3_BASE :   usize = 0x5010c000;
pub const HW_UDMA_SDIO_BASE :   usize = 0x5010d000;
pub const HW_UDMA_I2S_BASE :   usize = 0x5010e000;
pub const HW_UDMA_CAMERA_BASE :   usize = 0x5010f000;
pub const HW_UDMA_FILTER_BASE :   usize = 0x50110000;
pub const HW_UDMA_SCIF_BASE :   usize = 0x50111000;
pub const HW_UDMA_SPIS_0_BASE :   usize = 0x50112000;
pub const HW_UDMA_SPIS_1_BASE :   usize = 0x50113000;
pub const HW_UDMA_ADC_BASE :   usize = 0x50114000;
pub const HW_BIO_FIFO0_BASE :   usize = 0x50129000;
pub const HW_BIO_FIFO1_BASE :   usize = 0x5012a000;
pub const HW_BIO_FIFO2_BASE :   usize = 0x5012b000;
pub const HW_BIO_FIFO3_BASE :   usize = 0x5012c000;


pub mod utra {

    pub mod identifier_mem {
        pub const IDENTIFIER_MEM_NUMREGS: usize = 1;

        pub const IDENTIFIER_MEM: crate::Register = crate::Register::new(0, 0xff);
        pub const IDENTIFIER_MEM_IDENTIFIER_MEM: crate::Field = crate::Field::new(8, 0, IDENTIFIER_MEM);

        pub const HW_IDENTIFIER_MEM_BASE: usize = 0x40080000;
    }

    pub mod main {
        pub const MAIN_NUMREGS: usize = 3;

        pub const DONE: crate::Register = crate::Register::new(0, 0x1);
        pub const DONE_DONE: crate::Field = crate::Field::new(1, 0, DONE);

        pub const IRQTEST0: crate::Register = crate::Register::new(1, 0xffff);
        pub const IRQTEST0_TRIGGER: crate::Field = crate::Field::new(16, 0, IRQTEST0);

        pub const REPORT: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const REPORT_REPORT: crate::Field = crate::Field::new(32, 0, REPORT);

        pub const HW_MAIN_BASE: usize = 0x40081000;
    }

    pub mod d11ctime {
        pub const D11CTIME_NUMREGS: usize = 2;

        pub const CONTROL: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const CONTROL_COUNT: crate::Field = crate::Field::new(32, 0, CONTROL);

        pub const HEARTBEAT: crate::Register = crate::Register::new(1, 0x1);
        pub const HEARTBEAT_BEAT: crate::Field = crate::Field::new(1, 0, HEARTBEAT);

        pub const HW_D11CTIME_BASE: usize = 0xe0000000;
    }

    pub mod susres {
        pub const SUSRES_NUMREGS: usize = 11;

        pub const CONTROL: crate::Register = crate::Register::new(0, 0x3);
        pub const CONTROL_PAUSE: crate::Field = crate::Field::new(1, 0, CONTROL);
        pub const CONTROL_LOAD: crate::Field = crate::Field::new(1, 1, CONTROL);

        pub const RESUME_TIME1: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const RESUME_TIME1_RESUME_TIME: crate::Field = crate::Field::new(32, 0, RESUME_TIME1);

        pub const RESUME_TIME0: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const RESUME_TIME0_RESUME_TIME: crate::Field = crate::Field::new(32, 0, RESUME_TIME0);

        pub const TIME1: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const TIME1_TIME: crate::Field = crate::Field::new(32, 0, TIME1);

        pub const TIME0: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const TIME0_TIME: crate::Field = crate::Field::new(32, 0, TIME0);

        pub const STATUS: crate::Register = crate::Register::new(5, 0x1);
        pub const STATUS_PAUSED: crate::Field = crate::Field::new(1, 0, STATUS);

        pub const STATE: crate::Register = crate::Register::new(6, 0x3);
        pub const STATE_RESUME: crate::Field = crate::Field::new(1, 0, STATE);
        pub const STATE_WAS_FORCED: crate::Field = crate::Field::new(1, 1, STATE);

        pub const INTERRUPT: crate::Register = crate::Register::new(7, 0x1);
        pub const INTERRUPT_INTERRUPT: crate::Field = crate::Field::new(1, 0, INTERRUPT);

        pub const EV_STATUS: crate::Register = crate::Register::new(8, 0x1);
        pub const EV_STATUS_SOFT_INT: crate::Field = crate::Field::new(1, 0, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(9, 0x1);
        pub const EV_PENDING_SOFT_INT: crate::Field = crate::Field::new(1, 0, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(10, 0x1);
        pub const EV_ENABLE_SOFT_INT: crate::Field = crate::Field::new(1, 0, EV_ENABLE);

        pub const SUSRES_IRQ: usize = 21;
        pub const HW_SUSRES_BASE: usize = 0xe0001000;
    }

    pub mod coreuser {
        pub const COREUSER_NUMREGS: usize = 6;

        pub const CONTROL: crate::Register = crate::Register::new(0, 0x3);
        pub const CONTROL_ENABLE: crate::Field = crate::Field::new(1, 0, CONTROL);
        pub const CONTROL_INVERT_PRIV: crate::Field = crate::Field::new(1, 1, CONTROL);

        pub const STATUS: crate::Register = crate::Register::new(1, 0x1ff);
        pub const STATUS_COREUSER: crate::Field = crate::Field::new(8, 0, STATUS);
        pub const STATUS_MM: crate::Field = crate::Field::new(1, 8, STATUS);

        pub const MAP_LO: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const MAP_LO_LUT0: crate::Field = crate::Field::new(8, 0, MAP_LO);
        pub const MAP_LO_LUT1: crate::Field = crate::Field::new(8, 8, MAP_LO);
        pub const MAP_LO_LUT2: crate::Field = crate::Field::new(8, 16, MAP_LO);
        pub const MAP_LO_LUT3: crate::Field = crate::Field::new(8, 24, MAP_LO);

        pub const MAP_HI: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const MAP_HI_LUT4: crate::Field = crate::Field::new(8, 0, MAP_HI);
        pub const MAP_HI_LUT5: crate::Field = crate::Field::new(8, 8, MAP_HI);
        pub const MAP_HI_LUT6: crate::Field = crate::Field::new(8, 16, MAP_HI);
        pub const MAP_HI_LUT7: crate::Field = crate::Field::new(8, 24, MAP_HI);

        pub const USERVALUE: crate::Register = crate::Register::new(4, 0x3ffff);
        pub const USERVALUE_USER0: crate::Field = crate::Field::new(2, 0, USERVALUE);
        pub const USERVALUE_USER1: crate::Field = crate::Field::new(2, 2, USERVALUE);
        pub const USERVALUE_USER2: crate::Field = crate::Field::new(2, 4, USERVALUE);
        pub const USERVALUE_USER3: crate::Field = crate::Field::new(2, 6, USERVALUE);
        pub const USERVALUE_USER4: crate::Field = crate::Field::new(2, 8, USERVALUE);
        pub const USERVALUE_USER5: crate::Field = crate::Field::new(2, 10, USERVALUE);
        pub const USERVALUE_USER6: crate::Field = crate::Field::new(2, 12, USERVALUE);
        pub const USERVALUE_USER7: crate::Field = crate::Field::new(2, 14, USERVALUE);
        pub const USERVALUE_DEFAULT: crate::Field = crate::Field::new(2, 16, USERVALUE);

        pub const PROTECT: crate::Register = crate::Register::new(5, 0x1);
        pub const PROTECT_PROTECT: crate::Field = crate::Field::new(1, 0, PROTECT);

        pub const HW_COREUSER_BASE: usize = 0xe0002000;
    }

    pub mod csrtest {
        pub const CSRTEST_NUMREGS: usize = 2;

        pub const WTEST: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const WTEST_WTEST: crate::Field = crate::Field::new(32, 0, WTEST);

        pub const RTEST: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const RTEST_RTEST: crate::Field = crate::Field::new(32, 0, RTEST);

        pub const HW_CSRTEST_BASE: usize = 0xe0003000;
    }

    pub mod irqarray0 {
        pub const IRQARRAY0_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_MDMAIRQ_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_NC_B0S1: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_NC_B0S2: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_NC_B0S3: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B0S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B0S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B0S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B0S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B0S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B0S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B0S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B0S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_MDMAIRQ_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_NC_B0S1: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_NC_B0S2: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_NC_B0S3: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B0S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B0S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B0S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B0S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B0S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B0S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B0S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B0S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_MDMAIRQ_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S1: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S2: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S3: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B0S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY0_IRQ: usize = 0;
        pub const HW_IRQARRAY0_BASE: usize = 0xe0004000;
    }

    pub mod irqarray1 {
        pub const IRQARRAY1_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_USBC_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_NC_B1S1: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_NC_B1S2: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_NC_B1S3: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_NC_B1S4: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_NC_B1S5: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B1S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B1S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B1S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B1S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B1S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B1S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B1S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B1S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B1S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B1S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_USBC_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_NC_B1S1: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_NC_B1S2: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_NC_B1S3: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_NC_B1S4: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_NC_B1S5: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B1S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B1S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B1S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B1S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B1S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B1S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B1S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B1S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B1S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B1S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_USBC_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S1: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S2: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S3: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S4: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S5: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B1S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY1_IRQ: usize = 1;
        pub const HW_IRQARRAY1_BASE: usize = 0xe0005000;
    }

    pub mod irqarray10 {
        pub const IRQARRAY10_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_IOXIRQ: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_USBC: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_SDDCIRQ: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_PIOIRQ0: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_PIOIRQ1: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_PIOIRQ2: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_PIOIRQ3: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B10S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B10S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B10S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B10S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B10S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B10S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B10S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B10S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B10S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_IOXIRQ: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_USBC: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_SDDCIRQ: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_PIOIRQ0: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_PIOIRQ1: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_PIOIRQ2: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_PIOIRQ3: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B10S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B10S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B10S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B10S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B10S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B10S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B10S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B10S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B10S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_IOXIRQ: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_USBC: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_SDDCIRQ: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ0: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ1: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ2: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ3: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B10S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY10_IRQ: usize = 10;
        pub const HW_IRQARRAY10_BASE: usize = 0xe0006000;
    }

    pub mod irqarray11 {
        pub const IRQARRAY11_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_I2S_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_I2S_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_NC_B11S2: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_NC_B11S3: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_NC_B11S4: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_NC_B11S5: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B11S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B11S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B11S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B11S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B11S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B11S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B11S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B11S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B11S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B11S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_I2S_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_I2S_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_NC_B11S2: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_NC_B11S3: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_NC_B11S4: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_NC_B11S5: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B11S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B11S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B11S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B11S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B11S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B11S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B11S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B11S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B11S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B11S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_I2S_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_I2S_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S2: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S3: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S4: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S5: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B11S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY11_IRQ: usize = 11;
        pub const HW_IRQARRAY11_BASE: usize = 0xe0007000;
    }

    pub mod irqarray12 {
        pub const IRQARRAY12_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_NC_B12S0: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_NC_B12S1: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_NC_B12S2: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_NC_B12S3: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_NC_B12S4: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_NC_B12S5: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B12S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B12S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_I2C0_NACK: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_I2C1_NACK: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_I2C2_NACK: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_I2C3_NACK: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_I2C0_ERR: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_I2C1_ERR: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_I2C2_ERR: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_I2C3_ERR: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_NC_B12S0: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_NC_B12S1: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_NC_B12S2: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_NC_B12S3: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_NC_B12S4: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_NC_B12S5: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B12S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B12S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_I2C0_NACK: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_I2C1_NACK: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_I2C2_NACK: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_I2C3_NACK: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_I2C0_ERR: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_I2C1_ERR: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_I2C2_ERR: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_I2C3_ERR: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_NC_B12S0: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S1: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S2: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S3: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S4: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S5: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B12S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_I2C0_NACK: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_I2C1_NACK: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_I2C2_NACK: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_I2C3_NACK: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_I2C0_ERR: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_I2C1_ERR: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_I2C2_ERR: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_I2C3_ERR: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY12_IRQ: usize = 12;
        pub const HW_IRQARRAY12_BASE: usize = 0xe0008000;
    }

    pub mod irqarray13 {
        pub const IRQARRAY13_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_CORESUBERR: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_SCEERR: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_IFSUBERR: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_SECIRQ: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_NC_B13S4: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_NC_B13S5: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B13S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B13S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B13S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B13S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B13S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B13S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B13S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B13S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B13S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B13S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_CORESUBERR: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_SCEERR: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_IFSUBERR: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_SECIRQ: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_NC_B13S4: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_NC_B13S5: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B13S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B13S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B13S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B13S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B13S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B13S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B13S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B13S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B13S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B13S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_CORESUBERR: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_SCEERR: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_IFSUBERR: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_SECIRQ: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S4: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S5: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B13S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY13_IRQ: usize = 13;
        pub const HW_IRQARRAY13_BASE: usize = 0xe0009000;
    }

    pub mod irqarray14 {
        pub const IRQARRAY14_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_UART2_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_UART2_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_UART2_RX_CHAR_DUPE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_UART2_ERR_DUPE: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_UART3_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_UART3_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_UART3_RX_CHAR_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_UART3_ERR_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_TRNG_DONE_DUPE: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B14S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B14S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B14S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B14S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B14S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B14S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B14S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_UART2_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_UART2_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_UART2_RX_CHAR_DUPE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_UART2_ERR_DUPE: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_UART3_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_UART3_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_UART3_RX_CHAR_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_UART3_ERR_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_TRNG_DONE_DUPE: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B14S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B14S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B14S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B14S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B14S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B14S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B14S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_UART2_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_UART2_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_UART2_RX_CHAR_DUPE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_UART2_ERR_DUPE: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_UART3_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_UART3_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_UART3_RX_CHAR_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_UART3_ERR_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_TRNG_DONE_DUPE: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B14S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY14_IRQ: usize = 14;
        pub const HW_IRQARRAY14_BASE: usize = 0xe000a000;
    }

    pub mod irqarray15 {
        pub const IRQARRAY15_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_SEC0: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_NC_B15S1: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_NC_B15S2: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_NC_B15S3: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_NC_B15S4: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_NC_B15S5: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B15S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B15S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B15S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B15S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B15S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B15S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B15S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B15S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B15S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B15S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_SEC0: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_NC_B15S1: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_NC_B15S2: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_NC_B15S3: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_NC_B15S4: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_NC_B15S5: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B15S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B15S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B15S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B15S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B15S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B15S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B15S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B15S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B15S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B15S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_SEC0: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S1: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S2: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S3: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S4: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S5: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B15S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY15_IRQ: usize = 15;
        pub const HW_IRQARRAY15_BASE: usize = 0xe000b000;
    }

    pub mod irqarray16 {
        pub const IRQARRAY16_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_CAM_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_I2S_RX_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_I2S_TX_DUPE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_NC_B16S3: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_SPIM1_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_SPIM1_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_SPIM1_CMD_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_SPIM1_EOT_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_SPIM2_RX_DUPE: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_SPIM2_TX_DUPE: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_SPIM2_CMD_DUPE: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_SPIM2_EOT_DUPE: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_I2C0_RX_DUPE: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_I2C0_TX_DUPE: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_I2C0_CMD_DUPE: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_I2C0_EOT_DUPE: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_CAM_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_I2S_RX_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_I2S_TX_DUPE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_NC_B16S3: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_SPIM1_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_SPIM1_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_SPIM1_CMD_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_SPIM1_EOT_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_SPIM2_RX_DUPE: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_SPIM2_TX_DUPE: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_SPIM2_CMD_DUPE: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_SPIM2_EOT_DUPE: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_I2C0_RX_DUPE: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_I2C0_TX_DUPE: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_I2C0_CMD_DUPE: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_I2C0_EOT_DUPE: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_CAM_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_I2S_RX_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_I2S_TX_DUPE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_NC_B16S3: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_CMD_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_EOT_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_RX_DUPE: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_TX_DUPE: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_CMD_DUPE: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_EOT_DUPE: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_I2C0_RX_DUPE: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_I2C0_TX_DUPE: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_I2C0_CMD_DUPE: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_I2C0_EOT_DUPE: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY16_IRQ: usize = 16;
        pub const HW_IRQARRAY16_BASE: usize = 0xe000c000;
    }

    pub mod irqarray17 {
        pub const IRQARRAY17_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_I2C1_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_I2C1_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_I2C1_CMD_DUPE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_I2C1_EOT_DUPE: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_QFCIRQ_DUPE: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_ADC_RX_DUPE: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_IOXIRQ_DUPE: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_SDDCIRQ_DUPE: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B17S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B17S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B17S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B17S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_I2C1_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_I2C1_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_I2C1_CMD_DUPE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_I2C1_EOT_DUPE: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_QFCIRQ_DUPE: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_ADC_RX_DUPE: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_IOXIRQ_DUPE: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_SDDCIRQ_DUPE: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B17S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B17S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B17S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B17S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_I2C1_RX_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_I2C1_TX_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_I2C1_CMD_DUPE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_I2C1_EOT_DUPE: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_QFCIRQ_DUPE: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_ADC_RX_DUPE: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_IOXIRQ_DUPE: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_SDDCIRQ_DUPE: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B17S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B17S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B17S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B17S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY17_IRQ: usize = 17;
        pub const HW_IRQARRAY17_BASE: usize = 0xe000d000;
    }

    pub mod irqarray18 {
        pub const IRQARRAY18_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_I2C2_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_I2C2_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_I2C2_CMD_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_I2C2_EOT_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_I2C0_NACK_DUPE: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_I2C1_NACK_DUPE: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_I2C2_NACK_DUPE: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_I2C0_ERR_DUPE: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_I2C1_ERR_DUPE: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_I2C2_ERR_DUPE: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_IOXIRQ_DUPE: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_CAM_RX_DUPE: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_I2C2_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_I2C2_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_I2C2_CMD_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_I2C2_EOT_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_I2C0_NACK_DUPE: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_I2C1_NACK_DUPE: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_I2C2_NACK_DUPE: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_I2C0_ERR_DUPE: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_I2C1_ERR_DUPE: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_I2C2_ERR_DUPE: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_IOXIRQ_DUPE: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_CAM_RX_DUPE: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_I2C2_RX_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_I2C2_TX_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_I2C2_CMD_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_I2C2_EOT_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_I2C0_NACK_DUPE: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_I2C1_NACK_DUPE: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_I2C2_NACK_DUPE: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_I2C0_ERR_DUPE: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_I2C1_ERR_DUPE: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_I2C2_ERR_DUPE: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_IOXIRQ_DUPE: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_CAM_RX_DUPE: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY18_IRQ: usize = 18;
        pub const HW_IRQARRAY18_BASE: usize = 0xe000e000;
    }

    pub mod irqarray19 {
        pub const IRQARRAY19_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_MBOX_IRQ_AVAILABLE_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_ABORT_INIT_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_DONE_DUPE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_ERROR_DUPE: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_SDIO_RX_DUPE: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_SDIO_TX_DUPE: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_SDIO_EOT_DUPE: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_SDIO_ERR_DUPE: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B19S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B19S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B19S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B19S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_MBOX_IRQ_AVAILABLE_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_ABORT_INIT_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_DONE_DUPE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_ERROR_DUPE: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_SDIO_RX_DUPE: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_SDIO_TX_DUPE: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_SDIO_EOT_DUPE: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_SDIO_ERR_DUPE: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B19S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B19S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B19S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B19S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_MBOX_IRQ_AVAILABLE_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_ABORT_INIT_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_DONE_DUPE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_ERROR_DUPE: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ0_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ1_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ2_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_PIOIRQ3_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_SDIO_RX_DUPE: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_SDIO_TX_DUPE: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_SDIO_EOT_DUPE: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_SDIO_ERR_DUPE: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B19S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B19S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B19S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B19S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY19_IRQ: usize = 19;
        pub const HW_IRQARRAY19_BASE: usize = 0xe000f000;
    }

    pub mod irqarray2 {
        pub const IRQARRAY2_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_QFCIRQ: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_MDMAIRQ: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_AVAILABLE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_ABORT_INIT: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_DONE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_MBOX_IRQ_ERROR: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B2S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B2S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B2S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B2S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B2S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B2S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B2S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B2S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B2S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_AOWKUPINT: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_QFCIRQ: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_MDMAIRQ: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_AVAILABLE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_ABORT_INIT: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_DONE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_MBOX_IRQ_ERROR: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B2S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B2S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B2S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B2S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B2S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B2S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B2S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B2S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B2S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_AOWKUPINT: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_QFCIRQ: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_MDMAIRQ: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_AVAILABLE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_ABORT_INIT: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_DONE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_MBOX_IRQ_ERROR: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B2S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_AOWKUPINT: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY2_IRQ: usize = 2;
        pub const HW_IRQARRAY2_BASE: usize = 0xe0010000;
    }

    pub mod irqarray3 {
        pub const IRQARRAY3_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_TRNG_DONE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_AES_DONE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_PKE_DONE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_HASH_DONE: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_ALU_DONE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_SDMA_ICHDONE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_SDMA_SCHDONE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_SDMA_XCHDONE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B3S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B3S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B3S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B3S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B3S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B3S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B3S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B3S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_TRNG_DONE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_AES_DONE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_PKE_DONE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_HASH_DONE: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_ALU_DONE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_SDMA_ICHDONE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_SDMA_SCHDONE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_SDMA_XCHDONE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B3S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B3S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B3S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B3S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B3S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B3S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B3S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B3S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_TRNG_DONE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_AES_DONE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_PKE_DONE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_HASH_DONE: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_ALU_DONE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_SDMA_ICHDONE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_SDMA_SCHDONE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_SDMA_XCHDONE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B3S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY3_IRQ: usize = 3;
        pub const HW_IRQARRAY3_BASE: usize = 0xe0011000;
    }

    pub mod irqarray4 {
        pub const IRQARRAY4_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_TRNG_DONE_DUPE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_AES_DONE_DUPE: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_PKE_DONE_DUPE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_HASH_DONE_DUPE: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_ALU_DONE_DUPE: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_SDMA_ICHDONE_DUPE: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_SDMA_SCHDONE_DUPE: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_SDMA_XCHDONE_DUPE: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_NC_B4S8: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_NC_B4S9: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B4S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B4S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_NC_B4S12: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_NC_B4S13: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B4S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B4S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_TRNG_DONE_DUPE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_AES_DONE_DUPE: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_PKE_DONE_DUPE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_HASH_DONE_DUPE: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_ALU_DONE_DUPE: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_SDMA_ICHDONE_DUPE: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_SDMA_SCHDONE_DUPE: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_SDMA_XCHDONE_DUPE: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_NC_B4S8: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_NC_B4S9: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B4S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B4S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_NC_B4S12: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_NC_B4S13: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B4S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B4S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_TRNG_DONE_DUPE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_AES_DONE_DUPE: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_PKE_DONE_DUPE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_HASH_DONE_DUPE: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_ALU_DONE_DUPE: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_SDMA_ICHDONE_DUPE: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_SDMA_SCHDONE_DUPE: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_SDMA_XCHDONE_DUPE: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S8: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S9: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S12: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S13: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B4S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY4_IRQ: usize = 4;
        pub const HW_IRQARRAY4_BASE: usize = 0xe0012000;
    }

    pub mod irqarray5 {
        pub const IRQARRAY5_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_UART0_RX: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_UART0_TX: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_UART0_RX_CHAR: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_UART0_ERR: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_UART1_RX: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_UART1_TX: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_UART1_RX_CHAR: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_UART1_ERR: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_UART2_RX: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_UART2_TX: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_UART2_RX_CHAR: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_UART2_ERR: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_UART3_RX: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_UART3_TX: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_UART3_RX_CHAR: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_UART3_ERR: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_UART0_RX: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_UART0_TX: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_UART0_RX_CHAR: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_UART0_ERR: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_UART1_RX: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_UART1_TX: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_UART1_RX_CHAR: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_UART1_ERR: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_UART2_RX: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_UART2_TX: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_UART2_RX_CHAR: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_UART2_ERR: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_UART3_RX: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_UART3_TX: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_UART3_RX_CHAR: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_UART3_ERR: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_UART0_RX: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_UART0_TX: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_UART0_RX_CHAR: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_UART0_ERR: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_UART1_RX: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_UART1_TX: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_UART1_RX_CHAR: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_UART1_ERR: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_UART2_RX: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_UART2_TX: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_UART2_RX_CHAR: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_UART2_ERR: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_UART3_RX: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_UART3_TX: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_UART3_RX_CHAR: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_UART3_ERR: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY5_IRQ: usize = 5;
        pub const HW_IRQARRAY5_BASE: usize = 0xe0013000;
    }

    pub mod irqarray6 {
        pub const IRQARRAY6_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_SPIM0_RX: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_SPIM0_TX: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_SPIM0_CMD: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_SPIM0_EOT: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_SPIM1_RX: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_SPIM1_TX: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_SPIM1_CMD: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_SPIM1_EOT: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_SPIM2_RX: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_SPIM2_TX: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_SPIM2_CMD: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_SPIM2_EOT: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_SPIM3_RX: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_SPIM3_TX: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_SPIM3_CMD: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_SPIM3_EOT: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_SPIM0_RX: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_SPIM0_TX: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_SPIM0_CMD: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_SPIM0_EOT: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_SPIM1_RX: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_SPIM1_TX: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_SPIM1_CMD: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_SPIM1_EOT: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_SPIM2_RX: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_SPIM2_TX: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_SPIM2_CMD: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_SPIM2_EOT: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_SPIM3_RX: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_SPIM3_TX: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_SPIM3_CMD: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_SPIM3_EOT: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_SPIM0_RX: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_SPIM0_TX: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_SPIM0_CMD: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_SPIM0_EOT: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_RX: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_TX: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_CMD: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_SPIM1_EOT: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_RX: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_TX: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_CMD: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_SPIM2_EOT: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_SPIM3_RX: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_SPIM3_TX: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_SPIM3_CMD: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_SPIM3_EOT: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY6_IRQ: usize = 6;
        pub const HW_IRQARRAY6_BASE: usize = 0xe0014000;
    }

    pub mod irqarray7 {
        pub const IRQARRAY7_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_I2C0_RX: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_I2C0_TX: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_I2C0_CMD: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_I2C0_EOT: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_I2C1_RX: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_I2C1_TX: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_I2C1_CMD: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_I2C1_EOT: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_I2C2_RX: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_I2C2_TX: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_I2C2_CMD: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_I2C2_EOT: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_I2C3_RX: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_I2C3_TX: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_I2C3_CMD: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_I2C3_EOT: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_I2C0_RX: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_I2C0_TX: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_I2C0_CMD: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_I2C0_EOT: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_I2C1_RX: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_I2C1_TX: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_I2C1_CMD: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_I2C1_EOT: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_I2C2_RX: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_I2C2_TX: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_I2C2_CMD: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_I2C2_EOT: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_I2C3_RX: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_I2C3_TX: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_I2C3_CMD: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_I2C3_EOT: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_I2C0_RX: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_I2C0_TX: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_I2C0_CMD: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_I2C0_EOT: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_I2C1_RX: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_I2C1_TX: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_I2C1_CMD: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_I2C1_EOT: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_I2C2_RX: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_I2C2_TX: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_I2C2_CMD: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_I2C2_EOT: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_I2C3_RX: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_I2C3_TX: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_I2C3_CMD: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_I2C3_EOT: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY7_IRQ: usize = 7;
        pub const HW_IRQARRAY7_BASE: usize = 0xe0015000;
    }

    pub mod irqarray8 {
        pub const IRQARRAY8_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_SDIO_RX: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_SDIO_TX: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_SDIO_EOT: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_SDIO_ERR: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_I2S_RX: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_I2S_TX: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_NC_B8S6: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B8S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_CAM_RX: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_ADC_RX: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_NC_B8S10: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B8S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_FILTER_EOT: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_FILTER_ACT: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_NC_B8S14: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_NC_B8S15: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_SDIO_RX: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_SDIO_TX: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_SDIO_EOT: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_SDIO_ERR: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_I2S_RX: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_I2S_TX: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_NC_B8S6: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B8S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_CAM_RX: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_ADC_RX: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_NC_B8S10: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B8S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_FILTER_EOT: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_FILTER_ACT: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_NC_B8S14: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_NC_B8S15: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_SDIO_RX: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_SDIO_TX: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_SDIO_EOT: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_SDIO_ERR: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_I2S_RX: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_I2S_TX: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_NC_B8S6: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B8S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_CAM_RX: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_ADC_RX: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_NC_B8S10: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B8S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_FILTER_EOT: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_FILTER_ACT: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_NC_B8S14: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_NC_B8S15: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY8_IRQ: usize = 8;
        pub const HW_IRQARRAY8_BASE: usize = 0xe0016000;
    }

    pub mod irqarray9 {
        pub const IRQARRAY9_NUMREGS: usize = 6;

        pub const EV_SOFT: crate::Register = crate::Register::new(0, 0xffff);
        pub const EV_SOFT_TRIGGER: crate::Field = crate::Field::new(16, 0, EV_SOFT);

        pub const EV_EDGE_TRIGGERED: crate::Register = crate::Register::new(1, 0xffff);
        pub const EV_EDGE_TRIGGERED_USE_EDGE: crate::Field = crate::Field::new(16, 0, EV_EDGE_TRIGGERED);

        pub const EV_POLARITY: crate::Register = crate::Register::new(2, 0xffff);
        pub const EV_POLARITY_RISING: crate::Field = crate::Field::new(16, 0, EV_POLARITY);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xffff);
        pub const EV_STATUS_SCIF_RX: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_SCIF_TX: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_SCIF_RX_CHAR: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_SCIF_ERR: crate::Field = crate::Field::new(1, 3, EV_STATUS);
        pub const EV_STATUS_SPIS0_RX: crate::Field = crate::Field::new(1, 4, EV_STATUS);
        pub const EV_STATUS_SPIS0_TX: crate::Field = crate::Field::new(1, 5, EV_STATUS);
        pub const EV_STATUS_SPIS0_EOT: crate::Field = crate::Field::new(1, 6, EV_STATUS);
        pub const EV_STATUS_NC_B9S7: crate::Field = crate::Field::new(1, 7, EV_STATUS);
        pub const EV_STATUS_SPIS1_RX: crate::Field = crate::Field::new(1, 8, EV_STATUS);
        pub const EV_STATUS_SPIS1_TX: crate::Field = crate::Field::new(1, 9, EV_STATUS);
        pub const EV_STATUS_SPIS1_EOT: crate::Field = crate::Field::new(1, 10, EV_STATUS);
        pub const EV_STATUS_NC_B9S11: crate::Field = crate::Field::new(1, 11, EV_STATUS);
        pub const EV_STATUS_PWM0_EV: crate::Field = crate::Field::new(1, 12, EV_STATUS);
        pub const EV_STATUS_PWM1_EV: crate::Field = crate::Field::new(1, 13, EV_STATUS);
        pub const EV_STATUS_PWM2_EV: crate::Field = crate::Field::new(1, 14, EV_STATUS);
        pub const EV_STATUS_PWM3_EV: crate::Field = crate::Field::new(1, 15, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xffff);
        pub const EV_PENDING_SCIF_RX: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_SCIF_TX: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_SCIF_RX_CHAR: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_SCIF_ERR: crate::Field = crate::Field::new(1, 3, EV_PENDING);
        pub const EV_PENDING_SPIS0_RX: crate::Field = crate::Field::new(1, 4, EV_PENDING);
        pub const EV_PENDING_SPIS0_TX: crate::Field = crate::Field::new(1, 5, EV_PENDING);
        pub const EV_PENDING_SPIS0_EOT: crate::Field = crate::Field::new(1, 6, EV_PENDING);
        pub const EV_PENDING_NC_B9S7: crate::Field = crate::Field::new(1, 7, EV_PENDING);
        pub const EV_PENDING_SPIS1_RX: crate::Field = crate::Field::new(1, 8, EV_PENDING);
        pub const EV_PENDING_SPIS1_TX: crate::Field = crate::Field::new(1, 9, EV_PENDING);
        pub const EV_PENDING_SPIS1_EOT: crate::Field = crate::Field::new(1, 10, EV_PENDING);
        pub const EV_PENDING_NC_B9S11: crate::Field = crate::Field::new(1, 11, EV_PENDING);
        pub const EV_PENDING_PWM0_EV: crate::Field = crate::Field::new(1, 12, EV_PENDING);
        pub const EV_PENDING_PWM1_EV: crate::Field = crate::Field::new(1, 13, EV_PENDING);
        pub const EV_PENDING_PWM2_EV: crate::Field = crate::Field::new(1, 14, EV_PENDING);
        pub const EV_PENDING_PWM3_EV: crate::Field = crate::Field::new(1, 15, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xffff);
        pub const EV_ENABLE_SCIF_RX: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_SCIF_TX: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_SCIF_RX_CHAR: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_SCIF_ERR: crate::Field = crate::Field::new(1, 3, EV_ENABLE);
        pub const EV_ENABLE_SPIS0_RX: crate::Field = crate::Field::new(1, 4, EV_ENABLE);
        pub const EV_ENABLE_SPIS0_TX: crate::Field = crate::Field::new(1, 5, EV_ENABLE);
        pub const EV_ENABLE_SPIS0_EOT: crate::Field = crate::Field::new(1, 6, EV_ENABLE);
        pub const EV_ENABLE_NC_B9S7: crate::Field = crate::Field::new(1, 7, EV_ENABLE);
        pub const EV_ENABLE_SPIS1_RX: crate::Field = crate::Field::new(1, 8, EV_ENABLE);
        pub const EV_ENABLE_SPIS1_TX: crate::Field = crate::Field::new(1, 9, EV_ENABLE);
        pub const EV_ENABLE_SPIS1_EOT: crate::Field = crate::Field::new(1, 10, EV_ENABLE);
        pub const EV_ENABLE_NC_B9S11: crate::Field = crate::Field::new(1, 11, EV_ENABLE);
        pub const EV_ENABLE_PWM0_EV: crate::Field = crate::Field::new(1, 12, EV_ENABLE);
        pub const EV_ENABLE_PWM1_EV: crate::Field = crate::Field::new(1, 13, EV_ENABLE);
        pub const EV_ENABLE_PWM2_EV: crate::Field = crate::Field::new(1, 14, EV_ENABLE);
        pub const EV_ENABLE_PWM3_EV: crate::Field = crate::Field::new(1, 15, EV_ENABLE);

        pub const IRQARRAY9_IRQ: usize = 9;
        pub const HW_IRQARRAY9_BASE: usize = 0xe0017000;
    }

    pub mod mailbox {
        pub const MAILBOX_NUMREGS: usize = 9;

        pub const WDATA: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const WDATA_WDATA: crate::Field = crate::Field::new(32, 0, WDATA);

        pub const RDATA: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const RDATA_RDATA: crate::Field = crate::Field::new(32, 0, RDATA);

        pub const EV_STATUS: crate::Register = crate::Register::new(2, 0xf);
        pub const EV_STATUS_AVAILABLE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_ABORT_INIT: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_ABORT_DONE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_ERROR: crate::Field = crate::Field::new(1, 3, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(3, 0xf);
        pub const EV_PENDING_AVAILABLE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_ABORT_INIT: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_ABORT_DONE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_ERROR: crate::Field = crate::Field::new(1, 3, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(4, 0xf);
        pub const EV_ENABLE_AVAILABLE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_ABORT_INIT: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_ABORT_DONE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_ERROR: crate::Field = crate::Field::new(1, 3, EV_ENABLE);

        pub const STATUS: crate::Register = crate::Register::new(5, 0x3ffffff);
        pub const STATUS_RX_WORDS: crate::Field = crate::Field::new(11, 0, STATUS);
        pub const STATUS_TX_WORDS: crate::Field = crate::Field::new(11, 11, STATUS);
        pub const STATUS_ABORT_IN_PROGRESS: crate::Field = crate::Field::new(1, 22, STATUS);
        pub const STATUS_ABORT_ACK: crate::Field = crate::Field::new(1, 23, STATUS);
        pub const STATUS_TX_ERR: crate::Field = crate::Field::new(1, 24, STATUS);
        pub const STATUS_RX_ERR: crate::Field = crate::Field::new(1, 25, STATUS);

        pub const CONTROL: crate::Register = crate::Register::new(6, 0x1);
        pub const CONTROL_ABORT: crate::Field = crate::Field::new(1, 0, CONTROL);

        pub const DONE: crate::Register = crate::Register::new(7, 0x1);
        pub const DONE_DONE: crate::Field = crate::Field::new(1, 0, DONE);

        pub const LOOPBACK: crate::Register = crate::Register::new(8, 0x1);
        pub const LOOPBACK_LOOPBACK: crate::Field = crate::Field::new(1, 0, LOOPBACK);

        pub const MAILBOX_IRQ: usize = 22;
        pub const HW_MAILBOX_BASE: usize = 0xe0018000;
    }

    pub mod mb_client {
        pub const MB_CLIENT_NUMREGS: usize = 8;

        pub const WDATA: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const WDATA_WDATA: crate::Field = crate::Field::new(32, 0, WDATA);

        pub const RDATA: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const RDATA_RDATA: crate::Field = crate::Field::new(32, 0, RDATA);

        pub const STATUS: crate::Register = crate::Register::new(2, 0x3f);
        pub const STATUS_RX_AVAIL: crate::Field = crate::Field::new(1, 0, STATUS);
        pub const STATUS_TX_FREE: crate::Field = crate::Field::new(1, 1, STATUS);
        pub const STATUS_ABORT_IN_PROGRESS: crate::Field = crate::Field::new(1, 2, STATUS);
        pub const STATUS_ABORT_ACK: crate::Field = crate::Field::new(1, 3, STATUS);
        pub const STATUS_TX_ERR: crate::Field = crate::Field::new(1, 4, STATUS);
        pub const STATUS_RX_ERR: crate::Field = crate::Field::new(1, 5, STATUS);

        pub const EV_STATUS: crate::Register = crate::Register::new(3, 0xf);
        pub const EV_STATUS_AVAILABLE: crate::Field = crate::Field::new(1, 0, EV_STATUS);
        pub const EV_STATUS_ABORT_INIT: crate::Field = crate::Field::new(1, 1, EV_STATUS);
        pub const EV_STATUS_ABORT_DONE: crate::Field = crate::Field::new(1, 2, EV_STATUS);
        pub const EV_STATUS_ERROR: crate::Field = crate::Field::new(1, 3, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(4, 0xf);
        pub const EV_PENDING_AVAILABLE: crate::Field = crate::Field::new(1, 0, EV_PENDING);
        pub const EV_PENDING_ABORT_INIT: crate::Field = crate::Field::new(1, 1, EV_PENDING);
        pub const EV_PENDING_ABORT_DONE: crate::Field = crate::Field::new(1, 2, EV_PENDING);
        pub const EV_PENDING_ERROR: crate::Field = crate::Field::new(1, 3, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(5, 0xf);
        pub const EV_ENABLE_AVAILABLE: crate::Field = crate::Field::new(1, 0, EV_ENABLE);
        pub const EV_ENABLE_ABORT_INIT: crate::Field = crate::Field::new(1, 1, EV_ENABLE);
        pub const EV_ENABLE_ABORT_DONE: crate::Field = crate::Field::new(1, 2, EV_ENABLE);
        pub const EV_ENABLE_ERROR: crate::Field = crate::Field::new(1, 3, EV_ENABLE);

        pub const CONTROL: crate::Register = crate::Register::new(6, 0x1);
        pub const CONTROL_ABORT: crate::Field = crate::Field::new(1, 0, CONTROL);

        pub const DONE: crate::Register = crate::Register::new(7, 0x1);
        pub const DONE_DONE: crate::Field = crate::Field::new(1, 0, DONE);

        pub const MB_CLIENT_IRQ: usize = 23;
        pub const HW_MB_CLIENT_BASE: usize = 0xe0019000;
    }

    pub mod resetvalue {
        pub const RESETVALUE_NUMREGS: usize = 1;

        pub const PC: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const PC_PC: crate::Field = crate::Field::new(32, 0, PC);

        pub const HW_RESETVALUE_BASE: usize = 0xe001a000;
    }

    pub mod ticktimer {
        pub const TICKTIMER_NUMREGS: usize = 9;

        pub const CONTROL: crate::Register = crate::Register::new(0, 0x1);
        pub const CONTROL_RESET: crate::Field = crate::Field::new(1, 0, CONTROL);

        pub const TIME1: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const TIME1_TIME: crate::Field = crate::Field::new(32, 0, TIME1);

        pub const TIME0: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const TIME0_TIME: crate::Field = crate::Field::new(32, 0, TIME0);

        pub const MSLEEP_TARGET1: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const MSLEEP_TARGET1_MSLEEP_TARGET: crate::Field = crate::Field::new(32, 0, MSLEEP_TARGET1);

        pub const MSLEEP_TARGET0: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const MSLEEP_TARGET0_MSLEEP_TARGET: crate::Field = crate::Field::new(32, 0, MSLEEP_TARGET0);

        pub const EV_STATUS: crate::Register = crate::Register::new(5, 0x1);
        pub const EV_STATUS_ALARM: crate::Field = crate::Field::new(1, 0, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(6, 0x1);
        pub const EV_PENDING_ALARM: crate::Field = crate::Field::new(1, 0, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(7, 0x1);
        pub const EV_ENABLE_ALARM: crate::Field = crate::Field::new(1, 0, EV_ENABLE);

        pub const CLOCKS_PER_TICK: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const CLOCKS_PER_TICK_CLOCKS_PER_TICK: crate::Field = crate::Field::new(32, 0, CLOCKS_PER_TICK);

        pub const TICKTIMER_IRQ: usize = 20;
        pub const HW_TICKTIMER_BASE: usize = 0xe001b000;
    }

    pub mod timer0 {
        pub const TIMER0_NUMREGS: usize = 8;

        pub const LOAD: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const LOAD_LOAD: crate::Field = crate::Field::new(32, 0, LOAD);

        pub const RELOAD: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const RELOAD_RELOAD: crate::Field = crate::Field::new(32, 0, RELOAD);

        pub const EN: crate::Register = crate::Register::new(2, 0x1);
        pub const EN_EN: crate::Field = crate::Field::new(1, 0, EN);

        pub const UPDATE_VALUE: crate::Register = crate::Register::new(3, 0x1);
        pub const UPDATE_VALUE_UPDATE_VALUE: crate::Field = crate::Field::new(1, 0, UPDATE_VALUE);

        pub const VALUE: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const VALUE_VALUE: crate::Field = crate::Field::new(32, 0, VALUE);

        pub const EV_STATUS: crate::Register = crate::Register::new(5, 0x1);
        pub const EV_STATUS_ZERO: crate::Field = crate::Field::new(1, 0, EV_STATUS);

        pub const EV_PENDING: crate::Register = crate::Register::new(6, 0x1);
        pub const EV_PENDING_ZERO: crate::Field = crate::Field::new(1, 0, EV_PENDING);

        pub const EV_ENABLE: crate::Register = crate::Register::new(7, 0x1);
        pub const EV_ENABLE_ZERO: crate::Field = crate::Field::new(1, 0, EV_ENABLE);

        pub const TIMER0_IRQ: usize = 30;
        pub const HW_TIMER0_BASE: usize = 0xe001c000;
    }

    pub mod pl230 {
        pub const PL230_NUMREGS: usize = 20;

        pub const STATUS: crate::Register = crate::Register::new(0, 0xf01f00f1);
        pub const STATUS_TEST_STATUS: crate::Field = crate::Field::new(4, 28, STATUS);
        pub const STATUS_CHNLS_MINUS1: crate::Field = crate::Field::new(5, 16, STATUS);
        pub const STATUS_STATE: crate::Field = crate::Field::new(4, 4, STATUS);
        pub const STATUS_MASTER_ENABLE: crate::Field = crate::Field::new(1, 0, STATUS);

        pub const CFG: crate::Register = crate::Register::new(1, 0xe1);
        pub const CFG_CHNL_PROT_CTRL: crate::Field = crate::Field::new(3, 5, CFG);
        pub const CFG_MASTER_ENABLE: crate::Field = crate::Field::new(1, 0, CFG);

        pub const CTRLBASEPTR: crate::Register = crate::Register::new(2, 0xffffff00);
        pub const CTRLBASEPTR_CTRL_BASE_PTR: crate::Field = crate::Field::new(24, 8, CTRLBASEPTR);

        pub const ALTCTRLBASEPTR: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const ALTCTRLBASEPTR_ALT_CTRL_BASE_PTR: crate::Field = crate::Field::new(32, 0, ALTCTRLBASEPTR);

        pub const DMA_WAITONREQ_STATUS: crate::Register = crate::Register::new(4, 0xff);
        pub const DMA_WAITONREQ_STATUS_DMA_WAITONREQ_STATUS: crate::Field = crate::Field::new(8, 0, DMA_WAITONREQ_STATUS);

        pub const CHNLSWREQUEST: crate::Register = crate::Register::new(5, 0xff);
        pub const CHNLSWREQUEST_CHNL_SW_REQUEST: crate::Field = crate::Field::new(8, 0, CHNLSWREQUEST);

        pub const CHNLUSEBURSTSET: crate::Register = crate::Register::new(6, 0xff);
        pub const CHNLUSEBURSTSET_CHNL_USEBURST_SET: crate::Field = crate::Field::new(8, 0, CHNLUSEBURSTSET);

        pub const CHNLUSEBURSTCLR: crate::Register = crate::Register::new(7, 0xff);
        pub const CHNLUSEBURSTCLR_CHNL_USEBURST_CLR: crate::Field = crate::Field::new(8, 0, CHNLUSEBURSTCLR);

        pub const CHNLREQMASKSET: crate::Register = crate::Register::new(8, 0xff);
        pub const CHNLREQMASKSET_CHNL_REQ_MASK_SET: crate::Field = crate::Field::new(8, 0, CHNLREQMASKSET);

        pub const CHNLREQMASKCLR: crate::Register = crate::Register::new(9, 0xff);
        pub const CHNLREQMASKCLR_CHNL_REQ_MASK_CLR: crate::Field = crate::Field::new(8, 0, CHNLREQMASKCLR);

        pub const CHNLENABLESET: crate::Register = crate::Register::new(10, 0xff);
        pub const CHNLENABLESET_CHNL_ENABLE_SET: crate::Field = crate::Field::new(8, 0, CHNLENABLESET);

        pub const CHNLENABLECLR: crate::Register = crate::Register::new(11, 0xff);
        pub const CHNLENABLECLR_CHNL_ENABLE_CLR: crate::Field = crate::Field::new(8, 0, CHNLENABLECLR);

        pub const CHNLPRIALTSET: crate::Register = crate::Register::new(12, 0xff);
        pub const CHNLPRIALTSET_CHNL_PRI_ALT_SET: crate::Field = crate::Field::new(8, 0, CHNLPRIALTSET);

        pub const CHNLPRIALTCLR: crate::Register = crate::Register::new(13, 0xff);
        pub const CHNLPRIALTCLR_CHNL_PRI_ALT_CLR: crate::Field = crate::Field::new(8, 0, CHNLPRIALTCLR);

        pub const CHNLPRIORITYSET: crate::Register = crate::Register::new(14, 0xff);
        pub const CHNLPRIORITYSET_CHNL_PRIORITY_SET: crate::Field = crate::Field::new(8, 0, CHNLPRIORITYSET);

        pub const CHNLPRIORITYCLR: crate::Register = crate::Register::new(15, 0xff);
        pub const CHNLPRIORITYCLR_CHNL_PRIORITY_CLR: crate::Field = crate::Field::new(8, 0, CHNLPRIORITYCLR);

        pub const ERRCLR: crate::Register = crate::Register::new(19, 0x1);
        pub const ERRCLR_ERR_CLR: crate::Field = crate::Field::new(1, 0, ERRCLR);

        pub const PERIPH_ID_0: crate::Register = crate::Register::new(1016, 0xff);
        pub const PERIPH_ID_0_PART_NUMBER_LSB: crate::Field = crate::Field::new(8, 0, PERIPH_ID_0);

        pub const PERIPH_ID_1: crate::Register = crate::Register::new(1017, 0x7f);
        pub const PERIPH_ID_1_PART_NUMBER_MSB: crate::Field = crate::Field::new(4, 0, PERIPH_ID_1);
        pub const PERIPH_ID_1_JEP106_LSB: crate::Field = crate::Field::new(3, 4, PERIPH_ID_1);

        pub const PERIPH_ID_2: crate::Register = crate::Register::new(1018, 0xff);
        pub const PERIPH_ID_2_JEP106_MSB: crate::Field = crate::Field::new(3, 0, PERIPH_ID_2);
        pub const PERIPH_ID_2_JEDEC_USED: crate::Field = crate::Field::new(1, 3, PERIPH_ID_2);
        pub const PERIPH_ID_2_REVISION: crate::Field = crate::Field::new(4, 4, PERIPH_ID_2);

        pub const HW_PL230_BASE: usize = 0x40011000;
    }

    pub mod alu {
        pub const ALU_NUMREGS: usize = 12;

        pub const SFR_CRFUNC: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_CRFUNC_SFR_CRFUNC: crate::Field = crate::Field::new(8, 0, SFR_CRFUNC);

        pub const SFR_AR: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_AR_SFR_AR: crate::Field = crate::Field::new(32, 0, SFR_AR);

        pub const SFR_SRMFSM: crate::Register = crate::Register::new(2, 0x1ff);
        pub const SFR_SRMFSM_MFSM: crate::Field = crate::Field::new(8, 0, SFR_SRMFSM);
        pub const SFR_SRMFSM_CRREG: crate::Field = crate::Field::new(1, 8, SFR_SRMFSM);

        pub const SFR_FR: crate::Register = crate::Register::new(3, 0x3f);
        pub const SFR_FR_MFSM_DONE: crate::Field = crate::Field::new(1, 0, SFR_FR);
        pub const SFR_FR_DIV_DONE: crate::Field = crate::Field::new(1, 1, SFR_FR);
        pub const SFR_FR_CHNLO_DONE: crate::Field = crate::Field::new(1, 2, SFR_FR);
        pub const SFR_FR_CHNLI_DONE: crate::Field = crate::Field::new(1, 3, SFR_FR);
        pub const SFR_FR_QS0ERR: crate::Field = crate::Field::new(1, 4, SFR_FR);
        pub const SFR_FR_ALUINVLD: crate::Field = crate::Field::new(1, 5, SFR_FR);

        pub const SFR_CRDIVLEN: crate::Register = crate::Register::new(4, 0xffff);
        pub const SFR_CRDIVLEN_SFR_CRDIVLEN: crate::Field = crate::Field::new(16, 0, SFR_CRDIVLEN);

        pub const SFR_SRDIVLEN: crate::Register = crate::Register::new(5, 0xffff);
        pub const SFR_SRDIVLEN_SFR_SRDIVLEN: crate::Field = crate::Field::new(16, 0, SFR_SRDIVLEN);

        pub const SFR_OPT: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_OPT_SFR_OPT: crate::Field = crate::Field::new(32, 0, SFR_OPT);

        pub const SFR_OPTLTX: crate::Register = crate::Register::new(7, 0xff);
        pub const SFR_OPTLTX_SFR_OPTLTX: crate::Field = crate::Field::new(8, 0, SFR_OPTLTX);

        pub const SFR_SEGPTR_CR_SEGCFG0: crate::Register = crate::Register::new(12, 0xfffff);
        pub const SFR_SEGPTR_CR_SEGCFG0_CR_SEGCFG0: crate::Field = crate::Field::new(20, 0, SFR_SEGPTR_CR_SEGCFG0);

        pub const SFR_SEGPTR_CR_SEGCFG1: crate::Register = crate::Register::new(13, 0xfffff);
        pub const SFR_SEGPTR_CR_SEGCFG1_CR_SEGCFG1: crate::Field = crate::Field::new(20, 0, SFR_SEGPTR_CR_SEGCFG1);

        pub const SFR_SEGPTR_CR_SEGCFG2: crate::Register = crate::Register::new(14, 0xfffff);
        pub const SFR_SEGPTR_CR_SEGCFG2_CR_SEGCFG2: crate::Field = crate::Field::new(20, 0, SFR_SEGPTR_CR_SEGCFG2);

        pub const SFR_SEGPTR_CR_SEGCFG3: crate::Register = crate::Register::new(15, 0xfffff);
        pub const SFR_SEGPTR_CR_SEGCFG3_CR_SEGCFG3: crate::Field = crate::Field::new(20, 0, SFR_SEGPTR_CR_SEGCFG3);

        pub const HW_ALU_BASE: usize = 0x4002f000;
    }

    pub mod aes {
        pub const AES_NUMREGS: usize = 13;

        pub const SFR_CRFUNC: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_CRFUNC_SFR_CRFUNC: crate::Field = crate::Field::new(8, 0, SFR_CRFUNC);

        pub const SFR_AR: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_AR_SFR_AR: crate::Field = crate::Field::new(32, 0, SFR_AR);

        pub const SFR_SRMFSM: crate::Register = crate::Register::new(2, 0xff);
        pub const SFR_SRMFSM_SFR_SRMFSM: crate::Field = crate::Field::new(8, 0, SFR_SRMFSM);

        pub const SFR_FR: crate::Register = crate::Register::new(3, 0xf);
        pub const SFR_FR_MFSM_DONE: crate::Field = crate::Field::new(1, 0, SFR_FR);
        pub const SFR_FR_ACORE_DONE: crate::Field = crate::Field::new(1, 1, SFR_FR);
        pub const SFR_FR_CHNLO_DONE: crate::Field = crate::Field::new(1, 2, SFR_FR);
        pub const SFR_FR_CHNLI_DONE: crate::Field = crate::Field::new(1, 3, SFR_FR);

        pub const SFR_OPT: crate::Register = crate::Register::new(4, 0x1ff);
        pub const SFR_OPT_OPT_KLEN0: crate::Field = crate::Field::new(4, 0, SFR_OPT);
        pub const SFR_OPT_OPT_MODE0: crate::Field = crate::Field::new(4, 4, SFR_OPT);
        pub const SFR_OPT_OPT_IFSTART0: crate::Field = crate::Field::new(1, 8, SFR_OPT);

        pub const SFR_OPT1: crate::Register = crate::Register::new(5, 0xffff);
        pub const SFR_OPT1_SFR_OPT1: crate::Field = crate::Field::new(16, 0, SFR_OPT1);

        pub const SFR_OPTLTX: crate::Register = crate::Register::new(6, 0x3f);
        pub const SFR_OPTLTX_SFR_OPTLTX: crate::Field = crate::Field::new(6, 0, SFR_OPTLTX);

        pub const SFR_MASKSEED: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_MASKSEED_SFR_MASKSEED: crate::Field = crate::Field::new(32, 0, SFR_MASKSEED);

        pub const SFR_MASKSEEDAR: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_MASKSEEDAR_SFR_MASKSEEDAR: crate::Field = crate::Field::new(32, 0, SFR_MASKSEEDAR);

        pub const SFR_SEGPTR_PTRID_IV: crate::Register = crate::Register::new(12, 0xfff);
        pub const SFR_SEGPTR_PTRID_IV_PTRID_IV: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_IV);

        pub const SFR_SEGPTR_PTRID_AKEY: crate::Register = crate::Register::new(13, 0xfff);
        pub const SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_AKEY);

        pub const SFR_SEGPTR_PTRID_AIB: crate::Register = crate::Register::new(14, 0xfff);
        pub const SFR_SEGPTR_PTRID_AIB_PTRID_AIB: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_AIB);

        pub const SFR_SEGPTR_PTRID_AOB: crate::Register = crate::Register::new(15, 0xfff);
        pub const SFR_SEGPTR_PTRID_AOB_PTRID_AOB: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_AOB);

        pub const HW_AES_BASE: usize = 0x4002d000;
    }

    pub mod combohash {
        pub const COMBOHASH_NUMREGS: usize = 15;

        pub const SFR_CRFUNC: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_CRFUNC_CR_FUNC: crate::Field = crate::Field::new(8, 0, SFR_CRFUNC);

        pub const SFR_AR: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_AR_SFR_AR: crate::Field = crate::Field::new(32, 0, SFR_AR);

        pub const SFR_SRMFSM: crate::Register = crate::Register::new(2, 0xff);
        pub const SFR_SRMFSM_MFSM: crate::Field = crate::Field::new(8, 0, SFR_SRMFSM);

        pub const SFR_FR: crate::Register = crate::Register::new(3, 0x7f);
        pub const SFR_FR_MFSM_DONE: crate::Field = crate::Field::new(1, 0, SFR_FR);
        pub const SFR_FR_HASH_DONE: crate::Field = crate::Field::new(1, 1, SFR_FR);
        pub const SFR_FR_CHNLO_DONE: crate::Field = crate::Field::new(1, 2, SFR_FR);
        pub const SFR_FR_CHNLI_DONE: crate::Field = crate::Field::new(1, 3, SFR_FR);
        pub const SFR_FR_CHKDONE: crate::Field = crate::Field::new(1, 4, SFR_FR);
        pub const SFR_FR_CHKPASS: crate::Field = crate::Field::new(1, 5, SFR_FR);
        pub const SFR_FR_CHKFAIL: crate::Field = crate::Field::new(1, 6, SFR_FR);

        pub const SFR_OPT1: crate::Register = crate::Register::new(4, 0xffff);
        pub const SFR_OPT1_CR_OPT_HASHCNT: crate::Field = crate::Field::new(16, 0, SFR_OPT1);

        pub const SFR_OPT2: crate::Register = crate::Register::new(5, 0x3f);
        pub const SFR_OPT2_CR_OPT_SCRTCHK: crate::Field = crate::Field::new(1, 0, SFR_OPT2);
        pub const SFR_OPT2_CR_OPT_IFSOB: crate::Field = crate::Field::new(1, 1, SFR_OPT2);
        pub const SFR_OPT2_CR_OPT_IFSTART: crate::Field = crate::Field::new(1, 2, SFR_OPT2);
        pub const SFR_OPT2_OPT_SCHNR1_0: crate::Field = crate::Field::new(1, 3, SFR_OPT2);
        pub const SFR_OPT2_TSMODE: crate::Field = crate::Field::new(1, 4, SFR_OPT2);
        pub const SFR_OPT2_CR_OPT_IFSKEY: crate::Field = crate::Field::new(1, 5, SFR_OPT2);

        pub const SFR_OPT3: crate::Register = crate::Register::new(6, 0xff);
        pub const SFR_OPT3_SFR_OPT3: crate::Field = crate::Field::new(8, 0, SFR_OPT3);

        pub const SFR_BLKT0: crate::Register = crate::Register::new(7, 0xff);
        pub const SFR_BLKT0_SFR_BLKT0: crate::Field = crate::Field::new(8, 0, SFR_BLKT0);

        pub const SFR_SEGPTR_SEGID_LKEY: crate::Register = crate::Register::new(8, 0xfff);
        pub const SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_SEGID_LKEY);

        pub const SFR_SEGPTR_SEGID_KEY: crate::Register = crate::Register::new(9, 0xfff);
        pub const SFR_SEGPTR_SEGID_KEY_SEGID_KEY: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_SEGID_KEY);

        pub const SFR_SEGPTR_SEGID_SCRT: crate::Register = crate::Register::new(11, 0xfff);
        pub const SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_SEGID_SCRT);

        pub const SFR_SEGPTR_SEGID_MSG: crate::Register = crate::Register::new(12, 0xfff);
        pub const SFR_SEGPTR_SEGID_MSG_SEGID_MSG: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_SEGID_MSG);

        pub const SFR_SEGPTR_SEGID_HOUT: crate::Register = crate::Register::new(13, 0xfff);
        pub const SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_SEGID_HOUT);

        pub const SFR_SEGPTR_SEGID_HOUT2: crate::Register = crate::Register::new(15, 0xfff);
        pub const SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_SEGID_HOUT2);

        pub const SFR_KEYIDX: crate::Register = crate::Register::new(24, 0x3ff);
        pub const SFR_KEYIDX_SFR_KEYIDX: crate::Field = crate::Field::new(10, 0, SFR_KEYIDX);

        pub const HW_COMBOHASH_BASE: usize = 0x4002b000;
    }

    pub mod pke {
        pub const PKE_NUMREGS: usize = 19;

        pub const SFR_CRFUNC: crate::Register = crate::Register::new(0, 0xffff);
        pub const SFR_CRFUNC_CR_FUNC: crate::Field = crate::Field::new(8, 0, SFR_CRFUNC);
        pub const SFR_CRFUNC_CR_PCOREIR: crate::Field = crate::Field::new(8, 8, SFR_CRFUNC);

        pub const SFR_AR2: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_AR2_SFR_AR2: crate::Field = crate::Field::new(32, 0, SFR_AR2);

        pub const SFR_SRMFSM: crate::Register = crate::Register::new(2, 0x1ff);
        pub const SFR_SRMFSM_MFSM: crate::Field = crate::Field::new(8, 0, SFR_SRMFSM);
        pub const SFR_SRMFSM_MODINVREADY: crate::Field = crate::Field::new(1, 8, SFR_SRMFSM);

        pub const SFR_FR: crate::Register = crate::Register::new(3, 0x1f);
        pub const SFR_FR_MFSM_DONE: crate::Field = crate::Field::new(1, 0, SFR_FR);
        pub const SFR_FR_PCORE_DONE: crate::Field = crate::Field::new(1, 1, SFR_FR);
        pub const SFR_FR_CHNLO_DONE: crate::Field = crate::Field::new(1, 2, SFR_FR);
        pub const SFR_FR_CHNLI_DONE: crate::Field = crate::Field::new(1, 3, SFR_FR);
        pub const SFR_FR_CHNLX_DONE: crate::Field = crate::Field::new(1, 4, SFR_FR);

        pub const SFR_OPTNW: crate::Register = crate::Register::new(4, 0x3fff);
        pub const SFR_OPTNW_SFR_OPTNW: crate::Field = crate::Field::new(14, 0, SFR_OPTNW);

        pub const SFR_OPTEW: crate::Register = crate::Register::new(5, 0x3fff);
        pub const SFR_OPTEW_SFR_OPTEW: crate::Field = crate::Field::new(14, 0, SFR_OPTEW);

        pub const SFR_OPTRW: crate::Register = crate::Register::new(6, 0x3ff);
        pub const SFR_OPTRW_SFR_OPTRW: crate::Field = crate::Field::new(10, 0, SFR_OPTRW);

        pub const SFR_OPTLTX: crate::Register = crate::Register::new(7, 0x1f);
        pub const SFR_OPTLTX_SFR_OPTLTX: crate::Field = crate::Field::new(5, 0, SFR_OPTLTX);

        pub const SFR_OPTMASK: crate::Register = crate::Register::new(8, 0xffff);
        pub const SFR_OPTMASK_SFR_OPTMASK: crate::Field = crate::Field::new(16, 0, SFR_OPTMASK);

        pub const SFR_MIMMCR: crate::Register = crate::Register::new(9, 0x1ff);
        pub const SFR_MIMMCR_SFR_MIMMCR: crate::Field = crate::Field::new(9, 0, SFR_MIMMCR);

        pub const SFR_SEGPTR_PTRID_PCON: crate::Register = crate::Register::new(12, 0xfff);
        pub const SFR_SEGPTR_PTRID_PCON_PTRID_PCON: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_PCON);

        pub const SFR_SEGPTR_PTRID_PIB0: crate::Register = crate::Register::new(13, 0xfff);
        pub const SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_PIB0);

        pub const SFR_SEGPTR_PTRID_PIB1: crate::Register = crate::Register::new(14, 0xfff);
        pub const SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_PIB1);

        pub const SFR_SEGPTR_PTRID_PKB: crate::Register = crate::Register::new(15, 0xfff);
        pub const SFR_SEGPTR_PTRID_PKB_PTRID_PKB: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_PKB);

        pub const SFR_SEGPTR_PTRID_POB: crate::Register = crate::Register::new(16, 0xfff);
        pub const SFR_SEGPTR_PTRID_POB_PTRID_POB: crate::Field = crate::Field::new(12, 0, SFR_SEGPTR_PTRID_POB);

        pub const SFR_TICKCYC: crate::Register = crate::Register::new(20, 0xff);
        pub const SFR_TICKCYC_SFR_TICKCYC: crate::Field = crate::Field::new(8, 0, SFR_TICKCYC);

        pub const SFR_TICKCNT: crate::Register = crate::Register::new(21, 0xffffffff);
        pub const SFR_TICKCNT_SFR_TICKCNT: crate::Field = crate::Field::new(32, 0, SFR_TICKCNT);

        pub const SFR_MASKSEED: crate::Register = crate::Register::new(24, 0xffffffff);
        pub const SFR_MASKSEED_SFR_MASKSEED: crate::Field = crate::Field::new(32, 0, SFR_MASKSEED);

        pub const SFR_MASKSEEDAR: crate::Register = crate::Register::new(25, 0xffffffff);
        pub const SFR_MASKSEEDAR_SFR_MASKSEEDAR: crate::Field = crate::Field::new(32, 0, SFR_MASKSEEDAR);

        pub const HW_PKE_BASE: usize = 0x4002c000;
    }

    pub mod trng {
        pub const TRNG_NUMREGS: usize = 15;

        pub const SFR_CRSRC: crate::Register = crate::Register::new(0, 0x1fff);
        pub const SFR_CRSRC_SFR_CRSRC: crate::Field = crate::Field::new(13, 0, SFR_CRSRC);

        pub const SFR_CRANA: crate::Register = crate::Register::new(1, 0xffff);
        pub const SFR_CRANA_SFR_CRANA: crate::Field = crate::Field::new(16, 0, SFR_CRANA);

        pub const SFR_PP: crate::Register = crate::Register::new(2, 0x1ffff);
        pub const SFR_PP_SFR_PP: crate::Field = crate::Field::new(17, 0, SFR_PP);

        pub const SFR_OPT: crate::Register = crate::Register::new(3, 0x1ffff);
        pub const SFR_OPT_SFR_OPT: crate::Field = crate::Field::new(17, 0, SFR_OPT);

        pub const SFR_SR: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const SFR_SR_SR_RNG: crate::Field = crate::Field::new(32, 0, SFR_SR);

        pub const SFR_AR_GEN: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_AR_GEN_SFR_AR_GEN: crate::Field = crate::Field::new(32, 0, SFR_AR_GEN);

        pub const SFR_FR: crate::Register = crate::Register::new(6, 0x7);
        pub const SFR_FR_SFR_FR: crate::Field = crate::Field::new(3, 0, SFR_FR);

        pub const SFR_DRPSZ: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_DRPSZ_SFR_DRPSZ: crate::Field = crate::Field::new(32, 0, SFR_DRPSZ);

        pub const SFR_DRGEN: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_DRGEN_SFR_DRGEN: crate::Field = crate::Field::new(32, 0, SFR_DRGEN);

        pub const SFR_DRRESEED: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_DRRESEED_SFR_DRRESEED: crate::Field = crate::Field::new(32, 0, SFR_DRRESEED);

        pub const SFR_BUF: crate::Register = crate::Register::new(12, 0xffffffff);
        pub const SFR_BUF_SFR_BUF: crate::Field = crate::Field::new(32, 0, SFR_BUF);

        pub const SFR_CHAIN_RNGCHAINEN0: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0: crate::Field = crate::Field::new(32, 0, SFR_CHAIN_RNGCHAINEN0);

        pub const SFR_CHAIN_RNGCHAINEN1: crate::Register = crate::Register::new(17, 0xffffffff);
        pub const SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1: crate::Field = crate::Field::new(32, 0, SFR_CHAIN_RNGCHAINEN1);

        pub const SFR_CHAIN_RNGCHAINEN2: crate::Register = crate::Register::new(18, 0xffffffff);
        pub const SFR_CHAIN_RNGCHAINEN2_RNGCHAINEN2: crate::Field = crate::Field::new(32, 0, SFR_CHAIN_RNGCHAINEN2);

        pub const SFR_CHAIN_RNGCHAINEN3: crate::Register = crate::Register::new(19, 0xffffffff);
        pub const SFR_CHAIN_RNGCHAINEN3_RNGCHAINEN3: crate::Field = crate::Field::new(32, 0, SFR_CHAIN_RNGCHAINEN3);

        pub const HW_TRNG_BASE: usize = 0x4002e000;
    }

    pub mod scedma {
        pub const SCEDMA_NUMREGS: usize = 20;

        pub const SFR_SCHSTART_AR: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const SFR_SCHSTART_AR_SFR_SCHSTART_AR: crate::Field = crate::Field::new(32, 0, SFR_SCHSTART_AR);

        pub const SFR_XCH_FUNC: crate::Register = crate::Register::new(4, 0x1);
        pub const SFR_XCH_FUNC_XCHCR_FUNC: crate::Field = crate::Field::new(1, 0, SFR_XCH_FUNC);

        pub const SFR_XCH_OPT: crate::Register = crate::Register::new(5, 0x3ff);
        pub const SFR_XCH_OPT_XCHCR_OPT: crate::Field = crate::Field::new(10, 0, SFR_XCH_OPT);

        pub const SFR_XCH_AXSTART: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_XCH_AXSTART_XCHCR_AXSTART: crate::Field = crate::Field::new(32, 0, SFR_XCH_AXSTART);

        pub const SFR_XCH_SEGID: crate::Register = crate::Register::new(7, 0xff);
        pub const SFR_XCH_SEGID_XCHCR_SEGID: crate::Field = crate::Field::new(8, 0, SFR_XCH_SEGID);

        pub const SFR_XCH_SEGSTART: crate::Register = crate::Register::new(8, 0xfff);
        pub const SFR_XCH_SEGSTART_XCHCR_SEGSTART: crate::Field = crate::Field::new(12, 0, SFR_XCH_SEGSTART);

        pub const SFR_XCH_TRANSIZE: crate::Register = crate::Register::new(9, 0x3fffffff);
        pub const SFR_XCH_TRANSIZE_XCHCR_TRANSIZE: crate::Field = crate::Field::new(30, 0, SFR_XCH_TRANSIZE);

        pub const SFR_SCH_FUNC: crate::Register = crate::Register::new(12, 0x1);
        pub const SFR_SCH_FUNC_SCHCR_FUNC: crate::Field = crate::Field::new(1, 0, SFR_SCH_FUNC);

        pub const SFR_SCH_OPT: crate::Register = crate::Register::new(13, 0x3ff);
        pub const SFR_SCH_OPT_SCHCR_OPT: crate::Field = crate::Field::new(10, 0, SFR_SCH_OPT);

        pub const SFR_SCH_AXSTART: crate::Register = crate::Register::new(14, 0xffffffff);
        pub const SFR_SCH_AXSTART_SCHCR_AXSTART: crate::Field = crate::Field::new(32, 0, SFR_SCH_AXSTART);

        pub const SFR_SCH_SEGID: crate::Register = crate::Register::new(15, 0xff);
        pub const SFR_SCH_SEGID_SCHCR_SEGID: crate::Field = crate::Field::new(8, 0, SFR_SCH_SEGID);

        pub const SFR_SCH_SEGSTART: crate::Register = crate::Register::new(16, 0xfff);
        pub const SFR_SCH_SEGSTART_SCHCR_SEGSTART: crate::Field = crate::Field::new(12, 0, SFR_SCH_SEGSTART);

        pub const SFR_SCH_TRANSIZE: crate::Register = crate::Register::new(17, 0x3fffffff);
        pub const SFR_SCH_TRANSIZE_SCHCR_TRANSIZE: crate::Field = crate::Field::new(30, 0, SFR_SCH_TRANSIZE);

        pub const SFR_ICH_OPT: crate::Register = crate::Register::new(20, 0xf);
        pub const SFR_ICH_OPT_SFR_ICH_OPT: crate::Field = crate::Field::new(4, 0, SFR_ICH_OPT);

        pub const SFR_ICH_SEGID: crate::Register = crate::Register::new(21, 0xffff);
        pub const SFR_ICH_SEGID_SFR_ICH_SEGID: crate::Field = crate::Field::new(16, 0, SFR_ICH_SEGID);

        pub const SFR_ICH_RPSTART: crate::Register = crate::Register::new(22, 0xfff);
        pub const SFR_ICH_RPSTART_ICHCR_RPSTART: crate::Field = crate::Field::new(12, 0, SFR_ICH_RPSTART);

        pub const SFR_ICH_WPSTART: crate::Register = crate::Register::new(23, 0xfff);
        pub const SFR_ICH_WPSTART_ICHCR_WPSTART: crate::Field = crate::Field::new(12, 0, SFR_ICH_WPSTART);

        pub const SFR_ICH_TRANSIZE: crate::Register = crate::Register::new(24, 0xfff);
        pub const SFR_ICH_TRANSIZE_ICHCR_TRANSIZE: crate::Field = crate::Field::new(12, 0, SFR_ICH_TRANSIZE);

        pub const SFR_WDATABYPASS_MODE: crate::Register = crate::Register::new(28, 0x3);
        pub const SFR_WDATABYPASS_MODE_SFR_WDATABYPASS_MODE: crate::Field = crate::Field::new(2, 0, SFR_WDATABYPASS_MODE);

        pub const SFR_WDATABYPASS_DATA: crate::Register = crate::Register::new(29, 0xffffffff);
        pub const SFR_WDATABYPASS_DATA_SFR_WDATABYPASS_DATA: crate::Field = crate::Field::new(32, 0, SFR_WDATABYPASS_DATA);

        pub const HW_SCEDMA_BASE: usize = 0x40029000;
    }

    pub mod sce_glbsfr {
        pub const SCE_GLBSFR_NUMREGS: usize = 21;

        pub const SFR_SUBEN: crate::Register = crate::Register::new(1, 0xffff);
        pub const SFR_SUBEN_CR_SUBEN: crate::Field = crate::Field::new(16, 0, SFR_SUBEN);

        pub const SFR_APBS: crate::Register = crate::Register::new(2, 0x1f);
        pub const SFR_APBS_CR_APBSOPT: crate::Field = crate::Field::new(5, 0, SFR_APBS);

        pub const SFR_SRBUSY: crate::Register = crate::Register::new(4, 0xffff);
        pub const SFR_SRBUSY_SR_BUSY: crate::Field = crate::Field::new(16, 0, SFR_SRBUSY);

        pub const SFR_FRDONE: crate::Register = crate::Register::new(5, 0xffff);
        pub const SFR_FRDONE_FR_DONE: crate::Field = crate::Field::new(16, 0, SFR_FRDONE);

        pub const SFR_FRERR: crate::Register = crate::Register::new(6, 0xffff);
        pub const SFR_FRERR_FR_ERR: crate::Field = crate::Field::new(16, 0, SFR_FRERR);

        pub const SFR_ARCLR: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_ARCLR_AR_CLRRAM: crate::Field = crate::Field::new(32, 0, SFR_ARCLR);

        pub const SFR_TICKCYC: crate::Register = crate::Register::new(8, 0xff);
        pub const SFR_TICKCYC_SFR_TICKCYC: crate::Field = crate::Field::new(8, 0, SFR_TICKCYC);

        pub const SFR_TICKCNT: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_TICKCNT_SFR_TICKCNT: crate::Field = crate::Field::new(32, 0, SFR_TICKCNT);

        pub const SFR_FFEN: crate::Register = crate::Register::new(12, 0x3f);
        pub const SFR_FFEN_CR_FFEN: crate::Field = crate::Field::new(6, 0, SFR_FFEN);

        pub const SFR_FFCLR: crate::Register = crate::Register::new(13, 0xffffffff);
        pub const SFR_FFCLR_AR_FFCLR: crate::Field = crate::Field::new(32, 0, SFR_FFCLR);

        pub const SFR_FFCNT_SR_FF0: crate::Register = crate::Register::new(16, 0xffff);
        pub const SFR_FFCNT_SR_FF0_SR_FF0: crate::Field = crate::Field::new(16, 0, SFR_FFCNT_SR_FF0);

        pub const SFR_FFCNT_SR_FF1: crate::Register = crate::Register::new(17, 0xffff);
        pub const SFR_FFCNT_SR_FF1_SR_FF1: crate::Field = crate::Field::new(16, 0, SFR_FFCNT_SR_FF1);

        pub const SFR_FFCNT_SR_FF2: crate::Register = crate::Register::new(18, 0xffff);
        pub const SFR_FFCNT_SR_FF2_SR_FF2: crate::Field = crate::Field::new(16, 0, SFR_FFCNT_SR_FF2);

        pub const SFR_FFCNT_SR_FF3: crate::Register = crate::Register::new(19, 0xffff);
        pub const SFR_FFCNT_SR_FF3_SR_FF3: crate::Field = crate::Field::new(16, 0, SFR_FFCNT_SR_FF3);

        pub const SFR_FFCNT_SR_FF4: crate::Register = crate::Register::new(20, 0xffff);
        pub const SFR_FFCNT_SR_FF4_SR_FF4: crate::Field = crate::Field::new(16, 0, SFR_FFCNT_SR_FF4);

        pub const SFR_FFCNT_SR_FF5: crate::Register = crate::Register::new(21, 0xffff);
        pub const SFR_FFCNT_SR_FF5_SR_FF5: crate::Field = crate::Field::new(16, 0, SFR_FFCNT_SR_FF5);

        pub const SFR_FRACERR: crate::Register = crate::Register::new(24, 0xff);
        pub const SFR_FRACERR_FR_ACERR: crate::Field = crate::Field::new(8, 0, SFR_FRACERR);

        pub const SFR_TS_SR_TS0: crate::Register = crate::Register::new(56, 0xffffffff);
        pub const SFR_TS_SR_TS0_SR_TS0: crate::Field = crate::Field::new(32, 0, SFR_TS_SR_TS0);

        pub const SFR_TS_SR_TS1: crate::Register = crate::Register::new(57, 0xffffffff);
        pub const SFR_TS_SR_TS1_SR_TS1: crate::Field = crate::Field::new(32, 0, SFR_TS_SR_TS1);

        pub const SFR_TS_SR_TS2: crate::Register = crate::Register::new(58, 0xffffffff);
        pub const SFR_TS_SR_TS2_SR_TS2: crate::Field = crate::Field::new(32, 0, SFR_TS_SR_TS2);

        pub const SFR_TS_SR_TS3: crate::Register = crate::Register::new(59, 0xffffffff);
        pub const SFR_TS_SR_TS3_SR_TS3: crate::Field = crate::Field::new(32, 0, SFR_TS_SR_TS3);

        pub const HW_SCE_GLBSFR_BASE: usize = 0x40028000;
    }

    pub mod duart {
        pub const DUART_NUMREGS: usize = 4;

        pub const SFR_TXD: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_TXD_SFR_TXD: crate::Field = crate::Field::new(8, 0, SFR_TXD);

        pub const SFR_CR: crate::Register = crate::Register::new(1, 0x1);
        pub const SFR_CR_SFR_CR: crate::Field = crate::Field::new(1, 0, SFR_CR);

        pub const SFR_SR: crate::Register = crate::Register::new(2, 0x1);
        pub const SFR_SR_SFR_SR: crate::Field = crate::Field::new(1, 0, SFR_SR);

        pub const SFR_ETUC: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_ETUC_SFR_ETUC: crate::Field = crate::Field::new(16, 0, SFR_ETUC);

        pub const HW_DUART_BASE: usize = 0x40042000;
    }

    pub mod rbist_wrp {
        pub const RBIST_WRP_NUMREGS: usize = 3;

        pub const SFRCR_TRM: crate::Register = crate::Register::new(0, 0xffffff);
        pub const SFRCR_TRM_SFRCR_TRM: crate::Field = crate::Field::new(24, 0, SFRCR_TRM);

        pub const SFRSR_TRM: crate::Register = crate::Register::new(1, 0xffffff);
        pub const SFRSR_TRM_SFRSR_TRM: crate::Field = crate::Field::new(24, 0, SFRSR_TRM);

        pub const SFRAR_TRM: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const SFRAR_TRM_SFRAR_TRM: crate::Field = crate::Field::new(32, 0, SFRAR_TRM);

        pub const HW_RBIST_WRP_BASE: usize = 0x40045000;
    }

    pub mod wdg_intf {
        pub const WDG_INTF_NUMREGS: usize = 0;

        pub const HW_WDG_INTF_BASE: usize = 0x40041000;
    }

    pub mod timer_intf {
        pub const TIMER_INTF_NUMREGS: usize = 0;

        pub const HW_TIMER_INTF_BASE: usize = 0x40043000;
    }

    pub mod evc {
        pub const EVC_NUMREGS: usize = 28;

        pub const SFR_CM7EVSEL_CM7EVSEL0: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL0);

        pub const SFR_CM7EVSEL_CM7EVSEL1: crate::Register = crate::Register::new(1, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL1);

        pub const SFR_CM7EVSEL_CM7EVSEL2: crate::Register = crate::Register::new(2, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL2);

        pub const SFR_CM7EVSEL_CM7EVSEL3: crate::Register = crate::Register::new(3, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL3);

        pub const SFR_CM7EVSEL_CM7EVSEL4: crate::Register = crate::Register::new(4, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL4);

        pub const SFR_CM7EVSEL_CM7EVSEL5: crate::Register = crate::Register::new(5, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL5);

        pub const SFR_CM7EVSEL_CM7EVSEL6: crate::Register = crate::Register::new(6, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL6);

        pub const SFR_CM7EVSEL_CM7EVSEL7: crate::Register = crate::Register::new(7, 0xff);
        pub const SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7: crate::Field = crate::Field::new(8, 0, SFR_CM7EVSEL_CM7EVSEL7);

        pub const SFR_CM7EVEN: crate::Register = crate::Register::new(8, 0xff);
        pub const SFR_CM7EVEN_CM7EVEN: crate::Field = crate::Field::new(8, 0, SFR_CM7EVEN);

        pub const SFR_CM7EVFR: crate::Register = crate::Register::new(9, 0xff);
        pub const SFR_CM7EVFR_CM7EVS: crate::Field = crate::Field::new(8, 0, SFR_CM7EVFR);

        pub const SFR_TMREVSEL: crate::Register = crate::Register::new(12, 0xffff);
        pub const SFR_TMREVSEL_TMR_EVSEL: crate::Field = crate::Field::new(16, 0, SFR_TMREVSEL);

        pub const SFR_TMREVEN: crate::Register = crate::Register::new(13, 0x3);
        pub const SFR_TMREVEN_SFR_TMREVEN: crate::Field = crate::Field::new(2, 0, SFR_TMREVEN);

        pub const SFR_IFEVEN_IFEVEN0: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN0_IFEVEN0: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN0);

        pub const SFR_IFEVEN_IFEVEN1: crate::Register = crate::Register::new(17, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN1_IFEVEN1: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN1);

        pub const SFR_IFEVEN_IFEVEN2: crate::Register = crate::Register::new(18, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN2_IFEVEN2: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN2);

        pub const SFR_IFEVEN_IFEVEN3: crate::Register = crate::Register::new(19, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN3_IFEVEN3: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN3);

        pub const SFR_IFEVEN_IFEVEN4: crate::Register = crate::Register::new(20, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN4_IFEVEN4: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN4);

        pub const SFR_IFEVEN_IFEVEN5: crate::Register = crate::Register::new(21, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN5_IFEVEN5: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN5);

        pub const SFR_IFEVEN_IFEVEN6: crate::Register = crate::Register::new(22, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN6_IFEVEN6: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN6);

        pub const SFR_IFEVEN_IFEVEN7: crate::Register = crate::Register::new(23, 0xffffffff);
        pub const SFR_IFEVEN_IFEVEN7_IFEVEN7: crate::Field = crate::Field::new(32, 0, SFR_IFEVEN_IFEVEN7);

        pub const SFR_IFEVERRFR: crate::Register = crate::Register::new(24, 0xffffffff);
        pub const SFR_IFEVERRFR_IFEV_ERRS: crate::Field = crate::Field::new(32, 0, SFR_IFEVERRFR);

        pub const SFR_CM7ERRFR: crate::Register = crate::Register::new(32, 0xffffffff);
        pub const SFR_CM7ERRFR_ERRIN: crate::Field = crate::Field::new(32, 0, SFR_CM7ERRFR);

        pub const SFR_CM7ERRCR: crate::Register = crate::Register::new(33, 0xffffffff);
        pub const SFR_CM7ERRCR_ERREN: crate::Field = crate::Field::new(32, 0, SFR_CM7ERRCR);

        pub const SFR_RRCEVSEL_RRC_EVSEL0: crate::Register = crate::Register::new(36, 0xffffffff);
        pub const SFR_RRCEVSEL_RRC_EVSEL0_RRC_EVSEL0: crate::Field = crate::Field::new(32, 0, SFR_RRCEVSEL_RRC_EVSEL0);

        pub const SFR_RRCEVSEL_RRC_EVSEL1: crate::Register = crate::Register::new(37, 0xffffffff);
        pub const SFR_RRCEVSEL_RRC_EVSEL1_RRC_EVSEL1: crate::Field = crate::Field::new(32, 0, SFR_RRCEVSEL_RRC_EVSEL1);

        pub const SFR_RRCEVSEL_RRC_EVSEL2: crate::Register = crate::Register::new(38, 0xffffffff);
        pub const SFR_RRCEVSEL_RRC_EVSEL2_RRC_EVSEL2: crate::Field = crate::Field::new(32, 0, SFR_RRCEVSEL_RRC_EVSEL2);

        pub const SFR_RRCEVSEL_RRC_EVSEL3: crate::Register = crate::Register::new(39, 0xffffffff);
        pub const SFR_RRCEVSEL_RRC_EVSEL3_RRC_EVSEL3: crate::Field = crate::Field::new(32, 0, SFR_RRCEVSEL_RRC_EVSEL3);

        pub const SFR_RRCEVEN: crate::Register = crate::Register::new(40, 0xffff);
        pub const SFR_RRCEVEN_RRC_EVEN: crate::Field = crate::Field::new(16, 0, SFR_RRCEVEN);

        pub const HW_EVC_BASE: usize = 0x40044000;
    }

    pub mod sysctrl {
        pub const SYSCTRL_NUMREGS: usize = 37;

        pub const SFR_CGUSEC: crate::Register = crate::Register::new(0, 0xffff);
        pub const SFR_CGUSEC_SFR_CGUSEC: crate::Field = crate::Field::new(16, 0, SFR_CGUSEC);

        pub const SFR_CGULP: crate::Register = crate::Register::new(1, 0xffff);
        pub const SFR_CGULP_SFR_CGULP: crate::Field = crate::Field::new(16, 0, SFR_CGULP);

        pub const SFR_SEED: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const SFR_SEED_SFR_SEED: crate::Field = crate::Field::new(32, 0, SFR_SEED);

        pub const SFR_SEEDAR: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const SFR_SEEDAR_SFR_SEEDAR: crate::Field = crate::Field::new(32, 0, SFR_SEEDAR);

        pub const SFR_CGUSEL0: crate::Register = crate::Register::new(4, 0x3);
        pub const SFR_CGUSEL0_SFR_CGUSEL0: crate::Field = crate::Field::new(2, 0, SFR_CGUSEL0);

        pub const SFR_CGUFD_CFGFDCR_0_4_0: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0: crate::Field = crate::Field::new(32, 0, SFR_CGUFD_CFGFDCR_0_4_0);

        pub const SFR_CGUFD_CFGFDCR_0_4_1: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1: crate::Field = crate::Field::new(32, 0, SFR_CGUFD_CFGFDCR_0_4_1);

        pub const SFR_CGUFD_CFGFDCR_0_4_2: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2: crate::Field = crate::Field::new(32, 0, SFR_CGUFD_CFGFDCR_0_4_2);

        pub const SFR_CGUFD_CFGFDCR_0_4_3: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3: crate::Field = crate::Field::new(32, 0, SFR_CGUFD_CFGFDCR_0_4_3);

        pub const SFR_CGUFD_CFGFDCR_0_4_4: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4: crate::Field = crate::Field::new(32, 0, SFR_CGUFD_CFGFDCR_0_4_4);

        pub const SFR_CGUFDAO: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_CGUFDAO_CFGFDCR: crate::Field = crate::Field::new(32, 0, SFR_CGUFDAO);

        pub const SFR_CGUSET: crate::Register = crate::Register::new(11, 0xffffffff);
        pub const SFR_CGUSET_SFR_CGUSET: crate::Field = crate::Field::new(32, 0, SFR_CGUSET);

        pub const SFR_CGUSEL1: crate::Register = crate::Register::new(12, 0x1);
        pub const SFR_CGUSEL1_SFR_CGUSEL1: crate::Field = crate::Field::new(1, 0, SFR_CGUSEL1);

        pub const SFR_CGUFDPKE: crate::Register = crate::Register::new(13, 0xff);
        pub const SFR_CGUFDPKE_SFR_CGUFDPKE: crate::Field = crate::Field::new(8, 0, SFR_CGUFDPKE);

        pub const SFR_CGUFDAORAM: crate::Register = crate::Register::new(14, 0xffff);
        pub const SFR_CGUFDAORAM_SFR_CGUFDAORAM: crate::Field = crate::Field::new(16, 0, SFR_CGUFDAORAM);

        pub const SFR_CGUFDPER: crate::Register = crate::Register::new(15, 0xffffffff);
        pub const SFR_CGUFDPER_SFR_CGUFDPER: crate::Field = crate::Field::new(32, 0, SFR_CGUFDPER);

        pub const SFR_CGUFSSR_FSFREQ0: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_CGUFSSR_FSFREQ0_FSFREQ0: crate::Field = crate::Field::new(32, 0, SFR_CGUFSSR_FSFREQ0);

        pub const SFR_CGUFSSR_FSFREQ1: crate::Register = crate::Register::new(17, 0xffffffff);
        pub const SFR_CGUFSSR_FSFREQ1_FSFREQ1: crate::Field = crate::Field::new(32, 0, SFR_CGUFSSR_FSFREQ1);

        pub const SFR_CGUFSSR_FSFREQ2: crate::Register = crate::Register::new(18, 0xffffffff);
        pub const SFR_CGUFSSR_FSFREQ2_FSFREQ2: crate::Field = crate::Field::new(32, 0, SFR_CGUFSSR_FSFREQ2);

        pub const SFR_CGUFSSR_FSFREQ3: crate::Register = crate::Register::new(19, 0xffffffff);
        pub const SFR_CGUFSSR_FSFREQ3_FSFREQ3: crate::Field = crate::Field::new(32, 0, SFR_CGUFSSR_FSFREQ3);

        pub const SFR_CGUFSVLD: crate::Register = crate::Register::new(20, 0xff);
        pub const SFR_CGUFSVLD_SFR_CGUFSVLD: crate::Field = crate::Field::new(8, 0, SFR_CGUFSVLD);

        pub const SFR_CGUFSCR: crate::Register = crate::Register::new(21, 0xffff);
        pub const SFR_CGUFSCR_SFR_CGUFSCR: crate::Field = crate::Field::new(16, 0, SFR_CGUFSCR);

        pub const SFR_ACLKGR: crate::Register = crate::Register::new(24, 0xff);
        pub const SFR_ACLKGR_ACLKSUBGATE: crate::Field = crate::Field::new(8, 0, SFR_ACLKGR);

        pub const SFR_HCLKGR: crate::Register = crate::Register::new(25, 0xff);
        pub const SFR_HCLKGR_HCLKSUBGATE: crate::Field = crate::Field::new(8, 0, SFR_HCLKGR);

        pub const SFR_ICLKGR: crate::Register = crate::Register::new(26, 0xff);
        pub const SFR_ICLKGR_ICLKSUBGATE: crate::Field = crate::Field::new(8, 0, SFR_ICLKGR);

        pub const SFR_PCLKGR: crate::Register = crate::Register::new(27, 0xff);
        pub const SFR_PCLKGR_PCLKSUBGATE: crate::Field = crate::Field::new(8, 0, SFR_PCLKGR);

        pub const SFR_RCURST0: crate::Register = crate::Register::new(32, 0xffffffff);
        pub const SFR_RCURST0_SFR_RCURST0: crate::Field = crate::Field::new(32, 0, SFR_RCURST0);

        pub const SFR_RCURST1: crate::Register = crate::Register::new(33, 0xffffffff);
        pub const SFR_RCURST1_SFR_RCURST1: crate::Field = crate::Field::new(32, 0, SFR_RCURST1);

        pub const SFR_RCUSRCFR: crate::Register = crate::Register::new(34, 0xffff);
        pub const SFR_RCUSRCFR_SFR_RCUSRCFR: crate::Field = crate::Field::new(16, 0, SFR_RCUSRCFR);

        pub const SFR_IPCARIPFLOW: crate::Register = crate::Register::new(36, 0xffffffff);
        pub const SFR_IPCARIPFLOW_SFR_IPCARIPFLOW: crate::Field = crate::Field::new(32, 0, SFR_IPCARIPFLOW);

        pub const SFR_IPCEN: crate::Register = crate::Register::new(37, 0xffff);
        pub const SFR_IPCEN_SFR_IPCEN: crate::Field = crate::Field::new(16, 0, SFR_IPCEN);

        pub const SFR_IPCLPEN: crate::Register = crate::Register::new(38, 0xffff);
        pub const SFR_IPCLPEN_SFR_IPCLPEN: crate::Field = crate::Field::new(16, 0, SFR_IPCLPEN);

        pub const SFR_IPCOSC: crate::Register = crate::Register::new(39, 0x7f);
        pub const SFR_IPCOSC_SFR_IPCOSC: crate::Field = crate::Field::new(7, 0, SFR_IPCOSC);

        pub const SFR_IPCPLLMN: crate::Register = crate::Register::new(40, 0x1ffff);
        pub const SFR_IPCPLLMN_SFR_IPCPLLMN: crate::Field = crate::Field::new(17, 0, SFR_IPCPLLMN);

        pub const SFR_IPCPLLF: crate::Register = crate::Register::new(41, 0x1ffffff);
        pub const SFR_IPCPLLF_SFR_IPCPLLF: crate::Field = crate::Field::new(25, 0, SFR_IPCPLLF);

        pub const SFR_IPCPLLQ: crate::Register = crate::Register::new(42, 0x7fff);
        pub const SFR_IPCPLLQ_SFR_IPCPLLQ: crate::Field = crate::Field::new(15, 0, SFR_IPCPLLQ);

        pub const SFR_IPCCR: crate::Register = crate::Register::new(43, 0xffff);
        pub const SFR_IPCCR_SFR_IPCCR: crate::Field = crate::Field::new(16, 0, SFR_IPCCR);

        pub const HW_SYSCTRL_BASE: usize = 0x40040000;
    }

    pub mod apb_thru {
        pub const APB_THRU_NUMREGS: usize = 0;

        pub const HW_APB_THRU_BASE: usize = 0x50122000;
    }

    pub mod bio_bdma {
        pub const BIO_BDMA_NUMREGS: usize = 60;

        pub const SFR_CTRL: crate::Register = crate::Register::new(0, 0xfff);
        pub const SFR_CTRL_EN: crate::Field = crate::Field::new(4, 0, SFR_CTRL);
        pub const SFR_CTRL_RESTART: crate::Field = crate::Field::new(4, 4, SFR_CTRL);
        pub const SFR_CTRL_CLKDIV_RESTART: crate::Field = crate::Field::new(4, 8, SFR_CTRL);

        pub const SFR_CFGINFO: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_CFGINFO_CONSTANT0: crate::Field = crate::Field::new(8, 0, SFR_CFGINFO);
        pub const SFR_CFGINFO_CONSTANT1: crate::Field = crate::Field::new(8, 8, SFR_CFGINFO);
        pub const SFR_CFGINFO_CONSTANT2: crate::Field = crate::Field::new(16, 16, SFR_CFGINFO);

        pub const SFR_CONFIG: crate::Register = crate::Register::new(2, 0x3ff);
        pub const SFR_CONFIG_SNAP_OUTPUT_TO_WHICH: crate::Field = crate::Field::new(2, 0, SFR_CONFIG);
        pub const SFR_CONFIG_SNAP_OUTPUT_TO_QUANTUM: crate::Field = crate::Field::new(1, 2, SFR_CONFIG);
        pub const SFR_CONFIG_SNAP_INPUT_TO_WHICH: crate::Field = crate::Field::new(2, 3, SFR_CONFIG);
        pub const SFR_CONFIG_SNAP_INPUT_TO_QUANTUM: crate::Field = crate::Field::new(1, 5, SFR_CONFIG);
        pub const SFR_CONFIG_DISABLE_FILTER_PERI: crate::Field = crate::Field::new(1, 6, SFR_CONFIG);
        pub const SFR_CONFIG_DISABLE_FILTER_MEM: crate::Field = crate::Field::new(1, 7, SFR_CONFIG);
        pub const SFR_CONFIG_CLOCKING_MODE: crate::Field = crate::Field::new(2, 8, SFR_CONFIG);

        pub const SFR_FLEVEL: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL0: crate::Field = crate::Field::new(4, 0, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL1: crate::Field = crate::Field::new(4, 4, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL2: crate::Field = crate::Field::new(4, 8, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL3: crate::Field = crate::Field::new(4, 12, SFR_FLEVEL);

        pub const SFR_TXF0: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const SFR_TXF0_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF0);

        pub const SFR_TXF1: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_TXF1_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF1);

        pub const SFR_TXF2: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_TXF2_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF2);

        pub const SFR_TXF3: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_TXF3_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF3);

        pub const SFR_RXF0: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_RXF0_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF0);

        pub const SFR_RXF1: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_RXF1_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF1);

        pub const SFR_RXF2: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_RXF2_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF2);

        pub const SFR_RXF3: crate::Register = crate::Register::new(11, 0xffffffff);
        pub const SFR_RXF3_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF3);

        pub const SFR_ELEVEL: crate::Register = crate::Register::new(12, 0xffffffff);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL0: crate::Field = crate::Field::new(4, 0, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL1: crate::Field = crate::Field::new(4, 4, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL2: crate::Field = crate::Field::new(4, 8, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL3: crate::Field = crate::Field::new(4, 12, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL4: crate::Field = crate::Field::new(4, 16, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL5: crate::Field = crate::Field::new(4, 20, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL6: crate::Field = crate::Field::new(4, 24, SFR_ELEVEL);
        pub const SFR_ELEVEL_FIFO_EVENT_LEVEL7: crate::Field = crate::Field::new(4, 28, SFR_ELEVEL);

        pub const SFR_ETYPE: crate::Register = crate::Register::new(13, 0xffffff);
        pub const SFR_ETYPE_FIFO_EVENT_LT_MASK: crate::Field = crate::Field::new(8, 0, SFR_ETYPE);
        pub const SFR_ETYPE_FIFO_EVENT_EQ_MASK: crate::Field = crate::Field::new(8, 8, SFR_ETYPE);
        pub const SFR_ETYPE_FIFO_EVENT_GT_MASK: crate::Field = crate::Field::new(8, 16, SFR_ETYPE);

        pub const SFR_EVENT_SET: crate::Register = crate::Register::new(14, 0xffffff);
        pub const SFR_EVENT_SET_SFR_EVENT_SET: crate::Field = crate::Field::new(24, 0, SFR_EVENT_SET);

        pub const SFR_EVENT_CLR: crate::Register = crate::Register::new(15, 0xffffff);
        pub const SFR_EVENT_CLR_SFR_EVENT_CLR: crate::Field = crate::Field::new(24, 0, SFR_EVENT_CLR);

        pub const SFR_EVENT_STATUS: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_EVENT_STATUS_SFR_EVENT_STATUS: crate::Field = crate::Field::new(32, 0, SFR_EVENT_STATUS);

        pub const SFR_EXTCLOCK: crate::Register = crate::Register::new(17, 0xffffff);
        pub const SFR_EXTCLOCK_USE_EXTCLK: crate::Field = crate::Field::new(4, 0, SFR_EXTCLOCK);
        pub const SFR_EXTCLOCK_EXTCLK_GPIO_0: crate::Field = crate::Field::new(5, 4, SFR_EXTCLOCK);
        pub const SFR_EXTCLOCK_EXTCLK_GPIO_1: crate::Field = crate::Field::new(5, 9, SFR_EXTCLOCK);
        pub const SFR_EXTCLOCK_EXTCLK_GPIO_2: crate::Field = crate::Field::new(5, 14, SFR_EXTCLOCK);
        pub const SFR_EXTCLOCK_EXTCLK_GPIO_3: crate::Field = crate::Field::new(5, 19, SFR_EXTCLOCK);

        pub const SFR_FIFO_CLR: crate::Register = crate::Register::new(18, 0xf);
        pub const SFR_FIFO_CLR_SFR_FIFO_CLR: crate::Field = crate::Field::new(4, 0, SFR_FIFO_CLR);

        pub const SFR_QDIV0: crate::Register = crate::Register::new(20, 0x7);
        pub const SFR_QDIV0_UNUSED_DIV: crate::Field = crate::Field::new(1, 0, SFR_QDIV0);
        pub const SFR_QDIV0_DIV_FRAC: crate::Field = crate::Field::new(1, 1, SFR_QDIV0);
        pub const SFR_QDIV0_DIV_INT: crate::Field = crate::Field::new(1, 2, SFR_QDIV0);

        pub const SFR_QDIV1: crate::Register = crate::Register::new(21, 0x7);
        pub const SFR_QDIV1_UNUSED_DIV: crate::Field = crate::Field::new(1, 0, SFR_QDIV1);
        pub const SFR_QDIV1_DIV_FRAC: crate::Field = crate::Field::new(1, 1, SFR_QDIV1);
        pub const SFR_QDIV1_DIV_INT: crate::Field = crate::Field::new(1, 2, SFR_QDIV1);

        pub const SFR_QDIV2: crate::Register = crate::Register::new(22, 0x7);
        pub const SFR_QDIV2_UNUSED_DIV: crate::Field = crate::Field::new(1, 0, SFR_QDIV2);
        pub const SFR_QDIV2_DIV_FRAC: crate::Field = crate::Field::new(1, 1, SFR_QDIV2);
        pub const SFR_QDIV2_DIV_INT: crate::Field = crate::Field::new(1, 2, SFR_QDIV2);

        pub const SFR_QDIV3: crate::Register = crate::Register::new(23, 0x7);
        pub const SFR_QDIV3_UNUSED_DIV: crate::Field = crate::Field::new(1, 0, SFR_QDIV3);
        pub const SFR_QDIV3_DIV_FRAC: crate::Field = crate::Field::new(1, 1, SFR_QDIV3);
        pub const SFR_QDIV3_DIV_INT: crate::Field = crate::Field::new(1, 2, SFR_QDIV3);

        pub const SFR_SYNC_BYPASS: crate::Register = crate::Register::new(24, 0xffffffff);
        pub const SFR_SYNC_BYPASS_SFR_SYNC_BYPASS: crate::Field = crate::Field::new(32, 0, SFR_SYNC_BYPASS);

        pub const SFR_IO_OE_INV: crate::Register = crate::Register::new(25, 0xffffffff);
        pub const SFR_IO_OE_INV_SFR_IO_OE_INV: crate::Field = crate::Field::new(32, 0, SFR_IO_OE_INV);

        pub const SFR_IO_O_INV: crate::Register = crate::Register::new(26, 0xffffffff);
        pub const SFR_IO_O_INV_SFR_IO_O_INV: crate::Field = crate::Field::new(32, 0, SFR_IO_O_INV);

        pub const SFR_IO_I_INV: crate::Register = crate::Register::new(27, 0xffffffff);
        pub const SFR_IO_I_INV_SFR_IO_I_INV: crate::Field = crate::Field::new(32, 0, SFR_IO_I_INV);

        pub const SFR_IRQMASK_0: crate::Register = crate::Register::new(28, 0xffffffff);
        pub const SFR_IRQMASK_0_SFR_IRQMASK_0: crate::Field = crate::Field::new(32, 0, SFR_IRQMASK_0);

        pub const SFR_IRQMASK_1: crate::Register = crate::Register::new(29, 0xffffffff);
        pub const SFR_IRQMASK_1_SFR_IRQMASK_1: crate::Field = crate::Field::new(32, 0, SFR_IRQMASK_1);

        pub const SFR_IRQMASK_2: crate::Register = crate::Register::new(30, 0xffffffff);
        pub const SFR_IRQMASK_2_SFR_IRQMASK_2: crate::Field = crate::Field::new(32, 0, SFR_IRQMASK_2);

        pub const SFR_IRQMASK_3: crate::Register = crate::Register::new(31, 0xffffffff);
        pub const SFR_IRQMASK_3_SFR_IRQMASK_3: crate::Field = crate::Field::new(32, 0, SFR_IRQMASK_3);

        pub const SFR_IRQ_EDGE: crate::Register = crate::Register::new(32, 0xf);
        pub const SFR_IRQ_EDGE_SFR_IRQ_EDGE: crate::Field = crate::Field::new(4, 0, SFR_IRQ_EDGE);

        pub const SFR_DBG_PADOUT: crate::Register = crate::Register::new(33, 0xffffffff);
        pub const SFR_DBG_PADOUT_SFR_DBG_PADOUT: crate::Field = crate::Field::new(32, 0, SFR_DBG_PADOUT);

        pub const SFR_DBG_PADOE: crate::Register = crate::Register::new(34, 0xffffffff);
        pub const SFR_DBG_PADOE_SFR_DBG_PADOE: crate::Field = crate::Field::new(32, 0, SFR_DBG_PADOE);

        pub const SFR_DBG0: crate::Register = crate::Register::new(36, 0x3);
        pub const SFR_DBG0_DBG_PC: crate::Field = crate::Field::new(1, 0, SFR_DBG0);
        pub const SFR_DBG0_TRAP: crate::Field = crate::Field::new(1, 1, SFR_DBG0);

        pub const SFR_DBG1: crate::Register = crate::Register::new(37, 0x3);
        pub const SFR_DBG1_DBG_PC: crate::Field = crate::Field::new(1, 0, SFR_DBG1);
        pub const SFR_DBG1_TRAP: crate::Field = crate::Field::new(1, 1, SFR_DBG1);

        pub const SFR_DBG2: crate::Register = crate::Register::new(38, 0x3);
        pub const SFR_DBG2_DBG_PC: crate::Field = crate::Field::new(1, 0, SFR_DBG2);
        pub const SFR_DBG2_TRAP: crate::Field = crate::Field::new(1, 1, SFR_DBG2);

        pub const SFR_DBG3: crate::Register = crate::Register::new(39, 0x3);
        pub const SFR_DBG3_DBG_PC: crate::Field = crate::Field::new(1, 0, SFR_DBG3);
        pub const SFR_DBG3_TRAP: crate::Field = crate::Field::new(1, 1, SFR_DBG3);

        pub const SFR_MEM_GUTTER: crate::Register = crate::Register::new(40, 0xffffffff);
        pub const SFR_MEM_GUTTER_SFR_MEM_GUTTER: crate::Field = crate::Field::new(32, 0, SFR_MEM_GUTTER);

        pub const SFR_PERI_GUTTER: crate::Register = crate::Register::new(41, 0xffffffff);
        pub const SFR_PERI_GUTTER_SFR_PERI_GUTTER: crate::Field = crate::Field::new(32, 0, SFR_PERI_GUTTER);

        pub const SFR_DMAREQ_MAP_CR_EVMAP0: crate::Register = crate::Register::new(44, 0xffffffff);
        pub const SFR_DMAREQ_MAP_CR_EVMAP0_CR_EVMAP0: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_MAP_CR_EVMAP0);

        pub const SFR_DMAREQ_MAP_CR_EVMAP1: crate::Register = crate::Register::new(45, 0xffffffff);
        pub const SFR_DMAREQ_MAP_CR_EVMAP1_CR_EVMAP1: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_MAP_CR_EVMAP1);

        pub const SFR_DMAREQ_MAP_CR_EVMAP2: crate::Register = crate::Register::new(46, 0xffffffff);
        pub const SFR_DMAREQ_MAP_CR_EVMAP2_CR_EVMAP2: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_MAP_CR_EVMAP2);

        pub const SFR_DMAREQ_MAP_CR_EVMAP3: crate::Register = crate::Register::new(47, 0xffffffff);
        pub const SFR_DMAREQ_MAP_CR_EVMAP3_CR_EVMAP3: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_MAP_CR_EVMAP3);

        pub const SFR_DMAREQ_MAP_CR_EVMAP4: crate::Register = crate::Register::new(48, 0xffffffff);
        pub const SFR_DMAREQ_MAP_CR_EVMAP4_CR_EVMAP4: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_MAP_CR_EVMAP4);

        pub const SFR_DMAREQ_MAP_CR_EVMAP5: crate::Register = crate::Register::new(49, 0xffffffff);
        pub const SFR_DMAREQ_MAP_CR_EVMAP5_CR_EVMAP5: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_MAP_CR_EVMAP5);

        pub const SFR_DMAREQ_STAT_SR_EVSTAT0: crate::Register = crate::Register::new(50, 0xffffffff);
        pub const SFR_DMAREQ_STAT_SR_EVSTAT0_SR_EVSTAT0: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_STAT_SR_EVSTAT0);

        pub const SFR_DMAREQ_STAT_SR_EVSTAT1: crate::Register = crate::Register::new(51, 0xffffffff);
        pub const SFR_DMAREQ_STAT_SR_EVSTAT1_SR_EVSTAT1: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_STAT_SR_EVSTAT1);

        pub const SFR_DMAREQ_STAT_SR_EVSTAT2: crate::Register = crate::Register::new(52, 0xffffffff);
        pub const SFR_DMAREQ_STAT_SR_EVSTAT2_SR_EVSTAT2: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_STAT_SR_EVSTAT2);

        pub const SFR_DMAREQ_STAT_SR_EVSTAT3: crate::Register = crate::Register::new(53, 0xffffffff);
        pub const SFR_DMAREQ_STAT_SR_EVSTAT3_SR_EVSTAT3: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_STAT_SR_EVSTAT3);

        pub const SFR_DMAREQ_STAT_SR_EVSTAT4: crate::Register = crate::Register::new(54, 0xffffffff);
        pub const SFR_DMAREQ_STAT_SR_EVSTAT4_SR_EVSTAT4: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_STAT_SR_EVSTAT4);

        pub const SFR_DMAREQ_STAT_SR_EVSTAT5: crate::Register = crate::Register::new(55, 0xffffffff);
        pub const SFR_DMAREQ_STAT_SR_EVSTAT5_SR_EVSTAT5: crate::Field = crate::Field::new(32, 0, SFR_DMAREQ_STAT_SR_EVSTAT5);

        pub const SFR_FILTER_BASE_0: crate::Register = crate::Register::new(56, 0xfffff);
        pub const SFR_FILTER_BASE_0_FILTER_BASE: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BASE_0);

        pub const SFR_FILTER_BOUNDS_0: crate::Register = crate::Register::new(57, 0xfffff);
        pub const SFR_FILTER_BOUNDS_0_FILTER_BOUNDS: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BOUNDS_0);

        pub const SFR_FILTER_BASE_1: crate::Register = crate::Register::new(58, 0xfffff);
        pub const SFR_FILTER_BASE_1_FILTER_BASE: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BASE_1);

        pub const SFR_FILTER_BOUNDS_1: crate::Register = crate::Register::new(59, 0xfffff);
        pub const SFR_FILTER_BOUNDS_1_FILTER_BOUNDS: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BOUNDS_1);

        pub const SFR_FILTER_BASE_2: crate::Register = crate::Register::new(60, 0xfffff);
        pub const SFR_FILTER_BASE_2_FILTER_BASE: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BASE_2);

        pub const SFR_FILTER_BOUNDS_2: crate::Register = crate::Register::new(61, 0xfffff);
        pub const SFR_FILTER_BOUNDS_2_FILTER_BOUNDS: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BOUNDS_2);

        pub const SFR_FILTER_BASE_3: crate::Register = crate::Register::new(62, 0xfffff);
        pub const SFR_FILTER_BASE_3_FILTER_BASE: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BASE_3);

        pub const SFR_FILTER_BOUNDS_3: crate::Register = crate::Register::new(63, 0xfffff);
        pub const SFR_FILTER_BOUNDS_3_FILTER_BOUNDS: crate::Field = crate::Field::new(20, 0, SFR_FILTER_BOUNDS_3);

        pub const HW_BIO_BDMA_BASE: usize = 0x50124000;
    }

    pub mod iox {
        pub const IOX_NUMREGS: usize = 64;

        pub const SFR_AFSEL_CRAFSEL0: crate::Register = crate::Register::new(0, 0xffff);
        pub const SFR_AFSEL_CRAFSEL0_CRAFSEL0: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL0);

        pub const SFR_AFSEL_CRAFSEL1: crate::Register = crate::Register::new(1, 0xffff);
        pub const SFR_AFSEL_CRAFSEL1_CRAFSEL1: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL1);

        pub const SFR_AFSEL_CRAFSEL2: crate::Register = crate::Register::new(2, 0xffff);
        pub const SFR_AFSEL_CRAFSEL2_CRAFSEL2: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL2);

        pub const SFR_AFSEL_CRAFSEL3: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_AFSEL_CRAFSEL3_CRAFSEL3: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL3);

        pub const SFR_AFSEL_CRAFSEL4: crate::Register = crate::Register::new(4, 0xffff);
        pub const SFR_AFSEL_CRAFSEL4_CRAFSEL4: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL4);

        pub const SFR_AFSEL_CRAFSEL5: crate::Register = crate::Register::new(5, 0xffff);
        pub const SFR_AFSEL_CRAFSEL5_CRAFSEL5: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL5);

        pub const SFR_AFSEL_CRAFSEL6: crate::Register = crate::Register::new(6, 0xffff);
        pub const SFR_AFSEL_CRAFSEL6_CRAFSEL6: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL6);

        pub const SFR_AFSEL_CRAFSEL7: crate::Register = crate::Register::new(7, 0xffff);
        pub const SFR_AFSEL_CRAFSEL7_CRAFSEL7: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL7);

        pub const SFR_AFSEL_CRAFSEL8: crate::Register = crate::Register::new(8, 0xffff);
        pub const SFR_AFSEL_CRAFSEL8_CRAFSEL8: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL8);

        pub const SFR_AFSEL_CRAFSEL9: crate::Register = crate::Register::new(9, 0xffff);
        pub const SFR_AFSEL_CRAFSEL9_CRAFSEL9: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL9);

        pub const SFR_AFSEL_CRAFSEL10: crate::Register = crate::Register::new(10, 0xffff);
        pub const SFR_AFSEL_CRAFSEL10_CRAFSEL10: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL10);

        pub const SFR_AFSEL_CRAFSEL11: crate::Register = crate::Register::new(11, 0xffff);
        pub const SFR_AFSEL_CRAFSEL11_CRAFSEL11: crate::Field = crate::Field::new(16, 0, SFR_AFSEL_CRAFSEL11);

        pub const SFR_INTCR_CRINT0: crate::Register = crate::Register::new(64, 0x3ff);
        pub const SFR_INTCR_CRINT0_CRINT0: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT0);

        pub const SFR_INTCR_CRINT1: crate::Register = crate::Register::new(65, 0x3ff);
        pub const SFR_INTCR_CRINT1_CRINT1: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT1);

        pub const SFR_INTCR_CRINT2: crate::Register = crate::Register::new(66, 0x3ff);
        pub const SFR_INTCR_CRINT2_CRINT2: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT2);

        pub const SFR_INTCR_CRINT3: crate::Register = crate::Register::new(67, 0x3ff);
        pub const SFR_INTCR_CRINT3_CRINT3: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT3);

        pub const SFR_INTCR_CRINT4: crate::Register = crate::Register::new(68, 0x3ff);
        pub const SFR_INTCR_CRINT4_CRINT4: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT4);

        pub const SFR_INTCR_CRINT5: crate::Register = crate::Register::new(69, 0x3ff);
        pub const SFR_INTCR_CRINT5_CRINT5: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT5);

        pub const SFR_INTCR_CRINT6: crate::Register = crate::Register::new(70, 0x3ff);
        pub const SFR_INTCR_CRINT6_CRINT6: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT6);

        pub const SFR_INTCR_CRINT7: crate::Register = crate::Register::new(71, 0x3ff);
        pub const SFR_INTCR_CRINT7_CRINT7: crate::Field = crate::Field::new(10, 0, SFR_INTCR_CRINT7);

        pub const SFR_INTFR: crate::Register = crate::Register::new(72, 0xff);
        pub const SFR_INTFR_FRINT: crate::Field = crate::Field::new(8, 0, SFR_INTFR);

        pub const SFR_GPIOOUT_CRGO0: crate::Register = crate::Register::new(76, 0xffff);
        pub const SFR_GPIOOUT_CRGO0_CRGO0: crate::Field = crate::Field::new(16, 0, SFR_GPIOOUT_CRGO0);

        pub const SFR_GPIOOUT_CRGO1: crate::Register = crate::Register::new(77, 0xffff);
        pub const SFR_GPIOOUT_CRGO1_CRGO1: crate::Field = crate::Field::new(16, 0, SFR_GPIOOUT_CRGO1);

        pub const SFR_GPIOOUT_CRGO2: crate::Register = crate::Register::new(78, 0xffff);
        pub const SFR_GPIOOUT_CRGO2_CRGO2: crate::Field = crate::Field::new(16, 0, SFR_GPIOOUT_CRGO2);

        pub const SFR_GPIOOUT_CRGO3: crate::Register = crate::Register::new(79, 0xffff);
        pub const SFR_GPIOOUT_CRGO3_CRGO3: crate::Field = crate::Field::new(16, 0, SFR_GPIOOUT_CRGO3);

        pub const SFR_GPIOOUT_CRGO4: crate::Register = crate::Register::new(80, 0xffff);
        pub const SFR_GPIOOUT_CRGO4_CRGO4: crate::Field = crate::Field::new(16, 0, SFR_GPIOOUT_CRGO4);

        pub const SFR_GPIOOUT_CRGO5: crate::Register = crate::Register::new(81, 0xffff);
        pub const SFR_GPIOOUT_CRGO5_CRGO5: crate::Field = crate::Field::new(16, 0, SFR_GPIOOUT_CRGO5);

        pub const SFR_GPIOOE_CRGOE0: crate::Register = crate::Register::new(82, 0xffff);
        pub const SFR_GPIOOE_CRGOE0_CRGOE0: crate::Field = crate::Field::new(16, 0, SFR_GPIOOE_CRGOE0);

        pub const SFR_GPIOOE_CRGOE1: crate::Register = crate::Register::new(83, 0xffff);
        pub const SFR_GPIOOE_CRGOE1_CRGOE1: crate::Field = crate::Field::new(16, 0, SFR_GPIOOE_CRGOE1);

        pub const SFR_GPIOOE_CRGOE2: crate::Register = crate::Register::new(84, 0xffff);
        pub const SFR_GPIOOE_CRGOE2_CRGOE2: crate::Field = crate::Field::new(16, 0, SFR_GPIOOE_CRGOE2);

        pub const SFR_GPIOOE_CRGOE3: crate::Register = crate::Register::new(85, 0xffff);
        pub const SFR_GPIOOE_CRGOE3_CRGOE3: crate::Field = crate::Field::new(16, 0, SFR_GPIOOE_CRGOE3);

        pub const SFR_GPIOOE_CRGOE4: crate::Register = crate::Register::new(86, 0xffff);
        pub const SFR_GPIOOE_CRGOE4_CRGOE4: crate::Field = crate::Field::new(16, 0, SFR_GPIOOE_CRGOE4);

        pub const SFR_GPIOOE_CRGOE5: crate::Register = crate::Register::new(87, 0xffff);
        pub const SFR_GPIOOE_CRGOE5_CRGOE5: crate::Field = crate::Field::new(16, 0, SFR_GPIOOE_CRGOE5);

        pub const SFR_GPIOPU_CRGPU0: crate::Register = crate::Register::new(88, 0xffff);
        pub const SFR_GPIOPU_CRGPU0_CRGPU0: crate::Field = crate::Field::new(16, 0, SFR_GPIOPU_CRGPU0);

        pub const SFR_GPIOPU_CRGPU1: crate::Register = crate::Register::new(89, 0xffff);
        pub const SFR_GPIOPU_CRGPU1_CRGPU1: crate::Field = crate::Field::new(16, 0, SFR_GPIOPU_CRGPU1);

        pub const SFR_GPIOPU_CRGPU2: crate::Register = crate::Register::new(90, 0xffff);
        pub const SFR_GPIOPU_CRGPU2_CRGPU2: crate::Field = crate::Field::new(16, 0, SFR_GPIOPU_CRGPU2);

        pub const SFR_GPIOPU_CRGPU3: crate::Register = crate::Register::new(91, 0xffff);
        pub const SFR_GPIOPU_CRGPU3_CRGPU3: crate::Field = crate::Field::new(16, 0, SFR_GPIOPU_CRGPU3);

        pub const SFR_GPIOPU_CRGPU4: crate::Register = crate::Register::new(92, 0xffff);
        pub const SFR_GPIOPU_CRGPU4_CRGPU4: crate::Field = crate::Field::new(16, 0, SFR_GPIOPU_CRGPU4);

        pub const SFR_GPIOPU_CRGPU5: crate::Register = crate::Register::new(93, 0xffff);
        pub const SFR_GPIOPU_CRGPU5_CRGPU5: crate::Field = crate::Field::new(16, 0, SFR_GPIOPU_CRGPU5);

        pub const SFR_GPIOIN_SRGI0: crate::Register = crate::Register::new(94, 0xffff);
        pub const SFR_GPIOIN_SRGI0_SRGI0: crate::Field = crate::Field::new(16, 0, SFR_GPIOIN_SRGI0);

        pub const SFR_GPIOIN_SRGI1: crate::Register = crate::Register::new(95, 0xffff);
        pub const SFR_GPIOIN_SRGI1_SRGI1: crate::Field = crate::Field::new(16, 0, SFR_GPIOIN_SRGI1);

        pub const SFR_GPIOIN_SRGI2: crate::Register = crate::Register::new(96, 0xffff);
        pub const SFR_GPIOIN_SRGI2_SRGI2: crate::Field = crate::Field::new(16, 0, SFR_GPIOIN_SRGI2);

        pub const SFR_GPIOIN_SRGI3: crate::Register = crate::Register::new(97, 0xffff);
        pub const SFR_GPIOIN_SRGI3_SRGI3: crate::Field = crate::Field::new(16, 0, SFR_GPIOIN_SRGI3);

        pub const SFR_GPIOIN_SRGI4: crate::Register = crate::Register::new(98, 0xffff);
        pub const SFR_GPIOIN_SRGI4_SRGI4: crate::Field = crate::Field::new(16, 0, SFR_GPIOIN_SRGI4);

        pub const SFR_GPIOIN_SRGI5: crate::Register = crate::Register::new(99, 0xffff);
        pub const SFR_GPIOIN_SRGI5_SRGI5: crate::Field = crate::Field::new(16, 0, SFR_GPIOIN_SRGI5);

        pub const SFR_PIOSEL: crate::Register = crate::Register::new(128, 0xffffffff);
        pub const SFR_PIOSEL_PIOSEL: crate::Field = crate::Field::new(32, 0, SFR_PIOSEL);

        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL0: crate::Register = crate::Register::new(140, 0xffff);
        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0: crate::Field = crate::Field::new(16, 0, SFR_CFG_SCHM_CR_CFG_SCHMSEL0);

        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL1: crate::Register = crate::Register::new(141, 0xffff);
        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1: crate::Field = crate::Field::new(16, 0, SFR_CFG_SCHM_CR_CFG_SCHMSEL1);

        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL2: crate::Register = crate::Register::new(142, 0xffff);
        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2: crate::Field = crate::Field::new(16, 0, SFR_CFG_SCHM_CR_CFG_SCHMSEL2);

        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL3: crate::Register = crate::Register::new(143, 0xffff);
        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3: crate::Field = crate::Field::new(16, 0, SFR_CFG_SCHM_CR_CFG_SCHMSEL3);

        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL4: crate::Register = crate::Register::new(144, 0xffff);
        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4: crate::Field = crate::Field::new(16, 0, SFR_CFG_SCHM_CR_CFG_SCHMSEL4);

        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL5: crate::Register = crate::Register::new(145, 0xffff);
        pub const SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5: crate::Field = crate::Field::new(16, 0, SFR_CFG_SCHM_CR_CFG_SCHMSEL5);

        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW0: crate::Register = crate::Register::new(146, 0xffff);
        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0: crate::Field = crate::Field::new(16, 0, SFR_CFG_SLEW_CR_CFG_SLEWSLOW0);

        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW1: crate::Register = crate::Register::new(147, 0xffff);
        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1: crate::Field = crate::Field::new(16, 0, SFR_CFG_SLEW_CR_CFG_SLEWSLOW1);

        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW2: crate::Register = crate::Register::new(148, 0xffff);
        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2: crate::Field = crate::Field::new(16, 0, SFR_CFG_SLEW_CR_CFG_SLEWSLOW2);

        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW3: crate::Register = crate::Register::new(149, 0xffff);
        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3: crate::Field = crate::Field::new(16, 0, SFR_CFG_SLEW_CR_CFG_SLEWSLOW3);

        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW4: crate::Register = crate::Register::new(150, 0xffff);
        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4: crate::Field = crate::Field::new(16, 0, SFR_CFG_SLEW_CR_CFG_SLEWSLOW4);

        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW5: crate::Register = crate::Register::new(151, 0xffff);
        pub const SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5: crate::Field = crate::Field::new(16, 0, SFR_CFG_SLEW_CR_CFG_SLEWSLOW5);

        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL0: crate::Register = crate::Register::new(152, 0xffffffff);
        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0: crate::Field = crate::Field::new(32, 0, SFR_CFG_DRVSEL_CR_CFG_DRVSEL0);

        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL1: crate::Register = crate::Register::new(153, 0xffffffff);
        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1: crate::Field = crate::Field::new(32, 0, SFR_CFG_DRVSEL_CR_CFG_DRVSEL1);

        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL2: crate::Register = crate::Register::new(154, 0xffffffff);
        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2: crate::Field = crate::Field::new(32, 0, SFR_CFG_DRVSEL_CR_CFG_DRVSEL2);

        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL3: crate::Register = crate::Register::new(155, 0xffffffff);
        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3: crate::Field = crate::Field::new(32, 0, SFR_CFG_DRVSEL_CR_CFG_DRVSEL3);

        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL4: crate::Register = crate::Register::new(156, 0xffffffff);
        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4: crate::Field = crate::Field::new(32, 0, SFR_CFG_DRVSEL_CR_CFG_DRVSEL4);

        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL5: crate::Register = crate::Register::new(157, 0xffffffff);
        pub const SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5: crate::Field = crate::Field::new(32, 0, SFR_CFG_DRVSEL_CR_CFG_DRVSEL5);

        pub const HW_IOX_BASE: usize = 0x5012f000;
    }

    pub mod pwm {
        pub const PWM_NUMREGS: usize = 46;

        pub const REG_TIM0_CMD: crate::Register = crate::Register::new(0, 0x1f);
        pub const REG_TIM0_CMD_R_TIMER0_START: crate::Field = crate::Field::new(1, 0, REG_TIM0_CMD);
        pub const REG_TIM0_CMD_R_TIMER0_STOP: crate::Field = crate::Field::new(1, 1, REG_TIM0_CMD);
        pub const REG_TIM0_CMD_R_TIMER0_UPDATE: crate::Field = crate::Field::new(1, 2, REG_TIM0_CMD);
        pub const REG_TIM0_CMD_R_TIMER0_RST: crate::Field = crate::Field::new(1, 3, REG_TIM0_CMD);
        pub const REG_TIM0_CMD_R_TIMER0_ARM: crate::Field = crate::Field::new(1, 4, REG_TIM0_CMD);

        pub const REG_TIM0_CFG: crate::Register = crate::Register::new(1, 0xff1fff);
        pub const REG_TIM0_CFG_R_TIMER0_IN_SEL: crate::Field = crate::Field::new(8, 0, REG_TIM0_CFG);
        pub const REG_TIM0_CFG_R_TIMER0_IN_MODE: crate::Field = crate::Field::new(3, 8, REG_TIM0_CFG);
        pub const REG_TIM0_CFG_R_TIMER0_IN_CLK: crate::Field = crate::Field::new(1, 11, REG_TIM0_CFG);
        pub const REG_TIM0_CFG_R_TIMER0_SAW: crate::Field = crate::Field::new(1, 12, REG_TIM0_CFG);
        pub const REG_TIM0_CFG_R_TIMER0_PRESC: crate::Field = crate::Field::new(8, 16, REG_TIM0_CFG);

        pub const REG_TIM0_CH0_TH: crate::Register = crate::Register::new(3, 0x7ffff);
        pub const REG_TIM0_CH0_TH_R_TIMER0_CH0_TH: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH0_TH);
        pub const REG_TIM0_CH0_TH_R_TIMER0_CH0_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM0_CH0_TH);

        pub const REG_TIM0_CH1_TH: crate::Register = crate::Register::new(4, 0x7ffff);
        pub const REG_TIM0_CH1_TH_R_TIMER0_CH1_TH: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH1_TH);
        pub const REG_TIM0_CH1_TH_R_TIMER0_CH1_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM0_CH1_TH);

        pub const REG_TIM0_CH2_TH: crate::Register = crate::Register::new(5, 0x7ffff);
        pub const REG_TIM0_CH2_TH_R_TIMER0_CH2_TH: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH2_TH);
        pub const REG_TIM0_CH2_TH_R_TIMER0_CH2_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM0_CH2_TH);

        pub const REG_TIM0_CH3_TH: crate::Register = crate::Register::new(6, 0x7ffff);
        pub const REG_TIM0_CH3_TH_R_TIMER0_CH3_TH: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH3_TH);
        pub const REG_TIM0_CH3_TH_R_TIMER0_CH3_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM0_CH3_TH);

        pub const REG_TIM0_CH0_LUT: crate::Register = crate::Register::new(7, 0x3ffff);
        pub const REG_TIM0_CH0_LUT_R_TIMER0_CH0_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH0_LUT);
        pub const REG_TIM0_CH0_LUT_R_TIMER0_CH0_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM0_CH0_LUT);

        pub const REG_TIM0_CH1_LUT: crate::Register = crate::Register::new(8, 0x3ffff);
        pub const REG_TIM0_CH1_LUT_R_TIMER0_CH1_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH1_LUT);
        pub const REG_TIM0_CH1_LUT_R_TIMER0_CH1_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM0_CH1_LUT);

        pub const REG_TIM0_CH2_LUT: crate::Register = crate::Register::new(9, 0x3ffff);
        pub const REG_TIM0_CH2_LUT_R_TIMER0_CH2_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH2_LUT);
        pub const REG_TIM0_CH2_LUT_R_TIMER0_CH2_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM0_CH2_LUT);

        pub const REG_TIM0_CH3_LUT: crate::Register = crate::Register::new(10, 0x3ffff);
        pub const REG_TIM0_CH3_LUT_R_TIMER0_CH3_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM0_CH3_LUT);
        pub const REG_TIM0_CH3_LUT_R_TIMER0_CH3_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM0_CH3_LUT);

        pub const REG_TIM1_CMD: crate::Register = crate::Register::new(16, 0x1f);
        pub const REG_TIM1_CMD_R_TIMER1_START: crate::Field = crate::Field::new(1, 0, REG_TIM1_CMD);
        pub const REG_TIM1_CMD_R_TIMER1_STOP: crate::Field = crate::Field::new(1, 1, REG_TIM1_CMD);
        pub const REG_TIM1_CMD_R_TIMER1_UPDATE: crate::Field = crate::Field::new(1, 2, REG_TIM1_CMD);
        pub const REG_TIM1_CMD_R_TIMER1_RST: crate::Field = crate::Field::new(1, 3, REG_TIM1_CMD);
        pub const REG_TIM1_CMD_R_TIMER1_ARM: crate::Field = crate::Field::new(1, 4, REG_TIM1_CMD);

        pub const REG_TIM1_CFG: crate::Register = crate::Register::new(17, 0xff1fff);
        pub const REG_TIM1_CFG_R_TIMER1_IN_SEL: crate::Field = crate::Field::new(8, 0, REG_TIM1_CFG);
        pub const REG_TIM1_CFG_R_TIMER1_IN_MODE: crate::Field = crate::Field::new(3, 8, REG_TIM1_CFG);
        pub const REG_TIM1_CFG_R_TIMER1_IN_CLK: crate::Field = crate::Field::new(1, 11, REG_TIM1_CFG);
        pub const REG_TIM1_CFG_R_TIMER1_SAW: crate::Field = crate::Field::new(1, 12, REG_TIM1_CFG);
        pub const REG_TIM1_CFG_R_TIMER1_PRESC: crate::Field = crate::Field::new(8, 16, REG_TIM1_CFG);

        pub const REG_TIM1_CH0_TH: crate::Register = crate::Register::new(19, 0x7ffff);
        pub const REG_TIM1_CH0_TH_R_TIMER1_CH0_TH: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH0_TH);
        pub const REG_TIM1_CH0_TH_R_TIMER1_CH0_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM1_CH0_TH);

        pub const REG_TIM1_CH1_TH: crate::Register = crate::Register::new(20, 0x7ffff);
        pub const REG_TIM1_CH1_TH_R_TIMER1_CH1_TH: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH1_TH);
        pub const REG_TIM1_CH1_TH_R_TIMER1_CH1_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM1_CH1_TH);

        pub const REG_TIM1_CH2_TH: crate::Register = crate::Register::new(21, 0x7ffff);
        pub const REG_TIM1_CH2_TH_R_TIMER1_CH2_TH: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH2_TH);
        pub const REG_TIM1_CH2_TH_R_TIMER1_CH2_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM1_CH2_TH);

        pub const REG_TIM1_CH3_TH: crate::Register = crate::Register::new(22, 0x7ffff);
        pub const REG_TIM1_CH3_TH_R_TIMER1_CH3_TH: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH3_TH);
        pub const REG_TIM1_CH3_TH_R_TIMER1_CH3_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM1_CH3_TH);

        pub const REG_TIM1_CH0_LUT: crate::Register = crate::Register::new(23, 0x3ffff);
        pub const REG_TIM1_CH0_LUT_R_TIMER1_CH0_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH0_LUT);
        pub const REG_TIM1_CH0_LUT_R_TIMER1_CH0_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM1_CH0_LUT);

        pub const REG_TIM1_CH1_LUT: crate::Register = crate::Register::new(24, 0x3ffff);
        pub const REG_TIM1_CH1_LUT_R_TIMER1_CH1_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH1_LUT);
        pub const REG_TIM1_CH1_LUT_R_TIMER1_CH1_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM1_CH1_LUT);

        pub const REG_TIM1_CH2_LUT: crate::Register = crate::Register::new(25, 0x3ffff);
        pub const REG_TIM1_CH2_LUT_R_TIMER1_CH2_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH2_LUT);
        pub const REG_TIM1_CH2_LUT_R_TIMER1_CH2_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM1_CH2_LUT);

        pub const REG_TIM1_CH3_LUT: crate::Register = crate::Register::new(26, 0x3ffff);
        pub const REG_TIM1_CH3_LUT_R_TIMER1_CH3_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM1_CH3_LUT);
        pub const REG_TIM1_CH3_LUT_R_TIMER1_CH3_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM1_CH3_LUT);

        pub const REG_TIM2_CMD: crate::Register = crate::Register::new(32, 0x1f);
        pub const REG_TIM2_CMD_R_TIMER2_START: crate::Field = crate::Field::new(1, 0, REG_TIM2_CMD);
        pub const REG_TIM2_CMD_R_TIMER2_STOP: crate::Field = crate::Field::new(1, 1, REG_TIM2_CMD);
        pub const REG_TIM2_CMD_R_TIMER2_UPDATE: crate::Field = crate::Field::new(1, 2, REG_TIM2_CMD);
        pub const REG_TIM2_CMD_R_TIMER2_RST: crate::Field = crate::Field::new(1, 3, REG_TIM2_CMD);
        pub const REG_TIM2_CMD_R_TIMER2_ARM: crate::Field = crate::Field::new(1, 4, REG_TIM2_CMD);

        pub const REG_TIM2_CFG: crate::Register = crate::Register::new(33, 0xff1fff);
        pub const REG_TIM2_CFG_R_TIMER2_IN_SEL: crate::Field = crate::Field::new(8, 0, REG_TIM2_CFG);
        pub const REG_TIM2_CFG_R_TIMER2_IN_MODE: crate::Field = crate::Field::new(3, 8, REG_TIM2_CFG);
        pub const REG_TIM2_CFG_R_TIMER2_IN_CLK: crate::Field = crate::Field::new(1, 11, REG_TIM2_CFG);
        pub const REG_TIM2_CFG_R_TIMER2_SAW: crate::Field = crate::Field::new(1, 12, REG_TIM2_CFG);
        pub const REG_TIM2_CFG_R_TIMER2_PRESC: crate::Field = crate::Field::new(8, 16, REG_TIM2_CFG);

        pub const REG_TIM2_CH0_TH: crate::Register = crate::Register::new(35, 0x7ffff);
        pub const REG_TIM2_CH0_TH_R_TIMER2_CH0_TH: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH0_TH);
        pub const REG_TIM2_CH0_TH_R_TIMER2_CH0_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM2_CH0_TH);

        pub const REG_TIM2_CH1_TH: crate::Register = crate::Register::new(36, 0x7ffff);
        pub const REG_TIM2_CH1_TH_R_TIMER2_CH1_TH: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH1_TH);
        pub const REG_TIM2_CH1_TH_R_TIMER2_CH1_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM2_CH1_TH);

        pub const REG_TIM2_CH2_TH: crate::Register = crate::Register::new(37, 0x7ffff);
        pub const REG_TIM2_CH2_TH_R_TIMER2_CH2_TH: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH2_TH);
        pub const REG_TIM2_CH2_TH_R_TIMER2_CH2_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM2_CH2_TH);

        pub const REG_TIM2_CH3_TH: crate::Register = crate::Register::new(38, 0x7ffff);
        pub const REG_TIM2_CH3_TH_R_TIMER2_CH3_TH: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH3_TH);
        pub const REG_TIM2_CH3_TH_R_TIMER2_CH3_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM2_CH3_TH);

        pub const REG_TIM2_CH0_LUT: crate::Register = crate::Register::new(39, 0x3ffff);
        pub const REG_TIM2_CH0_LUT_R_TIMER2_CH0_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH0_LUT);
        pub const REG_TIM2_CH0_LUT_R_TIMER2_CH0_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM2_CH0_LUT);

        pub const REG_TIM2_CH1_LUT: crate::Register = crate::Register::new(40, 0x3ffff);
        pub const REG_TIM2_CH1_LUT_R_TIMER2_CH1_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH1_LUT);
        pub const REG_TIM2_CH1_LUT_R_TIMER2_CH1_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM2_CH1_LUT);

        pub const REG_TIM2_CH2_LUT: crate::Register = crate::Register::new(41, 0x3ffff);
        pub const REG_TIM2_CH2_LUT_R_TIMER2_CH2_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH2_LUT);
        pub const REG_TIM2_CH2_LUT_R_TIMER2_CH2_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM2_CH2_LUT);

        pub const REG_TIM2_CH3_LUT: crate::Register = crate::Register::new(42, 0x3ffff);
        pub const REG_TIM2_CH3_LUT_R_TIMER2_CH3_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM2_CH3_LUT);
        pub const REG_TIM2_CH3_LUT_R_TIMER2_CH3_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM2_CH3_LUT);

        pub const REG_TIM3_CMD: crate::Register = crate::Register::new(48, 0x1f);
        pub const REG_TIM3_CMD_R_TIMER3_START: crate::Field = crate::Field::new(1, 0, REG_TIM3_CMD);
        pub const REG_TIM3_CMD_R_TIMER3_STOP: crate::Field = crate::Field::new(1, 1, REG_TIM3_CMD);
        pub const REG_TIM3_CMD_R_TIMER3_UPDATE: crate::Field = crate::Field::new(1, 2, REG_TIM3_CMD);
        pub const REG_TIM3_CMD_R_TIMER3_RST: crate::Field = crate::Field::new(1, 3, REG_TIM3_CMD);
        pub const REG_TIM3_CMD_R_TIMER3_ARM: crate::Field = crate::Field::new(1, 4, REG_TIM3_CMD);

        pub const REG_TIM3_CFG: crate::Register = crate::Register::new(49, 0xff1fff);
        pub const REG_TIM3_CFG_R_TIMER3_IN_SEL: crate::Field = crate::Field::new(8, 0, REG_TIM3_CFG);
        pub const REG_TIM3_CFG_R_TIMER3_IN_MODE: crate::Field = crate::Field::new(3, 8, REG_TIM3_CFG);
        pub const REG_TIM3_CFG_R_TIMER3_IN_CLK: crate::Field = crate::Field::new(1, 11, REG_TIM3_CFG);
        pub const REG_TIM3_CFG_R_TIMER3_SAW: crate::Field = crate::Field::new(1, 12, REG_TIM3_CFG);
        pub const REG_TIM3_CFG_R_TIMER3_PRESC: crate::Field = crate::Field::new(8, 16, REG_TIM3_CFG);

        pub const REG_TIM3_CH0_TH: crate::Register = crate::Register::new(51, 0x7ffff);
        pub const REG_TIM3_CH0_TH_R_TIMER3_CH0_TH: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH0_TH);
        pub const REG_TIM3_CH0_TH_R_TIMER3_CH0_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM3_CH0_TH);

        pub const REG_TIM3_CH1_TH: crate::Register = crate::Register::new(52, 0x7ffff);
        pub const REG_TIM3_CH1_TH_R_TIMER3_CH1_TH: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH1_TH);
        pub const REG_TIM3_CH1_TH_R_TIMER3_CH1_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM3_CH1_TH);

        pub const REG_TIM3_CH2_TH: crate::Register = crate::Register::new(53, 0x7ffff);
        pub const REG_TIM3_CH2_TH_R_TIMER3_CH2_TH: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH2_TH);
        pub const REG_TIM3_CH2_TH_R_TIMER3_CH2_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM3_CH2_TH);

        pub const REG_TIM3_CH3_TH: crate::Register = crate::Register::new(54, 0x7ffff);
        pub const REG_TIM3_CH3_TH_R_TIMER3_CH3_TH: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH3_TH);
        pub const REG_TIM3_CH3_TH_R_TIMER3_CH3_MODE: crate::Field = crate::Field::new(3, 16, REG_TIM3_CH3_TH);

        pub const REG_TIM3_CH0_LUT: crate::Register = crate::Register::new(55, 0x3ffff);
        pub const REG_TIM3_CH0_LUT_R_TIMER3_CH0_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH0_LUT);
        pub const REG_TIM3_CH0_LUT_R_TIMER3_CH0_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM3_CH0_LUT);

        pub const REG_TIM3_CH1_LUT: crate::Register = crate::Register::new(56, 0x3ffff);
        pub const REG_TIM3_CH1_LUT_R_TIMER3_CH1_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH1_LUT);
        pub const REG_TIM3_CH1_LUT_R_TIMER3_CH1_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM3_CH1_LUT);

        pub const REG_TIM3_CH2_LUT: crate::Register = crate::Register::new(57, 0x3ffff);
        pub const REG_TIM3_CH2_LUT_R_TIMER3_CH2_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH2_LUT);
        pub const REG_TIM3_CH2_LUT_R_TIMER3_CH2_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM3_CH2_LUT);

        pub const REG_TIM3_CH3_LUT: crate::Register = crate::Register::new(58, 0x3ffff);
        pub const REG_TIM3_CH3_LUT_R_TIMER3_CH3_LUT: crate::Field = crate::Field::new(16, 0, REG_TIM3_CH3_LUT);
        pub const REG_TIM3_CH3_LUT_R_TIMER3_CH3_FLT: crate::Field = crate::Field::new(2, 16, REG_TIM3_CH3_LUT);

        pub const REG_EVENT_CFG: crate::Register = crate::Register::new(64, 0xfffff);
        pub const REG_EVENT_CFG_R_EVENT_SEL_0: crate::Field = crate::Field::new(4, 0, REG_EVENT_CFG);
        pub const REG_EVENT_CFG_R_EVENT_SEL_1: crate::Field = crate::Field::new(4, 4, REG_EVENT_CFG);
        pub const REG_EVENT_CFG_R_EVENT_SEL_2: crate::Field = crate::Field::new(4, 8, REG_EVENT_CFG);
        pub const REG_EVENT_CFG_R_EVENT_SEL_3: crate::Field = crate::Field::new(4, 12, REG_EVENT_CFG);
        pub const REG_EVENT_CFG_R_EVENT_EN: crate::Field = crate::Field::new(4, 16, REG_EVENT_CFG);

        pub const REG_CH_EN: crate::Register = crate::Register::new(65, 0xf);
        pub const REG_CH_EN_R_CLK_EN: crate::Field = crate::Field::new(4, 0, REG_CH_EN);

        pub const REG_PREFD0: crate::Register = crate::Register::new(80, 0x3ff);
        pub const REG_PREFD0_LSCLK_PREFD_0: crate::Field = crate::Field::new(10, 0, REG_PREFD0);

        pub const REG_PREFD1: crate::Register = crate::Register::new(81, 0x3ff);
        pub const REG_PREFD1_LSCLK_PREFD_1: crate::Field = crate::Field::new(10, 0, REG_PREFD1);

        pub const REG_PREFD2: crate::Register = crate::Register::new(82, 0x3ff);
        pub const REG_PREFD2_LSCLK_PREFD_2: crate::Field = crate::Field::new(10, 0, REG_PREFD2);

        pub const REG_PREFD3: crate::Register = crate::Register::new(83, 0x3ff);
        pub const REG_PREFD3_LSCLK_PREFD_3: crate::Field = crate::Field::new(10, 0, REG_PREFD3);

        pub const HW_PWM_BASE: usize = 0x50120000;
    }

    pub mod sddc {
        pub const SDDC_NUMREGS: usize = 112;

        pub const SFR_IO: crate::Register = crate::Register::new(0, 0x3);
        pub const SFR_IO_SFR_IO: crate::Field = crate::Field::new(2, 0, SFR_IO);

        pub const SFR_AR: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_AR_SFR_AR: crate::Field = crate::Field::new(32, 0, SFR_AR);

        pub const CR_OCR: crate::Register = crate::Register::new(4, 0xffffff);
        pub const CR_OCR_CR_OCR: crate::Field = crate::Field::new(24, 0, CR_OCR);

        pub const CR_RDFFTHRES: crate::Register = crate::Register::new(5, 0xff);
        pub const CR_RDFFTHRES_CR_RDFFTHRES: crate::Field = crate::Field::new(8, 0, CR_RDFFTHRES);

        pub const CR_REV: crate::Register = crate::Register::new(6, 0xffff);
        pub const CR_REV_CFG_REG_SD_SPEC_REVISION: crate::Field = crate::Field::new(8, 0, CR_REV);
        pub const CR_REV_CFG_REG_CCCR_SDIO_REVISION: crate::Field = crate::Field::new(8, 8, CR_REV);

        pub const CR_BACSA: crate::Register = crate::Register::new(7, 0x3ffff);
        pub const CR_BACSA_CFG_BASE_ADDR_CSA: crate::Field = crate::Field::new(18, 0, CR_BACSA);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0: crate::Register = crate::Register::new(8, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1: crate::Register = crate::Register::new(9, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2: crate::Register = crate::Register::new(10, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3: crate::Register = crate::Register::new(11, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4: crate::Register = crate::Register::new(12, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5: crate::Register = crate::Register::new(13, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6: crate::Register = crate::Register::new(14, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6);

        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7: crate::Register = crate::Register::new(15, 0x3ffff);
        pub const CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7: crate::Field = crate::Field::new(18, 0, CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0: crate::Register = crate::Register::new(16, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1: crate::Register = crate::Register::new(17, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2: crate::Register = crate::Register::new(18, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3: crate::Register = crate::Register::new(19, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4: crate::Register = crate::Register::new(20, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5: crate::Register = crate::Register::new(21, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6: crate::Register = crate::Register::new(22, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6);

        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7: crate::Register = crate::Register::new(23, 0x1ffff);
        pub const CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7: crate::Field = crate::Field::new(17, 0, CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0: crate::Register = crate::Register::new(24, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1: crate::Register = crate::Register::new(25, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2: crate::Register = crate::Register::new(26, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3: crate::Register = crate::Register::new(27, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4: crate::Register = crate::Register::new(28, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5: crate::Register = crate::Register::new(29, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6: crate::Register = crate::Register::new(30, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6);

        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7: crate::Register = crate::Register::new(31, 0xff);
        pub const CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7: crate::Field = crate::Field::new(8, 0, CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7);

        pub const CR_WRITE_PROTECT: crate::Register = crate::Register::new(32, 0x1);
        pub const CR_WRITE_PROTECT_CR_WRITE_PROTECT: crate::Field = crate::Field::new(1, 0, CR_WRITE_PROTECT);

        pub const CR_REG_DSR: crate::Register = crate::Register::new(33, 0xffff);
        pub const CR_REG_DSR_CR_REG_DSR: crate::Field = crate::Field::new(16, 0, CR_REG_DSR);

        pub const CR_REG_CID_CFG_REG_CID0: crate::Register = crate::Register::new(34, 0xffffffff);
        pub const CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0: crate::Field = crate::Field::new(32, 0, CR_REG_CID_CFG_REG_CID0);

        pub const CR_REG_CID_CFG_REG_CID1: crate::Register = crate::Register::new(35, 0xffffffff);
        pub const CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1: crate::Field = crate::Field::new(32, 0, CR_REG_CID_CFG_REG_CID1);

        pub const CR_REG_CID_CFG_REG_CID2: crate::Register = crate::Register::new(36, 0xffffffff);
        pub const CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2: crate::Field = crate::Field::new(32, 0, CR_REG_CID_CFG_REG_CID2);

        pub const CR_REG_CID_CFG_REG_CID3: crate::Register = crate::Register::new(37, 0xffffffff);
        pub const CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3: crate::Field = crate::Field::new(32, 0, CR_REG_CID_CFG_REG_CID3);

        pub const CR_REG_CSD_CFG_REG_CSD0: crate::Register = crate::Register::new(38, 0xffffffff);
        pub const CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0: crate::Field = crate::Field::new(32, 0, CR_REG_CSD_CFG_REG_CSD0);

        pub const CR_REG_CSD_CFG_REG_CSD1: crate::Register = crate::Register::new(39, 0xffffffff);
        pub const CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1: crate::Field = crate::Field::new(32, 0, CR_REG_CSD_CFG_REG_CSD1);

        pub const CR_REG_CSD_CFG_REG_CSD2: crate::Register = crate::Register::new(40, 0xffffffff);
        pub const CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2: crate::Field = crate::Field::new(32, 0, CR_REG_CSD_CFG_REG_CSD2);

        pub const CR_REG_CSD_CFG_REG_CSD3: crate::Register = crate::Register::new(41, 0xffffffff);
        pub const CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3: crate::Field = crate::Field::new(32, 0, CR_REG_CSD_CFG_REG_CSD3);

        pub const CR_REG_SCR_CFG_REG_SCR0: crate::Register = crate::Register::new(42, 0xffffffff);
        pub const CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0: crate::Field = crate::Field::new(32, 0, CR_REG_SCR_CFG_REG_SCR0);

        pub const CR_REG_SCR_CFG_REG_SCR1: crate::Register = crate::Register::new(43, 0xffffffff);
        pub const CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1: crate::Field = crate::Field::new(32, 0, CR_REG_SCR_CFG_REG_SCR1);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS0: crate::Register = crate::Register::new(44, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS0);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS1: crate::Register = crate::Register::new(45, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS1);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS2: crate::Register = crate::Register::new(46, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS2);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS3: crate::Register = crate::Register::new(47, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS3);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS4: crate::Register = crate::Register::new(48, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS4);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS5: crate::Register = crate::Register::new(49, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS5);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS6: crate::Register = crate::Register::new(50, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS6);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS7: crate::Register = crate::Register::new(51, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS7);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS8: crate::Register = crate::Register::new(52, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS8);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS9: crate::Register = crate::Register::new(53, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS9);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS10: crate::Register = crate::Register::new(54, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS10);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS11: crate::Register = crate::Register::new(55, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS11);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS12: crate::Register = crate::Register::new(56, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS12);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS13: crate::Register = crate::Register::new(57, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS13);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS14: crate::Register = crate::Register::new(58, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS14);

        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS15: crate::Register = crate::Register::new(59, 0xffffffff);
        pub const CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15: crate::Field = crate::Field::new(32, 0, CR_REG_SD_STATUS_CFG_REG_SD_STATUS15);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0: crate::Register = crate::Register::new(64, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1: crate::Register = crate::Register::new(65, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2: crate::Register = crate::Register::new(66, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3: crate::Register = crate::Register::new(67, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4: crate::Register = crate::Register::new(68, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5: crate::Register = crate::Register::new(69, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6: crate::Register = crate::Register::new(70, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7: crate::Register = crate::Register::new(71, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8: crate::Register = crate::Register::new(72, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9: crate::Register = crate::Register::new(73, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10: crate::Register = crate::Register::new(74, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11: crate::Register = crate::Register::new(75, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12: crate::Register = crate::Register::new(76, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13: crate::Register = crate::Register::new(77, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14: crate::Register = crate::Register::new(78, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15: crate::Register = crate::Register::new(79, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16: crate::Register = crate::Register::new(80, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16);

        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17: crate::Register = crate::Register::new(81, 0x3ffff);
        pub const CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17: crate::Field = crate::Field::new(18, 0, CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0: crate::Register = crate::Register::new(82, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1: crate::Register = crate::Register::new(83, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2: crate::Register = crate::Register::new(84, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3: crate::Register = crate::Register::new(85, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4: crate::Register = crate::Register::new(86, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5: crate::Register = crate::Register::new(87, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5);

        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6: crate::Register = crate::Register::new(88, 0xff);
        pub const CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0: crate::Register = crate::Register::new(90, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1: crate::Register = crate::Register::new(91, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2: crate::Register = crate::Register::new(92, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3: crate::Register = crate::Register::new(93, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4: crate::Register = crate::Register::new(94, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5: crate::Register = crate::Register::new(95, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5);

        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6: crate::Register = crate::Register::new(96, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0: crate::Register = crate::Register::new(98, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1: crate::Register = crate::Register::new(99, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2: crate::Register = crate::Register::new(100, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3: crate::Register = crate::Register::new(101, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4: crate::Register = crate::Register::new(102, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5: crate::Register = crate::Register::new(103, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5);

        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6: crate::Register = crate::Register::new(104, 0xffff);
        pub const CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0: crate::Register = crate::Register::new(106, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1: crate::Register = crate::Register::new(107, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2: crate::Register = crate::Register::new(108, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3: crate::Register = crate::Register::new(109, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4: crate::Register = crate::Register::new(110, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5: crate::Register = crate::Register::new(111, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5);

        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6: crate::Register = crate::Register::new(112, 0xff);
        pub const CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6: crate::Field = crate::Field::new(8, 0, CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0: crate::Register = crate::Register::new(114, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1: crate::Register = crate::Register::new(115, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2: crate::Register = crate::Register::new(116, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3: crate::Register = crate::Register::new(117, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4: crate::Register = crate::Register::new(118, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5: crate::Register = crate::Register::new(119, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5);

        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6: crate::Register = crate::Register::new(120, 0xffff);
        pub const CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6: crate::Field = crate::Field::new(16, 0, CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6);

        pub const CR_REG_UHS_1_SUPPORT: crate::Register = crate::Register::new(124, 0xffffffff);
        pub const CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT: crate::Field = crate::Field::new(16, 0, CR_REG_UHS_1_SUPPORT);
        pub const CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION: crate::Field = crate::Field::new(8, 16, CR_REG_UHS_1_SUPPORT);
        pub const CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT: crate::Field = crate::Field::new(8, 24, CR_REG_UHS_1_SUPPORT);

        pub const HW_SDDC_BASE: usize = 0x50121000;
    }

    pub mod coresub_sramtrm {
        pub const CORESUB_SRAMTRM_NUMREGS: usize = 8;

        pub const SFR_CACHE: crate::Register = crate::Register::new(0, 0x7);
        pub const SFR_CACHE_SFR_CACHE: crate::Field = crate::Field::new(3, 0, SFR_CACHE);

        pub const SFR_ITCM: crate::Register = crate::Register::new(1, 0x1f);
        pub const SFR_ITCM_SFR_ITCM: crate::Field = crate::Field::new(5, 0, SFR_ITCM);

        pub const SFR_DTCM: crate::Register = crate::Register::new(2, 0x1f);
        pub const SFR_DTCM_SFR_DTCM: crate::Field = crate::Field::new(5, 0, SFR_DTCM);

        pub const SFR_SRAM0: crate::Register = crate::Register::new(3, 0x1f);
        pub const SFR_SRAM0_SFR_SRAM0: crate::Field = crate::Field::new(5, 0, SFR_SRAM0);

        pub const SFR_SRAM1: crate::Register = crate::Register::new(4, 0x1f);
        pub const SFR_SRAM1_SFR_SRAM1: crate::Field = crate::Field::new(5, 0, SFR_SRAM1);

        pub const SFR_VEXRAM: crate::Register = crate::Register::new(5, 0x7);
        pub const SFR_VEXRAM_SFR_VEXRAM: crate::Field = crate::Field::new(3, 0, SFR_VEXRAM);

        pub const SFR_SRAMERR: crate::Register = crate::Register::new(8, 0xf);
        pub const SFR_SRAMERR_SRAMBANKERR: crate::Field = crate::Field::new(4, 0, SFR_SRAMERR);

        pub const SFR_RAMSEC: crate::Register = crate::Register::new(12, 0xf);
        pub const SFR_RAMSEC_RAMSEC: crate::Field = crate::Field::new(4, 0, SFR_RAMSEC);

        pub const HW_CORESUB_SRAMTRM_BASE: usize = 0x40014000;
    }

    pub mod mdma {
        pub const MDMA_NUMREGS: usize = 24;

        pub const SFR_EVSEL_CR_EVSEL0: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_EVSEL_CR_EVSEL0_CR_EVSEL0: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL0);

        pub const SFR_EVSEL_CR_EVSEL1: crate::Register = crate::Register::new(1, 0xff);
        pub const SFR_EVSEL_CR_EVSEL1_CR_EVSEL1: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL1);

        pub const SFR_EVSEL_CR_EVSEL2: crate::Register = crate::Register::new(2, 0xff);
        pub const SFR_EVSEL_CR_EVSEL2_CR_EVSEL2: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL2);

        pub const SFR_EVSEL_CR_EVSEL3: crate::Register = crate::Register::new(3, 0xff);
        pub const SFR_EVSEL_CR_EVSEL3_CR_EVSEL3: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL3);

        pub const SFR_EVSEL_CR_EVSEL4: crate::Register = crate::Register::new(4, 0xff);
        pub const SFR_EVSEL_CR_EVSEL4_CR_EVSEL4: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL4);

        pub const SFR_EVSEL_CR_EVSEL5: crate::Register = crate::Register::new(5, 0xff);
        pub const SFR_EVSEL_CR_EVSEL5_CR_EVSEL5: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL5);

        pub const SFR_EVSEL_CR_EVSEL6: crate::Register = crate::Register::new(6, 0xff);
        pub const SFR_EVSEL_CR_EVSEL6_CR_EVSEL6: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL6);

        pub const SFR_EVSEL_CR_EVSEL7: crate::Register = crate::Register::new(7, 0xff);
        pub const SFR_EVSEL_CR_EVSEL7_CR_EVSEL7: crate::Field = crate::Field::new(8, 0, SFR_EVSEL_CR_EVSEL7);

        pub const SFR_CR_CR_MDMAREQ0: crate::Register = crate::Register::new(8, 0x1f);
        pub const SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ0);

        pub const SFR_CR_CR_MDMAREQ1: crate::Register = crate::Register::new(9, 0x1f);
        pub const SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ1);

        pub const SFR_CR_CR_MDMAREQ2: crate::Register = crate::Register::new(10, 0x1f);
        pub const SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ2);

        pub const SFR_CR_CR_MDMAREQ3: crate::Register = crate::Register::new(11, 0x1f);
        pub const SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ3);

        pub const SFR_CR_CR_MDMAREQ4: crate::Register = crate::Register::new(12, 0x1f);
        pub const SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ4);

        pub const SFR_CR_CR_MDMAREQ5: crate::Register = crate::Register::new(13, 0x1f);
        pub const SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ5);

        pub const SFR_CR_CR_MDMAREQ6: crate::Register = crate::Register::new(14, 0x1f);
        pub const SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ6);

        pub const SFR_CR_CR_MDMAREQ7: crate::Register = crate::Register::new(15, 0x1f);
        pub const SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7: crate::Field = crate::Field::new(5, 0, SFR_CR_CR_MDMAREQ7);

        pub const SFR_SR_SR_MDMAREQ0: crate::Register = crate::Register::new(16, 0x1f);
        pub const SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ0);

        pub const SFR_SR_SR_MDMAREQ1: crate::Register = crate::Register::new(17, 0x1f);
        pub const SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ1);

        pub const SFR_SR_SR_MDMAREQ2: crate::Register = crate::Register::new(18, 0x1f);
        pub const SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ2);

        pub const SFR_SR_SR_MDMAREQ3: crate::Register = crate::Register::new(19, 0x1f);
        pub const SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ3);

        pub const SFR_SR_SR_MDMAREQ4: crate::Register = crate::Register::new(20, 0x1f);
        pub const SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ4);

        pub const SFR_SR_SR_MDMAREQ5: crate::Register = crate::Register::new(21, 0x1f);
        pub const SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ5);

        pub const SFR_SR_SR_MDMAREQ6: crate::Register = crate::Register::new(22, 0x1f);
        pub const SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ6);

        pub const SFR_SR_SR_MDMAREQ7: crate::Register = crate::Register::new(23, 0x1f);
        pub const SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7: crate::Field = crate::Field::new(5, 0, SFR_SR_SR_MDMAREQ7);

        pub const HW_MDMA_BASE: usize = 0x40012000;
    }

    pub mod qfc {
        pub const QFC_NUMREGS: usize = 14;

        pub const SFR_IO: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_IO_SFR_IO: crate::Field = crate::Field::new(8, 0, SFR_IO);

        pub const SFR_AR: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_AR_SFR_AR: crate::Field = crate::Field::new(32, 0, SFR_AR);

        pub const SFR_IODRV: crate::Register = crate::Register::new(2, 0xfff);
        pub const SFR_IODRV_PADDRVSEL: crate::Field = crate::Field::new(12, 0, SFR_IODRV);

        pub const CR_XIP_ADDRMODE: crate::Register = crate::Register::new(4, 0x3);
        pub const CR_XIP_ADDRMODE_CR_XIP_ADDRMODE: crate::Field = crate::Field::new(2, 0, CR_XIP_ADDRMODE);

        pub const CR_XIP_OPCODE: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const CR_XIP_OPCODE_CR_XIP_OPCODE: crate::Field = crate::Field::new(32, 0, CR_XIP_OPCODE);

        pub const CR_XIP_WIDTH: crate::Register = crate::Register::new(6, 0x3f);
        pub const CR_XIP_WIDTH_CR_XIP_WIDTH: crate::Field = crate::Field::new(6, 0, CR_XIP_WIDTH);

        pub const CR_XIP_SSEL: crate::Register = crate::Register::new(7, 0x7f);
        pub const CR_XIP_SSEL_CR_XIP_SSEL: crate::Field = crate::Field::new(7, 0, CR_XIP_SSEL);

        pub const CR_XIP_DUMCYC: crate::Register = crate::Register::new(8, 0xffff);
        pub const CR_XIP_DUMCYC_CR_XIP_DUMCYC: crate::Field = crate::Field::new(16, 0, CR_XIP_DUMCYC);

        pub const CR_XIP_CFG: crate::Register = crate::Register::new(9, 0x7fff);
        pub const CR_XIP_CFG_CR_XIP_CFG: crate::Field = crate::Field::new(15, 0, CR_XIP_CFG);

        pub const CR_AESKEY_AESKEYIN0: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const CR_AESKEY_AESKEYIN0_AESKEYIN0: crate::Field = crate::Field::new(32, 0, CR_AESKEY_AESKEYIN0);

        pub const CR_AESKEY_AESKEYIN1: crate::Register = crate::Register::new(17, 0xffffffff);
        pub const CR_AESKEY_AESKEYIN1_AESKEYIN1: crate::Field = crate::Field::new(32, 0, CR_AESKEY_AESKEYIN1);

        pub const CR_AESKEY_AESKEYIN2: crate::Register = crate::Register::new(18, 0xffffffff);
        pub const CR_AESKEY_AESKEYIN2_AESKEYIN2: crate::Field = crate::Field::new(32, 0, CR_AESKEY_AESKEYIN2);

        pub const CR_AESKEY_AESKEYIN3: crate::Register = crate::Register::new(19, 0xffffffff);
        pub const CR_AESKEY_AESKEYIN3_AESKEYIN3: crate::Field = crate::Field::new(32, 0, CR_AESKEY_AESKEYIN3);

        pub const CR_AESENA: crate::Register = crate::Register::new(20, 0x1);
        pub const CR_AESENA_CR_AESENA: crate::Field = crate::Field::new(1, 0, CR_AESENA);

        pub const HW_QFC_BASE: usize = 0x40010000;
    }

    pub mod mbox_apb {
        pub const MBOX_APB_NUMREGS: usize = 5;

        pub const SFR_WDATA: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const SFR_WDATA_SFR_WDATA: crate::Field = crate::Field::new(32, 0, SFR_WDATA);

        pub const SFR_RDATA: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_RDATA_SFR_RDATA: crate::Field = crate::Field::new(32, 0, SFR_RDATA);

        pub const SFR_STATUS: crate::Register = crate::Register::new(2, 0x3f);
        pub const SFR_STATUS_RX_AVAIL: crate::Field = crate::Field::new(1, 0, SFR_STATUS);
        pub const SFR_STATUS_TX_FREE: crate::Field = crate::Field::new(1, 1, SFR_STATUS);
        pub const SFR_STATUS_ABORT_IN_PROGRESS: crate::Field = crate::Field::new(1, 2, SFR_STATUS);
        pub const SFR_STATUS_ABORT_ACK: crate::Field = crate::Field::new(1, 3, SFR_STATUS);
        pub const SFR_STATUS_TX_ERR: crate::Field = crate::Field::new(1, 4, SFR_STATUS);
        pub const SFR_STATUS_RX_ERR: crate::Field = crate::Field::new(1, 5, SFR_STATUS);

        pub const SFR_ABORT: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_ABORT_SFR_ABORT: crate::Field = crate::Field::new(32, 0, SFR_ABORT);

        pub const SFR_DONE: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_DONE_SFR_DONE: crate::Field = crate::Field::new(32, 0, SFR_DONE);

        pub const HW_MBOX_APB_BASE: usize = 0x40013000;
    }

    pub mod rrc {
        pub const RRC_NUMREGS: usize = 11;

        pub const SFR_RRCCR: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const SFR_RRCCR_SFR_RRCCR: crate::Field = crate::Field::new(32, 0, SFR_RRCCR);

        pub const SFR_RRCFD: crate::Register = crate::Register::new(1, 0x1f);
        pub const SFR_RRCFD_SFR_RRCFD: crate::Field = crate::Field::new(5, 0, SFR_RRCFD);

        pub const SFR_RRCSR: crate::Register = crate::Register::new(2, 0x3ff);
        pub const SFR_RRCSR_SFR_RRCSR: crate::Field = crate::Field::new(10, 0, SFR_RRCSR);

        pub const SFR_RRCFR: crate::Register = crate::Register::new(3, 0x1f);
        pub const SFR_RRCFR_SFR_RRCFR: crate::Field = crate::Field::new(5, 0, SFR_RRCFR);

        pub const SFR_RRCSR_SET0: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_RRCSR_SET0_TRC_SET_FAILURE: crate::Field = crate::Field::new(32, 0, SFR_RRCSR_SET0);

        pub const SFR_RRCSR_SET1: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_RRCSR_SET1_TRC_SET_FAILURE: crate::Field = crate::Field::new(32, 0, SFR_RRCSR_SET1);

        pub const SFR_RRCSR_RST0: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_RRCSR_RST0_TRC_RESET_FAILURE: crate::Field = crate::Field::new(32, 0, SFR_RRCSR_RST0);

        pub const SFR_RRCSR_RST1: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_RRCSR_RST1_TRC_RESET_FAILURE: crate::Field = crate::Field::new(32, 0, SFR_RRCSR_RST1);

        pub const SFR_RRCSR_RD0: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_RRCSR_RD0_TRC_FOURTH_READ_FAILURE: crate::Field = crate::Field::new(32, 0, SFR_RRCSR_RD0);

        pub const SFR_RRCSR_RD1: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_RRCSR_RD1_TRC_FOURTH_READ_FAILURE: crate::Field = crate::Field::new(32, 0, SFR_RRCSR_RD1);

        pub const SFR_RRCAR: crate::Register = crate::Register::new(60, 0xffffffff);
        pub const SFR_RRCAR_SFR_RRCAR: crate::Field = crate::Field::new(32, 0, SFR_RRCAR);

        pub const HW_RRC_BASE: usize = 0x40000000;
    }

    pub mod gluechain {
        pub const GLUECHAIN_NUMREGS: usize = 4;

        pub const SFR_GCMASK_CR_GCMASK0: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const SFR_GCMASK_CR_GCMASK0_CR_GCMASK0: crate::Field = crate::Field::new(32, 0, SFR_GCMASK_CR_GCMASK0);

        pub const SFR_GCSR_GLUEREG0: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_GCSR_GLUEREG0_GLUEREG0: crate::Field = crate::Field::new(32, 0, SFR_GCSR_GLUEREG0);

        pub const SFR_GCRST_GLUERST0: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const SFR_GCRST_GLUERST0_GLUERST0: crate::Field = crate::Field::new(32, 0, SFR_GCRST_GLUERST0);

        pub const SFR_GCTEST_GLUETEST0: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const SFR_GCTEST_GLUETEST0_GLUETEST0: crate::Field = crate::Field::new(32, 0, SFR_GCTEST_GLUETEST0);

        pub const HW_GLUECHAIN_BASE: usize = 0x40054000;
    }

    pub mod mesh {
        pub const MESH_NUMREGS: usize = 12;

        pub const SFR_MLDRV_CR_MLDRV0: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const SFR_MLDRV_CR_MLDRV0_CR_MLDRV0: crate::Field = crate::Field::new(32, 0, SFR_MLDRV_CR_MLDRV0);

        pub const SFR_MLDRV_CR_MLDRV1: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_MLDRV_CR_MLDRV1_CR_MLDRV1: crate::Field = crate::Field::new(32, 0, SFR_MLDRV_CR_MLDRV1);

        pub const SFR_MLIE_CR_MLIE0: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const SFR_MLIE_CR_MLIE0_CR_MLIE0: crate::Field = crate::Field::new(32, 0, SFR_MLIE_CR_MLIE0);

        pub const SFR_MLIE_CR_MLIE1: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_MLIE_CR_MLIE1_CR_MLIE1: crate::Field = crate::Field::new(32, 0, SFR_MLIE_CR_MLIE1);

        pub const SFR_MLSR_SR_MLSR0: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR0_SR_MLSR0: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR0);

        pub const SFR_MLSR_SR_MLSR1: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR1_SR_MLSR1: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR1);

        pub const SFR_MLSR_SR_MLSR2: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR2_SR_MLSR2: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR2);

        pub const SFR_MLSR_SR_MLSR3: crate::Register = crate::Register::new(11, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR3_SR_MLSR3: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR3);

        pub const SFR_MLSR_SR_MLSR4: crate::Register = crate::Register::new(12, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR4_SR_MLSR4: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR4);

        pub const SFR_MLSR_SR_MLSR5: crate::Register = crate::Register::new(13, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR5_SR_MLSR5: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR5);

        pub const SFR_MLSR_SR_MLSR6: crate::Register = crate::Register::new(14, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR6_SR_MLSR6: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR6);

        pub const SFR_MLSR_SR_MLSR7: crate::Register = crate::Register::new(15, 0xffffffff);
        pub const SFR_MLSR_SR_MLSR7_SR_MLSR7: crate::Field = crate::Field::new(32, 0, SFR_MLSR_SR_MLSR7);

        pub const HW_MESH_BASE: usize = 0x40052000;
    }

    pub mod sensorc {
        pub const SENSORC_NUMREGS: usize = 19;

        pub const SFR_VDMASK0: crate::Register = crate::Register::new(0, 0xff);
        pub const SFR_VDMASK0_CR_VDMASK0: crate::Field = crate::Field::new(8, 0, SFR_VDMASK0);

        pub const SFR_VDMASK1: crate::Register = crate::Register::new(1, 0xff);
        pub const SFR_VDMASK1_CR_VDMASK1: crate::Field = crate::Field::new(8, 0, SFR_VDMASK1);

        pub const SFR_VDSR: crate::Register = crate::Register::new(2, 0xff);
        pub const SFR_VDSR_VDFLAG: crate::Field = crate::Field::new(8, 0, SFR_VDSR);

        pub const SFR_VDFR: crate::Register = crate::Register::new(3, 0xff);
        pub const SFR_VDFR_VDFLAG: crate::Field = crate::Field::new(8, 0, SFR_VDFR);

        pub const SFR_LDMASK: crate::Register = crate::Register::new(4, 0xf);
        pub const SFR_LDMASK_CR_LDMASK: crate::Field = crate::Field::new(4, 0, SFR_LDMASK);

        pub const SFR_LDSR: crate::Register = crate::Register::new(5, 0xf);
        pub const SFR_LDSR_SR_LDSR: crate::Field = crate::Field::new(4, 0, SFR_LDSR);

        pub const SFR_LDCFG: crate::Register = crate::Register::new(6, 0xf);
        pub const SFR_LDCFG_SFR_LDCFG: crate::Field = crate::Field::new(4, 0, SFR_LDCFG);

        pub const SFR_VDCFG_CR_VDCFG0: crate::Register = crate::Register::new(8, 0xf);
        pub const SFR_VDCFG_CR_VDCFG0_CR_VDCFG0: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG0);

        pub const SFR_VDCFG_CR_VDCFG1: crate::Register = crate::Register::new(9, 0xf);
        pub const SFR_VDCFG_CR_VDCFG1_CR_VDCFG1: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG1);

        pub const SFR_VDCFG_CR_VDCFG2: crate::Register = crate::Register::new(10, 0xf);
        pub const SFR_VDCFG_CR_VDCFG2_CR_VDCFG2: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG2);

        pub const SFR_VDCFG_CR_VDCFG3: crate::Register = crate::Register::new(11, 0xf);
        pub const SFR_VDCFG_CR_VDCFG3_CR_VDCFG3: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG3);

        pub const SFR_VDCFG_CR_VDCFG4: crate::Register = crate::Register::new(12, 0xf);
        pub const SFR_VDCFG_CR_VDCFG4_CR_VDCFG4: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG4);

        pub const SFR_VDCFG_CR_VDCFG5: crate::Register = crate::Register::new(13, 0xf);
        pub const SFR_VDCFG_CR_VDCFG5_CR_VDCFG5: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG5);

        pub const SFR_VDCFG_CR_VDCFG6: crate::Register = crate::Register::new(14, 0xf);
        pub const SFR_VDCFG_CR_VDCFG6_CR_VDCFG6: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG6);

        pub const SFR_VDCFG_CR_VDCFG7: crate::Register = crate::Register::new(15, 0xf);
        pub const SFR_VDCFG_CR_VDCFG7_CR_VDCFG7: crate::Field = crate::Field::new(4, 0, SFR_VDCFG_CR_VDCFG7);

        pub const SFR_VDIP_ENA: crate::Register = crate::Register::new(16, 0x3f);
        pub const SFR_VDIP_ENA_VDENA: crate::Field = crate::Field::new(6, 0, SFR_VDIP_ENA);

        pub const SFR_VDIP_TEST: crate::Register = crate::Register::new(17, 0xff);
        pub const SFR_VDIP_TEST_VDTST: crate::Field = crate::Field::new(8, 0, SFR_VDIP_TEST);

        pub const SFR_LDIP_TEST: crate::Register = crate::Register::new(18, 0xf);
        pub const SFR_LDIP_TEST_LDTST: crate::Field = crate::Field::new(4, 0, SFR_LDIP_TEST);

        pub const SFR_LDIP_FD: crate::Register = crate::Register::new(19, 0xffff);
        pub const SFR_LDIP_FD_SFR_LDIP_FD: crate::Field = crate::Field::new(16, 0, SFR_LDIP_FD);

        pub const HW_SENSORC_BASE: usize = 0x40053000;
    }

    pub mod aobureg {
        pub const AOBUREG_NUMREGS: usize = 8;

        pub const SFR_BUREG_CR_BUREGS0: crate::Register = crate::Register::new(0, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS0_CR_BUREGS0: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS0);

        pub const SFR_BUREG_CR_BUREGS1: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS1_CR_BUREGS1: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS1);

        pub const SFR_BUREG_CR_BUREGS2: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS2_CR_BUREGS2: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS2);

        pub const SFR_BUREG_CR_BUREGS3: crate::Register = crate::Register::new(3, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS3_CR_BUREGS3: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS3);

        pub const SFR_BUREG_CR_BUREGS4: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS4_CR_BUREGS4: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS4);

        pub const SFR_BUREG_CR_BUREGS5: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS5_CR_BUREGS5: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS5);

        pub const SFR_BUREG_CR_BUREGS6: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS6_CR_BUREGS6: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS6);

        pub const SFR_BUREG_CR_BUREGS7: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_BUREG_CR_BUREGS7_CR_BUREGS7: crate::Field = crate::Field::new(32, 0, SFR_BUREG_CR_BUREGS7);

        pub const HW_AOBUREG_BASE: usize = 0x40065000;
    }

    pub mod ao_sysctrl {
        pub const AO_SYSCTRL_NUMREGS: usize = 20;

        pub const CR_CR: crate::Register = crate::Register::new(0, 0x7);
        pub const CR_CR_CLK32KSELREG: crate::Field = crate::Field::new(1, 0, CR_CR);
        pub const CR_CR_PDISOEN: crate::Field = crate::Field::new(1, 1, CR_CR);
        pub const CR_CR_PCLKICG: crate::Field = crate::Field::new(1, 2, CR_CR);

        pub const CR_CLK1HZFD: crate::Register = crate::Register::new(1, 0x3fff);
        pub const CR_CLK1HZFD_CR_CLK1HZFD: crate::Field = crate::Field::new(14, 0, CR_CLK1HZFD);

        pub const CR_WKUPMASK: crate::Register = crate::Register::new(2, 0x3ffff);
        pub const CR_WKUPMASK_INTEN: crate::Field = crate::Field::new(8, 0, CR_WKUPMASK);
        pub const CR_WKUPMASK_WKUPMASK: crate::Field = crate::Field::new(10, 8, CR_WKUPMASK);

        pub const CR_RSTCRMASK: crate::Register = crate::Register::new(3, 0x1f);
        pub const CR_RSTCRMASK_CR_RSTCRMASK: crate::Field = crate::Field::new(5, 0, CR_RSTCRMASK);

        pub const SFR_PMUCSR: crate::Register = crate::Register::new(4, 0xff);
        pub const SFR_PMUCSR_PMUCRREG: crate::Field = crate::Field::new(8, 0, SFR_PMUCSR);

        pub const SFR_PMUCRLP: crate::Register = crate::Register::new(5, 0xff);
        pub const SFR_PMUCRLP_SFRPMUCRLP: crate::Field = crate::Field::new(8, 0, SFR_PMUCRLP);

        pub const SFR_PMUCRPD: crate::Register = crate::Register::new(6, 0xff);
        pub const SFR_PMUCRPD_SFRPMUCRPD: crate::Field = crate::Field::new(8, 0, SFR_PMUCRPD);

        pub const SFR_PMUDFTSR: crate::Register = crate::Register::new(7, 0x3f);
        pub const SFR_PMUDFTSR_PMUDFTREG: crate::Field = crate::Field::new(6, 0, SFR_PMUDFTSR);

        pub const SFR_PMUTRM0CSR: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_PMUTRM0CSR_PMUTRMREG: crate::Field = crate::Field::new(32, 0, SFR_PMUTRM0CSR);

        pub const SFR_PMUTRM1CSR: crate::Register = crate::Register::new(9, 0x3);
        pub const SFR_PMUTRM1CSR_PMUTRMREG: crate::Field = crate::Field::new(2, 0, SFR_PMUTRM1CSR);

        pub const SFR_PMUTRMLP0: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_PMUTRMLP0_SFRPMUTRMLP: crate::Field = crate::Field::new(32, 0, SFR_PMUTRMLP0);

        pub const SFR_PMUTRMLP1: crate::Register = crate::Register::new(11, 0x3);
        pub const SFR_PMUTRMLP1_SFRPMUTRMLP: crate::Field = crate::Field::new(2, 0, SFR_PMUTRMLP1);

        pub const SFR_OSCCR: crate::Register = crate::Register::new(13, 0x1f);
        pub const SFR_OSCCR_SFROSCCR: crate::Field = crate::Field::new(1, 0, SFR_OSCCR);
        pub const SFR_OSCCR_SFROSCTRM: crate::Field = crate::Field::new(1, 1, SFR_OSCCR);
        pub const SFR_OSCCR_SFROSCCRLP: crate::Field = crate::Field::new(1, 2, SFR_OSCCR);
        pub const SFR_OSCCR_SFROSCTRMLP: crate::Field = crate::Field::new(1, 3, SFR_OSCCR);
        pub const SFR_OSCCR_SFROSCCRPD: crate::Field = crate::Field::new(1, 4, SFR_OSCCR);

        pub const SFR_PMUSR: crate::Register = crate::Register::new(14, 0x1f);
        pub const SFR_PMUSR_SFR_PMUSR: crate::Field = crate::Field::new(5, 0, SFR_PMUSR);

        pub const SFR_PMUFR: crate::Register = crate::Register::new(15, 0x1f);
        pub const SFR_PMUFR_SFR_PMUFR: crate::Field = crate::Field::new(5, 0, SFR_PMUFR);

        pub const SFR_AOFR: crate::Register = crate::Register::new(16, 0x3ff);
        pub const SFR_AOFR_SFR_AOFR: crate::Field = crate::Field::new(10, 0, SFR_AOFR);

        pub const SFR_PMUPDAR: crate::Register = crate::Register::new(17, 0xffffffff);
        pub const SFR_PMUPDAR_SFR_PMUPDAR: crate::Field = crate::Field::new(32, 0, SFR_PMUPDAR);

        pub const AR_AOPERI_CLRINT: crate::Register = crate::Register::new(20, 0xffffffff);
        pub const AR_AOPERI_CLRINT_AR_AOPERI_CLRINT: crate::Field = crate::Field::new(32, 0, AR_AOPERI_CLRINT);

        pub const SFR_IOX: crate::Register = crate::Register::new(24, 0x1);
        pub const SFR_IOX_SFR_IOX: crate::Field = crate::Field::new(1, 0, SFR_IOX);

        pub const SFR_AOPADPU: crate::Register = crate::Register::new(25, 0x3ff);
        pub const SFR_AOPADPU_SFR_AOPADPU: crate::Field = crate::Field::new(10, 0, SFR_AOPADPU);

        pub const HW_AO_SYSCTRL_BASE: usize = 0x40060000;
    }

    pub mod dkpc {
        pub const DKPC_NUMREGS: usize = 7;

        pub const SFR_CFG0: crate::Register = crate::Register::new(0, 0x3f);
        pub const SFR_CFG0_KPOPO0: crate::Field = crate::Field::new(1, 0, SFR_CFG0);
        pub const SFR_CFG0_KPOPO1: crate::Field = crate::Field::new(1, 1, SFR_CFG0);
        pub const SFR_CFG0_KPOOE0: crate::Field = crate::Field::new(1, 2, SFR_CFG0);
        pub const SFR_CFG0_KPOOE1: crate::Field = crate::Field::new(1, 3, SFR_CFG0);
        pub const SFR_CFG0_DKPCEN: crate::Field = crate::Field::new(1, 4, SFR_CFG0);
        pub const SFR_CFG0_AUTOSLEEPEN: crate::Field = crate::Field::new(1, 5, SFR_CFG0);

        pub const SFR_CFG1: crate::Register = crate::Register::new(1, 0xffffff);
        pub const SFR_CFG1_CFG_STEP: crate::Field = crate::Field::new(8, 0, SFR_CFG1);
        pub const SFR_CFG1_CFG_FILTER: crate::Field = crate::Field::new(8, 8, SFR_CFG1);
        pub const SFR_CFG1_CFG_CNT1MS: crate::Field = crate::Field::new(8, 16, SFR_CFG1);

        pub const SFR_CFG2: crate::Register = crate::Register::new(2, 0xffffffff);
        pub const SFR_CFG2_CFG_CNT: crate::Field = crate::Field::new(32, 0, SFR_CFG2);

        pub const SFR_CFG3: crate::Register = crate::Register::new(3, 0x3);
        pub const SFR_CFG3_KPNODERISEEN: crate::Field = crate::Field::new(1, 0, SFR_CFG3);
        pub const SFR_CFG3_KPNODEFALLEN: crate::Field = crate::Field::new(1, 1, SFR_CFG3);

        pub const SFR_SR0: crate::Register = crate::Register::new(4, 0x1f);
        pub const SFR_SR0_KPNODEREG: crate::Field = crate::Field::new(1, 0, SFR_SR0);
        pub const SFR_SR0_KPI0_PI: crate::Field = crate::Field::new(1, 1, SFR_SR0);
        pub const SFR_SR0_KPI1_PI: crate::Field = crate::Field::new(1, 2, SFR_SR0);
        pub const SFR_SR0_KPI2_PI: crate::Field = crate::Field::new(1, 3, SFR_SR0);
        pub const SFR_SR0_KPI3_PI: crate::Field = crate::Field::new(1, 4, SFR_SR0);

        pub const SFR_SR1: crate::Register = crate::Register::new(5, 0x1);
        pub const SFR_SR1_SFR_SR1: crate::Field = crate::Field::new(1, 0, SFR_SR1);

        pub const SFR_CFG4: crate::Register = crate::Register::new(12, 0xffff);
        pub const SFR_CFG4_SFR_CFG4: crate::Field = crate::Field::new(16, 0, SFR_CFG4);

        pub const HW_DKPC_BASE: usize = 0x40064000;
    }

    pub mod udma_ctrl {
        pub const UDMA_CTRL_NUMREGS: usize = 3;

        pub const REG_CG: crate::Register = crate::Register::new(0, 0x3f);
        pub const REG_CG_R_CG: crate::Field = crate::Field::new(6, 0, REG_CG);

        pub const REG_CFG_EVT: crate::Register = crate::Register::new(1, 0xffffffff);
        pub const REG_CFG_EVT_R_CMP_EVT_0: crate::Field = crate::Field::new(8, 0, REG_CFG_EVT);
        pub const REG_CFG_EVT_R_CMP_EVT_1: crate::Field = crate::Field::new(8, 8, REG_CFG_EVT);
        pub const REG_CFG_EVT_R_CMP_EVT_2: crate::Field = crate::Field::new(8, 16, REG_CFG_EVT);
        pub const REG_CFG_EVT_R_CMP_EVT_3: crate::Field = crate::Field::new(8, 24, REG_CFG_EVT);

        pub const REG_RST: crate::Register = crate::Register::new(2, 0x3f);
        pub const REG_RST_R_RST: crate::Field = crate::Field::new(6, 0, REG_RST);

        pub const HW_UDMA_CTRL_BASE: usize = 0x50100000;
    }

    pub mod udma_uart_0 {
        pub const UDMA_UART_0_NUMREGS: usize = 12;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(8, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const REG_UART_SETUP: crate::Register = crate::Register::new(9, 0xffff033f);
        pub const REG_UART_SETUP_R_UART_PARITY_EN: crate::Field = crate::Field::new(1, 0, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_BITS: crate::Field = crate::Field::new(2, 1, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_STOP_BITS: crate::Field = crate::Field::new(1, 3, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_POLLING_EN: crate::Field = crate::Field::new(1, 4, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_CLEAN_FIFO: crate::Field = crate::Field::new(1, 5, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_TX: crate::Field = crate::Field::new(1, 8, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_RX: crate::Field = crate::Field::new(1, 9, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_DIV: crate::Field = crate::Field::new(16, 16, REG_UART_SETUP);

        pub const REG_ERROR: crate::Register = crate::Register::new(10, 0x3);
        pub const REG_ERROR_R_ERR_OVERFLOW: crate::Field = crate::Field::new(1, 0, REG_ERROR);
        pub const REG_ERROR_R_ERR_PARITY: crate::Field = crate::Field::new(1, 1, REG_ERROR);

        pub const REG_IRQ_EN: crate::Register = crate::Register::new(11, 0x3);
        pub const REG_IRQ_EN_R_UART_RX_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_IRQ_EN);
        pub const REG_IRQ_EN_R_UART_ERR_IRQ_EN: crate::Field = crate::Field::new(1, 1, REG_IRQ_EN);

        pub const REG_VALID: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_VALID_R_UART_RX_DATA_VALID: crate::Field = crate::Field::new(1, 0, REG_VALID);

        pub const REG_DATA: crate::Register = crate::Register::new(13, 0xff);
        pub const REG_DATA_R_UART_RX_DATA: crate::Field = crate::Field::new(8, 0, REG_DATA);

        pub const HW_UDMA_UART_0_BASE: usize = 0x50101000;
    }

    pub mod udma_uart_1 {
        pub const UDMA_UART_1_NUMREGS: usize = 12;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(8, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const REG_UART_SETUP: crate::Register = crate::Register::new(9, 0xffff033f);
        pub const REG_UART_SETUP_R_UART_PARITY_EN: crate::Field = crate::Field::new(1, 0, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_BITS: crate::Field = crate::Field::new(2, 1, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_STOP_BITS: crate::Field = crate::Field::new(1, 3, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_POLLING_EN: crate::Field = crate::Field::new(1, 4, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_CLEAN_FIFO: crate::Field = crate::Field::new(1, 5, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_TX: crate::Field = crate::Field::new(1, 8, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_RX: crate::Field = crate::Field::new(1, 9, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_DIV: crate::Field = crate::Field::new(16, 16, REG_UART_SETUP);

        pub const REG_ERROR: crate::Register = crate::Register::new(10, 0x3);
        pub const REG_ERROR_R_ERR_OVERFLOW: crate::Field = crate::Field::new(1, 0, REG_ERROR);
        pub const REG_ERROR_R_ERR_PARITY: crate::Field = crate::Field::new(1, 1, REG_ERROR);

        pub const REG_IRQ_EN: crate::Register = crate::Register::new(11, 0x3);
        pub const REG_IRQ_EN_R_UART_RX_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_IRQ_EN);
        pub const REG_IRQ_EN_R_UART_ERR_IRQ_EN: crate::Field = crate::Field::new(1, 1, REG_IRQ_EN);

        pub const REG_VALID: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_VALID_R_UART_RX_DATA_VALID: crate::Field = crate::Field::new(1, 0, REG_VALID);

        pub const REG_DATA: crate::Register = crate::Register::new(13, 0xff);
        pub const REG_DATA_R_UART_RX_DATA: crate::Field = crate::Field::new(8, 0, REG_DATA);

        pub const HW_UDMA_UART_1_BASE: usize = 0x50102000;
    }

    pub mod udma_uart_2 {
        pub const UDMA_UART_2_NUMREGS: usize = 12;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(8, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const REG_UART_SETUP: crate::Register = crate::Register::new(9, 0xffff033f);
        pub const REG_UART_SETUP_R_UART_PARITY_EN: crate::Field = crate::Field::new(1, 0, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_BITS: crate::Field = crate::Field::new(2, 1, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_STOP_BITS: crate::Field = crate::Field::new(1, 3, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_POLLING_EN: crate::Field = crate::Field::new(1, 4, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_CLEAN_FIFO: crate::Field = crate::Field::new(1, 5, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_TX: crate::Field = crate::Field::new(1, 8, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_RX: crate::Field = crate::Field::new(1, 9, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_DIV: crate::Field = crate::Field::new(16, 16, REG_UART_SETUP);

        pub const REG_ERROR: crate::Register = crate::Register::new(10, 0x3);
        pub const REG_ERROR_R_ERR_OVERFLOW: crate::Field = crate::Field::new(1, 0, REG_ERROR);
        pub const REG_ERROR_R_ERR_PARITY: crate::Field = crate::Field::new(1, 1, REG_ERROR);

        pub const REG_IRQ_EN: crate::Register = crate::Register::new(11, 0x3);
        pub const REG_IRQ_EN_R_UART_RX_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_IRQ_EN);
        pub const REG_IRQ_EN_R_UART_ERR_IRQ_EN: crate::Field = crate::Field::new(1, 1, REG_IRQ_EN);

        pub const REG_VALID: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_VALID_R_UART_RX_DATA_VALID: crate::Field = crate::Field::new(1, 0, REG_VALID);

        pub const REG_DATA: crate::Register = crate::Register::new(13, 0xff);
        pub const REG_DATA_R_UART_RX_DATA: crate::Field = crate::Field::new(8, 0, REG_DATA);

        pub const HW_UDMA_UART_2_BASE: usize = 0x50103000;
    }

    pub mod udma_uart_3 {
        pub const UDMA_UART_3_NUMREGS: usize = 12;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(8, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const REG_UART_SETUP: crate::Register = crate::Register::new(9, 0xffff033f);
        pub const REG_UART_SETUP_R_UART_PARITY_EN: crate::Field = crate::Field::new(1, 0, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_BITS: crate::Field = crate::Field::new(2, 1, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_STOP_BITS: crate::Field = crate::Field::new(1, 3, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_POLLING_EN: crate::Field = crate::Field::new(1, 4, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_RX_CLEAN_FIFO: crate::Field = crate::Field::new(1, 5, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_TX: crate::Field = crate::Field::new(1, 8, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_EN_RX: crate::Field = crate::Field::new(1, 9, REG_UART_SETUP);
        pub const REG_UART_SETUP_R_UART_DIV: crate::Field = crate::Field::new(16, 16, REG_UART_SETUP);

        pub const REG_ERROR: crate::Register = crate::Register::new(10, 0x3);
        pub const REG_ERROR_R_ERR_OVERFLOW: crate::Field = crate::Field::new(1, 0, REG_ERROR);
        pub const REG_ERROR_R_ERR_PARITY: crate::Field = crate::Field::new(1, 1, REG_ERROR);

        pub const REG_IRQ_EN: crate::Register = crate::Register::new(11, 0x3);
        pub const REG_IRQ_EN_R_UART_RX_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_IRQ_EN);
        pub const REG_IRQ_EN_R_UART_ERR_IRQ_EN: crate::Field = crate::Field::new(1, 1, REG_IRQ_EN);

        pub const REG_VALID: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_VALID_R_UART_RX_DATA_VALID: crate::Field = crate::Field::new(1, 0, REG_VALID);

        pub const REG_DATA: crate::Register = crate::Register::new(13, 0xff);
        pub const REG_DATA_R_UART_RX_DATA: crate::Field = crate::Field::new(8, 0, REG_DATA);

        pub const HW_UDMA_UART_3_BASE: usize = 0x50104000;
    }

    pub mod udma_spim_0 {
        pub const UDMA_SPIM_0_NUMREGS: usize = 10;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0xd7);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_BACKPRESSURE: crate::Field = crate::Field::new(1, 7, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x57);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x51);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_CLR: crate::Field = crate::Field::new(1, 6, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const HW_UDMA_SPIM_0_BASE: usize = 0x50105000;
    }

    pub mod udma_spim_1 {
        pub const UDMA_SPIM_1_NUMREGS: usize = 10;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0xd7);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_BACKPRESSURE: crate::Field = crate::Field::new(1, 7, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x57);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x51);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_CLR: crate::Field = crate::Field::new(1, 6, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const HW_UDMA_SPIM_1_BASE: usize = 0x50106000;
    }

    pub mod udma_spim_2 {
        pub const UDMA_SPIM_2_NUMREGS: usize = 10;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0xd7);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_BACKPRESSURE: crate::Field = crate::Field::new(1, 7, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x57);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x51);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_CLR: crate::Field = crate::Field::new(1, 6, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const HW_UDMA_SPIM_2_BASE: usize = 0x50107000;
    }

    pub mod udma_spim_3 {
        pub const UDMA_SPIM_3_NUMREGS: usize = 10;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0xd7);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_BACKPRESSURE: crate::Field = crate::Field::new(1, 7, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x57);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x51);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_CLR: crate::Field = crate::Field::new(1, 6, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const HW_UDMA_SPIM_3_BASE: usize = 0x50108000;
    }

    pub mod udma_i2c_0 {
        pub const UDMA_I2C_0_NUMREGS: usize = 11;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x11);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x11);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x11);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x3);
        pub const REG_STATUS_R_BUSY: crate::Field = crate::Field::new(1, 0, REG_STATUS);
        pub const REG_STATUS_R_AL: crate::Field = crate::Field::new(1, 1, REG_STATUS);

        pub const REG_ACK: crate::Register = crate::Register::new(14, 0x1);
        pub const REG_ACK_R_NACK: crate::Field = crate::Field::new(1, 0, REG_ACK);

        pub const HW_UDMA_I2C_0_BASE: usize = 0x50109000;
    }

    pub mod udma_i2c_1 {
        pub const UDMA_I2C_1_NUMREGS: usize = 11;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x11);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x11);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x11);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x3);
        pub const REG_STATUS_R_BUSY: crate::Field = crate::Field::new(1, 0, REG_STATUS);
        pub const REG_STATUS_R_AL: crate::Field = crate::Field::new(1, 1, REG_STATUS);

        pub const REG_ACK: crate::Register = crate::Register::new(14, 0x1);
        pub const REG_ACK_R_NACK: crate::Field = crate::Field::new(1, 0, REG_ACK);

        pub const HW_UDMA_I2C_1_BASE: usize = 0x5010a000;
    }

    pub mod udma_i2c_2 {
        pub const UDMA_I2C_2_NUMREGS: usize = 11;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x11);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x11);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x11);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x3);
        pub const REG_STATUS_R_BUSY: crate::Field = crate::Field::new(1, 0, REG_STATUS);
        pub const REG_STATUS_R_AL: crate::Field = crate::Field::new(1, 1, REG_STATUS);

        pub const REG_ACK: crate::Register = crate::Register::new(14, 0x1);
        pub const REG_ACK_R_NACK: crate::Field = crate::Field::new(1, 0, REG_ACK);

        pub const HW_UDMA_I2C_2_BASE: usize = 0x5010b000;
    }

    pub mod udma_i2c_3 {
        pub const UDMA_I2C_3_NUMREGS: usize = 11;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x11);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x11);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);

        pub const REG_CMD_SADDR: crate::Register = crate::Register::new(8, 0xfff);
        pub const REG_CMD_SADDR_R_CMD_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_CMD_SADDR);

        pub const REG_CMD_SIZE: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_CMD_SIZE_R_CMD_SIZE: crate::Field = crate::Field::new(16, 0, REG_CMD_SIZE);

        pub const REG_CMD_CFG: crate::Register = crate::Register::new(10, 0x11);
        pub const REG_CMD_CFG_R_CMD_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_CMD_CFG);
        pub const REG_CMD_CFG_R_CMD_EN: crate::Field = crate::Field::new(1, 4, REG_CMD_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(12, 0x3);
        pub const REG_STATUS_R_BUSY: crate::Field = crate::Field::new(1, 0, REG_STATUS);
        pub const REG_STATUS_R_AL: crate::Field = crate::Field::new(1, 1, REG_STATUS);

        pub const REG_ACK: crate::Register = crate::Register::new(14, 0x1);
        pub const REG_ACK_R_NACK: crate::Field = crate::Field::new(1, 0, REG_ACK);

        pub const HW_UDMA_I2C_3_BASE: usize = 0x5010c000;
    }

    pub mod udma_sdio {
        pub const UDMA_SDIO_NUMREGS: usize = 16;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_CMD_OP: crate::Register = crate::Register::new(8, 0x33f07);
        pub const REG_CMD_OP_R_CMD_RSP_TYPE: crate::Field = crate::Field::new(3, 0, REG_CMD_OP);
        pub const REG_CMD_OP_R_CMD_OP: crate::Field = crate::Field::new(6, 8, REG_CMD_OP);
        pub const REG_CMD_OP_R_CMD_STOPOPT: crate::Field = crate::Field::new(2, 16, REG_CMD_OP);

        pub const REG_DATA_SETUP: crate::Register = crate::Register::new(10, 0x3ffff07);
        pub const REG_DATA_SETUP_R_DATA_EN: crate::Field = crate::Field::new(1, 0, REG_DATA_SETUP);
        pub const REG_DATA_SETUP_R_DATA_RWN: crate::Field = crate::Field::new(1, 1, REG_DATA_SETUP);
        pub const REG_DATA_SETUP_R_DATA_QUAD: crate::Field = crate::Field::new(1, 2, REG_DATA_SETUP);
        pub const REG_DATA_SETUP_R_DATA_BLOCK_NUM: crate::Field = crate::Field::new(8, 8, REG_DATA_SETUP);
        pub const REG_DATA_SETUP_R_DATA_BLOCK_SIZE: crate::Field = crate::Field::new(10, 16, REG_DATA_SETUP);

        pub const REG_START: crate::Register = crate::Register::new(11, 0x1);
        pub const REG_START_R_SDIO_START: crate::Field = crate::Field::new(1, 0, REG_START);

        pub const REG_RSP0: crate::Register = crate::Register::new(12, 0xffffffff);
        pub const REG_RSP0_CFG_RSP_DATA_I_31_0: crate::Field = crate::Field::new(32, 0, REG_RSP0);

        pub const REG_RSP1: crate::Register = crate::Register::new(13, 0xffffffff);
        pub const REG_RSP1_CFG_RSP_DATA_I_63_32: crate::Field = crate::Field::new(32, 0, REG_RSP1);

        pub const REG_RSP2: crate::Register = crate::Register::new(14, 0xffffffff);
        pub const REG_RSP2_CFG_RSP_DATA_I_95_64: crate::Field = crate::Field::new(32, 0, REG_RSP2);

        pub const REG_RSP3: crate::Register = crate::Register::new(15, 0xffffffff);
        pub const REG_RSP3_CFG_RSP_DATA_I_127_96: crate::Field = crate::Field::new(32, 0, REG_RSP3);

        pub const REG_CLK_DIV: crate::Register = crate::Register::new(16, 0x1ff);
        pub const REG_CLK_DIV_R_CLK_DIV_DATA: crate::Field = crate::Field::new(8, 0, REG_CLK_DIV);
        pub const REG_CLK_DIV_R_CLK_DIV_VALID: crate::Field = crate::Field::new(1, 8, REG_CLK_DIV);

        pub const REG_STATUS: crate::Register = crate::Register::new(17, 0x3);
        pub const REG_STATUS_R_EOT: crate::Field = crate::Field::new(1, 0, REG_STATUS);
        pub const REG_STATUS_R_ERR: crate::Field = crate::Field::new(1, 1, REG_STATUS);

        pub const REG_DATA_TIMEOUT: crate::Register = crate::Register::new(18, 0xfffff);
        pub const REG_DATA_TIMEOUT_R_DATA_TIMEOUT: crate::Field = crate::Field::new(20, 0, REG_DATA_TIMEOUT);

        pub const HW_UDMA_SDIO_BASE: usize = 0x5010d000;
    }

    pub mod udma_i2s {
        pub const UDMA_I2S_NUMREGS: usize = 10;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x37);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 5, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x37);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 5, REG_TX_CFG);

        pub const REG_I2S_CLKCFG_SETUP: crate::Register = crate::Register::new(8, 0xf7ffffff);
        pub const REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV: crate::Field = crate::Field::new(8, 0, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV: crate::Field = crate::Field::new(8, 8, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV: crate::Field = crate::Field::new(8, 16, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN: crate::Field = crate::Field::new(1, 24, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN: crate::Field = crate::Field::new(1, 25, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN: crate::Field = crate::Field::new(1, 26, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT: crate::Field = crate::Field::new(1, 28, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM: crate::Field = crate::Field::new(1, 29, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT: crate::Field = crate::Field::new(1, 30, REG_I2S_CLKCFG_SETUP);
        pub const REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM: crate::Field = crate::Field::new(1, 31, REG_I2S_CLKCFG_SETUP);

        pub const REG_I2S_SLV_SETUP: crate::Register = crate::Register::new(9, 0x80031f07);
        pub const REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS: crate::Field = crate::Field::new(3, 0, REG_I2S_SLV_SETUP);
        pub const REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD: crate::Field = crate::Field::new(5, 8, REG_I2S_SLV_SETUP);
        pub const REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST: crate::Field = crate::Field::new(1, 16, REG_I2S_SLV_SETUP);
        pub const REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH: crate::Field = crate::Field::new(1, 17, REG_I2S_SLV_SETUP);
        pub const REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN: crate::Field = crate::Field::new(1, 31, REG_I2S_SLV_SETUP);

        pub const REG_I2S_MST_SETUP: crate::Register = crate::Register::new(10, 0x80031f07);
        pub const REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS: crate::Field = crate::Field::new(3, 0, REG_I2S_MST_SETUP);
        pub const REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD: crate::Field = crate::Field::new(5, 8, REG_I2S_MST_SETUP);
        pub const REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST: crate::Field = crate::Field::new(1, 16, REG_I2S_MST_SETUP);
        pub const REG_I2S_MST_SETUP_R_MASTER_I2S_2CH: crate::Field = crate::Field::new(1, 17, REG_I2S_MST_SETUP);
        pub const REG_I2S_MST_SETUP_R_MASTER_I2S_EN: crate::Field = crate::Field::new(1, 31, REG_I2S_MST_SETUP);

        pub const REG_I2S_PDM_SETUP: crate::Register = crate::Register::new(11, 0x80007fff);
        pub const REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT: crate::Field = crate::Field::new(3, 0, REG_I2S_PDM_SETUP);
        pub const REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION: crate::Field = crate::Field::new(10, 3, REG_I2S_PDM_SETUP);
        pub const REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE: crate::Field = crate::Field::new(2, 13, REG_I2S_PDM_SETUP);
        pub const REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN: crate::Field = crate::Field::new(1, 31, REG_I2S_PDM_SETUP);

        pub const HW_UDMA_I2S_BASE: usize = 0x5010e000;
    }

    pub mod udma_camera {
        pub const UDMA_CAMERA_NUMREGS: usize = 9;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x57);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_DATASIZE: crate::Field = crate::Field::new(2, 1, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_CAM_CFG_GLOB: crate::Register = crate::Register::new(8, 0x7fffffff);
        pub const REG_CAM_CFG_GLOB_R_CAM_CFG: crate::Field = crate::Field::new(30, 0, REG_CAM_CFG_GLOB);
        pub const REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I: crate::Field = crate::Field::new(1, 30, REG_CAM_CFG_GLOB);

        pub const REG_CAM_CFG_LL: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const REG_CAM_CFG_LL_R_CAM_CFG_LL: crate::Field = crate::Field::new(32, 0, REG_CAM_CFG_LL);

        pub const REG_CAM_CFG_UR: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const REG_CAM_CFG_UR_R_CAM_CFG_UR: crate::Field = crate::Field::new(32, 0, REG_CAM_CFG_UR);

        pub const REG_CAM_CFG_SIZE: crate::Register = crate::Register::new(11, 0xffffffff);
        pub const REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE: crate::Field = crate::Field::new(32, 0, REG_CAM_CFG_SIZE);

        pub const REG_CAM_CFG_FILTER: crate::Register = crate::Register::new(12, 0xffffffff);
        pub const REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER: crate::Field = crate::Field::new(32, 0, REG_CAM_CFG_FILTER);

        pub const REG_CAM_VSYNC_POLARITY: crate::Register = crate::Register::new(13, 0x3);
        pub const REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY: crate::Field = crate::Field::new(1, 0, REG_CAM_VSYNC_POLARITY);
        pub const REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY: crate::Field = crate::Field::new(1, 1, REG_CAM_VSYNC_POLARITY);

        pub const HW_UDMA_CAMERA_BASE: usize = 0x5010f000;
    }

    pub mod udma_filter {
        pub const UDMA_FILTER_NUMREGS: usize = 24;

        pub const REG_TX_CH0_ADD: crate::Register = crate::Register::new(0, 0x7fff);
        pub const REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0: crate::Field = crate::Field::new(15, 0, REG_TX_CH0_ADD);

        pub const REG_TX_CH0_CFG: crate::Register = crate::Register::new(1, 0x303);
        pub const REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0: crate::Field = crate::Field::new(2, 0, REG_TX_CH0_CFG);
        pub const REG_TX_CH0_CFG_R_FILTER_TX_MODE_0: crate::Field = crate::Field::new(2, 8, REG_TX_CH0_CFG);

        pub const REG_TX_CH0_LEN0: crate::Register = crate::Register::new(2, 0x7fff);
        pub const REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0: crate::Field = crate::Field::new(15, 0, REG_TX_CH0_LEN0);

        pub const REG_TX_CH0_LEN1: crate::Register = crate::Register::new(3, 0x7fff);
        pub const REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0: crate::Field = crate::Field::new(15, 0, REG_TX_CH0_LEN1);

        pub const REG_TX_CH0_LEN2: crate::Register = crate::Register::new(4, 0x7fff);
        pub const REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0: crate::Field = crate::Field::new(15, 0, REG_TX_CH0_LEN2);

        pub const REG_TX_CH1_ADD: crate::Register = crate::Register::new(5, 0x7fff);
        pub const REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1: crate::Field = crate::Field::new(15, 0, REG_TX_CH1_ADD);

        pub const REG_TX_CH1_CFG: crate::Register = crate::Register::new(6, 0x303);
        pub const REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1: crate::Field = crate::Field::new(2, 0, REG_TX_CH1_CFG);
        pub const REG_TX_CH1_CFG_R_FILTER_TX_MODE_1: crate::Field = crate::Field::new(2, 8, REG_TX_CH1_CFG);

        pub const REG_TX_CH1_LEN0: crate::Register = crate::Register::new(7, 0x7fff);
        pub const REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1: crate::Field = crate::Field::new(15, 0, REG_TX_CH1_LEN0);

        pub const REG_TX_CH1_LEN1: crate::Register = crate::Register::new(8, 0x7fff);
        pub const REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1: crate::Field = crate::Field::new(15, 0, REG_TX_CH1_LEN1);

        pub const REG_TX_CH1_LEN2: crate::Register = crate::Register::new(9, 0x7fff);
        pub const REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1: crate::Field = crate::Field::new(15, 0, REG_TX_CH1_LEN2);

        pub const REG_RX_CH_ADD: crate::Register = crate::Register::new(10, 0x7fff);
        pub const REG_RX_CH_ADD_R_FILTER_RX_START_ADDR: crate::Field = crate::Field::new(15, 0, REG_RX_CH_ADD);

        pub const REG_RX_CH_CFG: crate::Register = crate::Register::new(11, 0x303);
        pub const REG_RX_CH_CFG_R_FILTER_RX_DATASIZE: crate::Field = crate::Field::new(2, 0, REG_RX_CH_CFG);
        pub const REG_RX_CH_CFG_R_FILTER_RX_MODE: crate::Field = crate::Field::new(2, 8, REG_RX_CH_CFG);

        pub const REG_RX_CH_LEN0: crate::Register = crate::Register::new(12, 0xffff);
        pub const REG_RX_CH_LEN0_R_FILTER_RX_LEN0: crate::Field = crate::Field::new(16, 0, REG_RX_CH_LEN0);

        pub const REG_RX_CH_LEN1: crate::Register = crate::Register::new(13, 0xffff);
        pub const REG_RX_CH_LEN1_R_FILTER_RX_LEN1: crate::Field = crate::Field::new(16, 0, REG_RX_CH_LEN1);

        pub const REG_RX_CH_LEN2: crate::Register = crate::Register::new(14, 0xffff);
        pub const REG_RX_CH_LEN2_R_FILTER_RX_LEN2: crate::Field = crate::Field::new(16, 0, REG_RX_CH_LEN2);

        pub const REG_AU_CFG: crate::Register = crate::Register::new(15, 0x1f0f03);
        pub const REG_AU_CFG_R_AU_USE_SIGNED: crate::Field = crate::Field::new(1, 0, REG_AU_CFG);
        pub const REG_AU_CFG_R_AU_BYPASS: crate::Field = crate::Field::new(1, 1, REG_AU_CFG);
        pub const REG_AU_CFG_R_AU_MODE: crate::Field = crate::Field::new(4, 8, REG_AU_CFG);
        pub const REG_AU_CFG_R_AU_SHIFT: crate::Field = crate::Field::new(5, 16, REG_AU_CFG);

        pub const REG_AU_REG0: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const REG_AU_REG0_R_COMMIT_AU_REG0: crate::Field = crate::Field::new(32, 0, REG_AU_REG0);

        pub const REG_AU_REG1: crate::Register = crate::Register::new(17, 0xffffffff);
        pub const REG_AU_REG1_R_COMMIT_AU_REG1: crate::Field = crate::Field::new(32, 0, REG_AU_REG1);

        pub const REG_BINCU_TH: crate::Register = crate::Register::new(18, 0xffffffff);
        pub const REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD: crate::Field = crate::Field::new(32, 0, REG_BINCU_TH);

        pub const REG_BINCU_CNT: crate::Register = crate::Register::new(19, 0x80007fff);
        pub const REG_BINCU_CNT_R_BINCU_COUNTER: crate::Field = crate::Field::new(15, 0, REG_BINCU_CNT);
        pub const REG_BINCU_CNT_R_BINCU_EN_COUNTER: crate::Field = crate::Field::new(1, 31, REG_BINCU_CNT);

        pub const REG_BINCU_SETUP: crate::Register = crate::Register::new(20, 0x3);
        pub const REG_BINCU_SETUP_R_BINCU_DATASIZE: crate::Field = crate::Field::new(2, 0, REG_BINCU_SETUP);

        pub const REG_BINCU_VAL: crate::Register = crate::Register::new(21, 0x7fff);
        pub const REG_BINCU_VAL_BINCU_COUNTER_I: crate::Field = crate::Field::new(15, 0, REG_BINCU_VAL);

        pub const REG_FILT: crate::Register = crate::Register::new(22, 0xf);
        pub const REG_FILT_R_FILTER_MODE: crate::Field = crate::Field::new(4, 0, REG_FILT);

        pub const REG_STATUS: crate::Register = crate::Register::new(24, 0x1);
        pub const REG_STATUS_R_FILTER_DONE: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const HW_UDMA_FILTER_BASE: usize = 0x50110000;
    }

    pub mod udma_scif {
        pub const UDMA_SCIF_NUMREGS: usize = 13;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_STATUS: crate::Register = crate::Register::new(8, 0x1);
        pub const REG_STATUS_STATUS_I: crate::Field = crate::Field::new(1, 0, REG_STATUS);

        pub const REG_SCIF_SETUP: crate::Register = crate::Register::new(9, 0xffffc33f);
        pub const REG_SCIF_SETUP_R_SCIF_PARITY_EN: crate::Field = crate::Field::new(1, 0, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_BITS: crate::Field = crate::Field::new(2, 1, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_STOP_BITS: crate::Field = crate::Field::new(1, 3, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN: crate::Field = crate::Field::new(1, 4, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO: crate::Field = crate::Field::new(1, 5, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_EN_TX: crate::Field = crate::Field::new(1, 8, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_EN_RX: crate::Field = crate::Field::new(1, 9, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_CLKSEL: crate::Field = crate::Field::new(2, 14, REG_SCIF_SETUP);
        pub const REG_SCIF_SETUP_R_SCIF_DIV: crate::Field = crate::Field::new(16, 16, REG_SCIF_SETUP);

        pub const REG_ERROR: crate::Register = crate::Register::new(10, 0x3);
        pub const REG_ERROR_R_ERR_OVERFLOW: crate::Field = crate::Field::new(1, 0, REG_ERROR);
        pub const REG_ERROR_R_ERR_PARITY: crate::Field = crate::Field::new(1, 1, REG_ERROR);

        pub const REG_IRQ_EN: crate::Register = crate::Register::new(11, 0x3);
        pub const REG_IRQ_EN_R_SCIF_RX_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_IRQ_EN);
        pub const REG_IRQ_EN_R_SCIF_ERR_IRQ_EN: crate::Field = crate::Field::new(1, 1, REG_IRQ_EN);

        pub const REG_VALID: crate::Register = crate::Register::new(12, 0x1);
        pub const REG_VALID_R_SCIF_RX_DATA_VALID: crate::Field = crate::Field::new(1, 0, REG_VALID);

        pub const REG_DATA: crate::Register = crate::Register::new(13, 0xff);
        pub const REG_DATA_R_SCIF_RX_DATA: crate::Field = crate::Field::new(8, 0, REG_DATA);

        pub const REG_SCIF_ETU: crate::Register = crate::Register::new(14, 0xffff);
        pub const REG_SCIF_ETU_R_SCIF_ETU: crate::Field = crate::Field::new(16, 0, REG_SCIF_ETU);

        pub const HW_UDMA_SCIF_BASE: usize = 0x50111000;
    }

    pub mod udma_spis_0 {
        pub const UDMA_SPIS_0_NUMREGS: usize = 12;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_SPIS_SETUP: crate::Register = crate::Register::new(8, 0x3);
        pub const REG_SPIS_SETUP_CFGCPOL: crate::Field = crate::Field::new(1, 0, REG_SPIS_SETUP);
        pub const REG_SPIS_SETUP_CFGCPHA: crate::Field = crate::Field::new(1, 1, REG_SPIS_SETUP);

        pub const REG_SEOT_CNT: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_SEOT_CNT_SR_SEOT_CNT: crate::Field = crate::Field::new(16, 0, REG_SEOT_CNT);

        pub const REG_SPIS_IRQ_EN: crate::Register = crate::Register::new(10, 0x1);
        pub const REG_SPIS_IRQ_EN_SEOT_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_SPIS_IRQ_EN);

        pub const REG_SPIS_RXCNT: crate::Register = crate::Register::new(11, 0xffff);
        pub const REG_SPIS_RXCNT_CFGRXCNT: crate::Field = crate::Field::new(16, 0, REG_SPIS_RXCNT);

        pub const REG_SPIS_TXCNT: crate::Register = crate::Register::new(12, 0xffff);
        pub const REG_SPIS_TXCNT_CFGTXCNT: crate::Field = crate::Field::new(16, 0, REG_SPIS_TXCNT);

        pub const REG_SPIS_DMCNT: crate::Register = crate::Register::new(13, 0xffff);
        pub const REG_SPIS_DMCNT_CFGDMCNT: crate::Field = crate::Field::new(16, 0, REG_SPIS_DMCNT);

        pub const HW_UDMA_SPIS_0_BASE: usize = 0x50112000;
    }

    pub mod udma_spis_1 {
        pub const UDMA_SPIS_1_NUMREGS: usize = 12;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x51);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 6, REG_RX_CFG);

        pub const REG_TX_SADDR: crate::Register = crate::Register::new(4, 0xfff);
        pub const REG_TX_SADDR_R_TX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_TX_SADDR);

        pub const REG_TX_SIZE: crate::Register = crate::Register::new(5, 0xffff);
        pub const REG_TX_SIZE_R_TX_SIZE: crate::Field = crate::Field::new(16, 0, REG_TX_SIZE);

        pub const REG_TX_CFG: crate::Register = crate::Register::new(6, 0x51);
        pub const REG_TX_CFG_R_TX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_EN: crate::Field = crate::Field::new(1, 4, REG_TX_CFG);
        pub const REG_TX_CFG_R_TX_CLR: crate::Field = crate::Field::new(1, 6, REG_TX_CFG);

        pub const REG_SPIS_SETUP: crate::Register = crate::Register::new(8, 0x3);
        pub const REG_SPIS_SETUP_CFGCPOL: crate::Field = crate::Field::new(1, 0, REG_SPIS_SETUP);
        pub const REG_SPIS_SETUP_CFGCPHA: crate::Field = crate::Field::new(1, 1, REG_SPIS_SETUP);

        pub const REG_SEOT_CNT: crate::Register = crate::Register::new(9, 0xffff);
        pub const REG_SEOT_CNT_SR_SEOT_CNT: crate::Field = crate::Field::new(16, 0, REG_SEOT_CNT);

        pub const REG_SPIS_IRQ_EN: crate::Register = crate::Register::new(10, 0x1);
        pub const REG_SPIS_IRQ_EN_SEOT_IRQ_EN: crate::Field = crate::Field::new(1, 0, REG_SPIS_IRQ_EN);

        pub const REG_SPIS_RXCNT: crate::Register = crate::Register::new(11, 0xffff);
        pub const REG_SPIS_RXCNT_CFGRXCNT: crate::Field = crate::Field::new(16, 0, REG_SPIS_RXCNT);

        pub const REG_SPIS_TXCNT: crate::Register = crate::Register::new(12, 0xffff);
        pub const REG_SPIS_TXCNT_CFGTXCNT: crate::Field = crate::Field::new(16, 0, REG_SPIS_TXCNT);

        pub const REG_SPIS_DMCNT: crate::Register = crate::Register::new(13, 0xffff);
        pub const REG_SPIS_DMCNT_CFGDMCNT: crate::Field = crate::Field::new(16, 0, REG_SPIS_DMCNT);

        pub const HW_UDMA_SPIS_1_BASE: usize = 0x50113000;
    }

    pub mod udma_adc {
        pub const UDMA_ADC_NUMREGS: usize = 4;

        pub const REG_RX_SADDR: crate::Register = crate::Register::new(0, 0xfff);
        pub const REG_RX_SADDR_R_RX_STARTADDR: crate::Field = crate::Field::new(12, 0, REG_RX_SADDR);

        pub const REG_RX_SIZE: crate::Register = crate::Register::new(1, 0xffff);
        pub const REG_RX_SIZE_R_RX_SIZE: crate::Field = crate::Field::new(16, 0, REG_RX_SIZE);

        pub const REG_RX_CFG: crate::Register = crate::Register::new(2, 0x31);
        pub const REG_RX_CFG_R_RX_CONTINUOUS: crate::Field = crate::Field::new(1, 0, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_EN: crate::Field = crate::Field::new(1, 4, REG_RX_CFG);
        pub const REG_RX_CFG_R_RX_CLR: crate::Field = crate::Field::new(1, 5, REG_RX_CFG);

        pub const REG_CR_ADC: crate::Register = crate::Register::new(4, 0xfffffff);
        pub const REG_CR_ADC_CR_ADC: crate::Field = crate::Field::new(28, 0, REG_CR_ADC);

        pub const HW_UDMA_ADC_BASE: usize = 0x50114000;
    }

    pub mod bio_fifo0 {
        pub const BIO_FIFO0_NUMREGS: usize = 6;

        pub const SFR_FLEVEL: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL0: crate::Field = crate::Field::new(4, 0, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL1: crate::Field = crate::Field::new(4, 4, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL2: crate::Field = crate::Field::new(4, 8, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL3: crate::Field = crate::Field::new(4, 12, SFR_FLEVEL);

        pub const SFR_TXF0: crate::Register = crate::Register::new(4, 0xffffffff);
        pub const SFR_TXF0_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF0);

        pub const SFR_RXF0: crate::Register = crate::Register::new(8, 0xffffffff);
        pub const SFR_RXF0_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF0);

        pub const SFR_EVENT_SET: crate::Register = crate::Register::new(14, 0xffffff);
        pub const SFR_EVENT_SET_SFR_EVENT_SET: crate::Field = crate::Field::new(24, 0, SFR_EVENT_SET);

        pub const SFR_EVENT_CLR: crate::Register = crate::Register::new(15, 0xffffff);
        pub const SFR_EVENT_CLR_SFR_EVENT_CLR: crate::Field = crate::Field::new(24, 0, SFR_EVENT_CLR);

        pub const SFR_EVENT_STATUS: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_EVENT_STATUS_SFR_EVENT_STATUS: crate::Field = crate::Field::new(32, 0, SFR_EVENT_STATUS);

        pub const HW_BIO_FIFO0_BASE: usize = 0x50129000;
    }

    pub mod bio_fifo1 {
        pub const BIO_FIFO1_NUMREGS: usize = 6;

        pub const SFR_FLEVEL: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL0: crate::Field = crate::Field::new(4, 0, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL1: crate::Field = crate::Field::new(4, 4, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL2: crate::Field = crate::Field::new(4, 8, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL3: crate::Field = crate::Field::new(4, 12, SFR_FLEVEL);

        pub const SFR_TXF1: crate::Register = crate::Register::new(5, 0xffffffff);
        pub const SFR_TXF1_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF1);

        pub const SFR_RXF1: crate::Register = crate::Register::new(9, 0xffffffff);
        pub const SFR_RXF1_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF1);

        pub const SFR_EVENT_SET: crate::Register = crate::Register::new(14, 0xffffff);
        pub const SFR_EVENT_SET_SFR_EVENT_SET: crate::Field = crate::Field::new(24, 0, SFR_EVENT_SET);

        pub const SFR_EVENT_CLR: crate::Register = crate::Register::new(15, 0xffffff);
        pub const SFR_EVENT_CLR_SFR_EVENT_CLR: crate::Field = crate::Field::new(24, 0, SFR_EVENT_CLR);

        pub const SFR_EVENT_STATUS: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_EVENT_STATUS_SFR_EVENT_STATUS: crate::Field = crate::Field::new(32, 0, SFR_EVENT_STATUS);

        pub const HW_BIO_FIFO1_BASE: usize = 0x5012a000;
    }

    pub mod bio_fifo2 {
        pub const BIO_FIFO2_NUMREGS: usize = 6;

        pub const SFR_FLEVEL: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL0: crate::Field = crate::Field::new(4, 0, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL1: crate::Field = crate::Field::new(4, 4, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL2: crate::Field = crate::Field::new(4, 8, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL3: crate::Field = crate::Field::new(4, 12, SFR_FLEVEL);

        pub const SFR_TXF2: crate::Register = crate::Register::new(6, 0xffffffff);
        pub const SFR_TXF2_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF2);

        pub const SFR_RXF2: crate::Register = crate::Register::new(10, 0xffffffff);
        pub const SFR_RXF2_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF2);

        pub const SFR_EVENT_SET: crate::Register = crate::Register::new(14, 0xffffff);
        pub const SFR_EVENT_SET_SFR_EVENT_SET: crate::Field = crate::Field::new(24, 0, SFR_EVENT_SET);

        pub const SFR_EVENT_CLR: crate::Register = crate::Register::new(15, 0xffffff);
        pub const SFR_EVENT_CLR_SFR_EVENT_CLR: crate::Field = crate::Field::new(24, 0, SFR_EVENT_CLR);

        pub const SFR_EVENT_STATUS: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_EVENT_STATUS_SFR_EVENT_STATUS: crate::Field = crate::Field::new(32, 0, SFR_EVENT_STATUS);

        pub const HW_BIO_FIFO2_BASE: usize = 0x5012b000;
    }

    pub mod bio_fifo3 {
        pub const BIO_FIFO3_NUMREGS: usize = 6;

        pub const SFR_FLEVEL: crate::Register = crate::Register::new(3, 0xffff);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL0: crate::Field = crate::Field::new(4, 0, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL1: crate::Field = crate::Field::new(4, 4, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL2: crate::Field = crate::Field::new(4, 8, SFR_FLEVEL);
        pub const SFR_FLEVEL_PCLK_REGFIFO_LEVEL3: crate::Field = crate::Field::new(4, 12, SFR_FLEVEL);

        pub const SFR_TXF3: crate::Register = crate::Register::new(7, 0xffffffff);
        pub const SFR_TXF3_FDIN: crate::Field = crate::Field::new(32, 0, SFR_TXF3);

        pub const SFR_RXF3: crate::Register = crate::Register::new(11, 0xffffffff);
        pub const SFR_RXF3_FDOUT: crate::Field = crate::Field::new(32, 0, SFR_RXF3);

        pub const SFR_EVENT_SET: crate::Register = crate::Register::new(14, 0xffffff);
        pub const SFR_EVENT_SET_SFR_EVENT_SET: crate::Field = crate::Field::new(24, 0, SFR_EVENT_SET);

        pub const SFR_EVENT_CLR: crate::Register = crate::Register::new(15, 0xffffff);
        pub const SFR_EVENT_CLR_SFR_EVENT_CLR: crate::Field = crate::Field::new(24, 0, SFR_EVENT_CLR);

        pub const SFR_EVENT_STATUS: crate::Register = crate::Register::new(16, 0xffffffff);
        pub const SFR_EVENT_STATUS_SFR_EVENT_STATUS: crate::Field = crate::Field::new(32, 0, SFR_EVENT_STATUS);

        pub const HW_BIO_FIFO3_BASE: usize = 0x5012c000;
    }
}

// Litex auto-generated constants
pub const LITEX_CONFIG_CLOCK_FREQUENCY: usize = 800000000;
pub const LITEX_CONFIG_CPU_TYPE_NONE: &str = "None";
pub const LITEX_CONFIG_CPU_VARIANT_STANDARD: &str = "None";
pub const LITEX_CONFIG_CPU_HUMAN_NAME: &str = "Unknown";
pub const LITEX_CONFIG_BIOS_NO_BUILD_TIME: &str = "None";
pub const LITEX_CONFIG_CSR_DATA_WIDTH: usize = 32;
pub const LITEX_CONFIG_CSR_ALIGNMENT: usize = 32;
pub const LITEX_CONFIG_BUS_STANDARD: &str = "AXI-LITE";
pub const LITEX_CONFIG_BUS_DATA_WIDTH: usize = 32;
pub const LITEX_CONFIG_BUS_ADDRESS_WIDTH: usize = 32;
pub const LITEX_CONFIG_BUS_BURSTING: usize = 0;
pub const LITEX_CONFIG_CLOCK_FREQUENCY_X: usize = 800000000;
pub const LITEX_CONFIG_CPU_HAS_INTERRUPT: &str = "None";
pub const LITEX_CONFIG_CPU_RESET_ADDR: usize = 1610612736;
pub const LITEX_CONFIG_CPU_HAS_DCACHE: &str = "None";
pub const LITEX_CONFIG_CPU_HAS_ICACHE: &str = "None";
pub const LITEX_CONFIG_CPU_TYPE_VEXRISCV_AXI: &str = "None";
pub const LITEX_CONFIG_CPU_VARIANT_STANDARD_X: &str = "None";
pub const LITEX_CONFIG_CPU_HUMAN_NAME_X: &str = "VexRiscvAxi4";
pub const LITEX_CONFIG_CPU_NOP: &str = "nop";
pub const LITEX_IFSUB_EV_QFCIRQ: usize = 32;
pub const LITEX_IFSUB_EV_MDMAIRQ: usize = 33;
pub const LITEX_IFSUB_EV_MBOX_IRQ_AVAILABLE: usize = 34;
pub const LITEX_IFSUB_EV_MBOX_IRQ_ABORT_INIT: usize = 35;
pub const LITEX_IFSUB_EV_MBOX_IRQ_DONE: usize = 36;
pub const LITEX_IFSUB_EV_MBOX_IRQ_ERROR: usize = 37;
pub const LITEX_IFSUB_EV_AOWKUPINT: usize = 47;
pub const LITEX_IFSUB_EV_TRNG_DONE: usize = 48;
pub const LITEX_IFSUB_EV_AES_DONE: usize = 49;
pub const LITEX_IFSUB_EV_PKE_DONE: usize = 50;
pub const LITEX_IFSUB_EV_HASH_DONE: usize = 51;
pub const LITEX_IFSUB_EV_ALU_DONE: usize = 52;
pub const LITEX_IFSUB_EV_SDMA_ICHDONE: usize = 53;
pub const LITEX_IFSUB_EV_SDMA_SCHDONE: usize = 54;
pub const LITEX_IFSUB_EV_SDMA_XCHDONE: usize = 55;
pub const LITEX_IFSUB_EV_UART0_RX: usize = 80;
pub const LITEX_IFSUB_EV_UART0_TX: usize = 81;
pub const LITEX_IFSUB_EV_UART0_RX_CHAR: usize = 82;
pub const LITEX_IFSUB_EV_UART0_ERR: usize = 83;
pub const LITEX_IFSUB_EV_UART1_RX: usize = 84;
pub const LITEX_IFSUB_EV_UART1_TX: usize = 85;
pub const LITEX_IFSUB_EV_UART1_RX_CHAR: usize = 86;
pub const LITEX_IFSUB_EV_UART1_ERR: usize = 87;
pub const LITEX_IFSUB_EV_UART2_RX: usize = 88;
pub const LITEX_IFSUB_EV_UART2_TX: usize = 89;
pub const LITEX_IFSUB_EV_UART2_RX_CHAR: usize = 90;
pub const LITEX_IFSUB_EV_UART2_ERR: usize = 91;
pub const LITEX_IFSUB_EV_UART3_RX: usize = 92;
pub const LITEX_IFSUB_EV_UART3_TX: usize = 93;
pub const LITEX_IFSUB_EV_UART3_RX_CHAR: usize = 94;
pub const LITEX_IFSUB_EV_UART3_ERR: usize = 95;
pub const LITEX_IFSUB_EV_SPIM0_RX: usize = 96;
pub const LITEX_IFSUB_EV_SPIM0_TX: usize = 97;
pub const LITEX_IFSUB_EV_SPIM0_CMD: usize = 98;
pub const LITEX_IFSUB_EV_SPIM0_EOT: usize = 99;
pub const LITEX_IFSUB_EV_SPIM1_RX: usize = 100;
pub const LITEX_IFSUB_EV_SPIM1_TX: usize = 101;
pub const LITEX_IFSUB_EV_SPIM1_CMD: usize = 102;
pub const LITEX_IFSUB_EV_SPIM1_EOT: usize = 103;
pub const LITEX_IFSUB_EV_SPIM2_RX: usize = 104;
pub const LITEX_IFSUB_EV_SPIM2_TX: usize = 105;
pub const LITEX_IFSUB_EV_SPIM2_CMD: usize = 106;
pub const LITEX_IFSUB_EV_SPIM2_EOT: usize = 107;
pub const LITEX_IFSUB_EV_SPIM3_RX: usize = 108;
pub const LITEX_IFSUB_EV_SPIM3_TX: usize = 109;
pub const LITEX_IFSUB_EV_SPIM3_CMD: usize = 110;
pub const LITEX_IFSUB_EV_SPIM3_EOT: usize = 111;
pub const LITEX_IFSUB_EV_I2C0_RX: usize = 112;
pub const LITEX_IFSUB_EV_I2C0_TX: usize = 113;
pub const LITEX_IFSUB_EV_I2C0_CMD: usize = 114;
pub const LITEX_IFSUB_EV_I2C0_EOT: usize = 115;
pub const LITEX_IFSUB_EV_I2C1_RX: usize = 116;
pub const LITEX_IFSUB_EV_I2C1_TX: usize = 117;
pub const LITEX_IFSUB_EV_I2C1_CMD: usize = 118;
pub const LITEX_IFSUB_EV_I2C1_EOT: usize = 119;
pub const LITEX_IFSUB_EV_I2C2_RX: usize = 120;
pub const LITEX_IFSUB_EV_I2C2_TX: usize = 121;
pub const LITEX_IFSUB_EV_I2C2_CMD: usize = 122;
pub const LITEX_IFSUB_EV_I2C2_EOT: usize = 123;
pub const LITEX_IFSUB_EV_I2C3_RX: usize = 124;
pub const LITEX_IFSUB_EV_I2C3_TX: usize = 125;
pub const LITEX_IFSUB_EV_I2C3_CMD: usize = 126;
pub const LITEX_IFSUB_EV_I2C3_EOT: usize = 127;
pub const LITEX_IFSUB_EV_SDIO_RX: usize = 128;
pub const LITEX_IFSUB_EV_SDIO_TX: usize = 129;
pub const LITEX_IFSUB_EV_SDIO_EOT: usize = 130;
pub const LITEX_IFSUB_EV_SDIO_ERR: usize = 131;
pub const LITEX_IFSUB_EV_I2S_RX: usize = 132;
pub const LITEX_IFSUB_EV_I2S_TX: usize = 133;
pub const LITEX_IFSUB_EV_CAM_RX: usize = 136;
pub const LITEX_IFSUB_EV_ADC_RX: usize = 137;
pub const LITEX_IFSUB_EV_FILTER_EOT: usize = 140;
pub const LITEX_IFSUB_EV_FILTER_ACT: usize = 141;
pub const LITEX_IFSUB_EV_SCIF_RX: usize = 144;
pub const LITEX_IFSUB_EV_SCIF_TX: usize = 145;
pub const LITEX_IFSUB_EV_SCIF_RX_CHAR: usize = 146;
pub const LITEX_IFSUB_EV_SCIF_ERR: usize = 147;
pub const LITEX_IFSUB_EV_SPIS0_RX: usize = 148;
pub const LITEX_IFSUB_EV_SPIS0_TX: usize = 149;
pub const LITEX_IFSUB_EV_SPIS0_EOT: usize = 150;
pub const LITEX_IFSUB_EV_SPIS1_RX: usize = 152;
pub const LITEX_IFSUB_EV_SPIS1_TX: usize = 153;
pub const LITEX_IFSUB_EV_SPIS1_EOT: usize = 154;
pub const LITEX_IFSUB_EV_PWM0_EV: usize = 156;
pub const LITEX_IFSUB_EV_PWM1_EV: usize = 157;
pub const LITEX_IFSUB_EV_PWM2_EV: usize = 158;
pub const LITEX_IFSUB_EV_PWM3_EV: usize = 159;
pub const LITEX_IFSUB_EV_IOXIRQ: usize = 160;
pub const LITEX_IFSUB_EV_USBC: usize = 161;
pub const LITEX_IFSUB_EV_SDDCIRQ: usize = 162;
pub const LITEX_IFSUB_EV_PIOIRQ0: usize = 163;
pub const LITEX_IFSUB_EV_PIOIRQ1: usize = 164;
pub const LITEX_IFSUB_EV_PIOIRQ2: usize = 165;
pub const LITEX_IFSUB_EV_PIOIRQ3: usize = 166;
pub const LITEX_IFSUB_EV_I2C0_NACK: usize = 200;
pub const LITEX_IFSUB_EV_I2C1_NACK: usize = 201;
pub const LITEX_IFSUB_EV_I2C2_NACK: usize = 202;
pub const LITEX_IFSUB_EV_I2C3_NACK: usize = 203;
pub const LITEX_IFSUB_EV_I2C0_ERR: usize = 204;
pub const LITEX_IFSUB_EV_I2C1_ERR: usize = 205;
pub const LITEX_IFSUB_EV_I2C2_ERR: usize = 206;
pub const LITEX_IFSUB_EV_I2C3_ERR: usize = 207;
pub const LITEX_IFSUB_EV_CORESUBERR: usize = 208;
pub const LITEX_IFSUB_EV_SCEERR: usize = 209;
pub const LITEX_IFSUB_EV_IFSUBERR: usize = 210;
pub const LITEX_IFSUB_EV_SECIRQ: usize = 211;
pub const LITEX_IFSUB_EV_SEC0: usize = 240;
pub const LITEX_CONFIG_CSR_DATA_WIDTH_X: usize = 32;
pub const LITEX_CONFIG_CSR_ALIGNMENT_X: usize = 32;
pub const LITEX_CONFIG_BUS_STANDARD_X: &str = "AXI-LITE";
pub const LITEX_CONFIG_BUS_DATA_WIDTH_X: usize = 32;
pub const LITEX_CONFIG_BUS_ADDRESS_WIDTH_X: usize = 32;
pub const LITEX_CONFIG_BUS_BURSTING_X: usize = 0;
pub const LITEX_IRQARRAY0_INTERRUPT: usize = 0;
pub const LITEX_IRQARRAY1_INTERRUPT: usize = 1;
pub const LITEX_IRQARRAY10_INTERRUPT: usize = 10;
pub const LITEX_IRQARRAY11_INTERRUPT: usize = 11;
pub const LITEX_IRQARRAY12_INTERRUPT: usize = 12;
pub const LITEX_IRQARRAY13_INTERRUPT: usize = 13;
pub const LITEX_IRQARRAY14_INTERRUPT: usize = 14;
pub const LITEX_IRQARRAY15_INTERRUPT: usize = 15;
pub const LITEX_IRQARRAY16_INTERRUPT: usize = 16;
pub const LITEX_IRQARRAY17_INTERRUPT: usize = 17;
pub const LITEX_IRQARRAY18_INTERRUPT: usize = 18;
pub const LITEX_IRQARRAY19_INTERRUPT: usize = 19;
pub const LITEX_IRQARRAY2_INTERRUPT: usize = 2;
pub const LITEX_IRQARRAY3_INTERRUPT: usize = 3;
pub const LITEX_IRQARRAY4_INTERRUPT: usize = 4;
pub const LITEX_IRQARRAY5_INTERRUPT: usize = 5;
pub const LITEX_IRQARRAY6_INTERRUPT: usize = 6;
pub const LITEX_IRQARRAY7_INTERRUPT: usize = 7;
pub const LITEX_IRQARRAY8_INTERRUPT: usize = 8;
pub const LITEX_IRQARRAY9_INTERRUPT: usize = 9;
pub const LITEX_MAILBOX_INTERRUPT: usize = 22;
pub const LITEX_MB_CLIENT_INTERRUPT: usize = 23;
pub const LITEX_SUSRES_INTERRUPT: usize = 21;
pub const LITEX_TICKTIMER_INTERRUPT: usize = 20;
pub const LITEX_TIMER0_INTERRUPT: usize = 30;


#[cfg(test)]
mod tests {

    #[test]
    #[ignore]
    fn compile_check_identifier_mem_csr() {
        use super::*;
        let mut identifier_mem_csr = CSR::new(HW_IDENTIFIER_MEM_BASE as *mut u32);

        let foo = identifier_mem_csr.r(utra::identifier_mem::IDENTIFIER_MEM);
        identifier_mem_csr.wo(utra::identifier_mem::IDENTIFIER_MEM, foo);
        let bar = identifier_mem_csr.rf(utra::identifier_mem::IDENTIFIER_MEM_IDENTIFIER_MEM);
        identifier_mem_csr.rmwf(utra::identifier_mem::IDENTIFIER_MEM_IDENTIFIER_MEM, bar);
        let mut baz = identifier_mem_csr.zf(utra::identifier_mem::IDENTIFIER_MEM_IDENTIFIER_MEM, bar);
        baz |= identifier_mem_csr.ms(utra::identifier_mem::IDENTIFIER_MEM_IDENTIFIER_MEM, 1);
        identifier_mem_csr.wfo(utra::identifier_mem::IDENTIFIER_MEM_IDENTIFIER_MEM, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_main_csr() {
        use super::*;
        let mut main_csr = CSR::new(HW_MAIN_BASE as *mut u32);

        let foo = main_csr.r(utra::main::DONE);
        main_csr.wo(utra::main::DONE, foo);
        let bar = main_csr.rf(utra::main::DONE_DONE);
        main_csr.rmwf(utra::main::DONE_DONE, bar);
        let mut baz = main_csr.zf(utra::main::DONE_DONE, bar);
        baz |= main_csr.ms(utra::main::DONE_DONE, 1);
        main_csr.wfo(utra::main::DONE_DONE, baz);

        let foo = main_csr.r(utra::main::IRQTEST0);
        main_csr.wo(utra::main::IRQTEST0, foo);
        let bar = main_csr.rf(utra::main::IRQTEST0_TRIGGER);
        main_csr.rmwf(utra::main::IRQTEST0_TRIGGER, bar);
        let mut baz = main_csr.zf(utra::main::IRQTEST0_TRIGGER, bar);
        baz |= main_csr.ms(utra::main::IRQTEST0_TRIGGER, 1);
        main_csr.wfo(utra::main::IRQTEST0_TRIGGER, baz);

        let foo = main_csr.r(utra::main::REPORT);
        main_csr.wo(utra::main::REPORT, foo);
        let bar = main_csr.rf(utra::main::REPORT_REPORT);
        main_csr.rmwf(utra::main::REPORT_REPORT, bar);
        let mut baz = main_csr.zf(utra::main::REPORT_REPORT, bar);
        baz |= main_csr.ms(utra::main::REPORT_REPORT, 1);
        main_csr.wfo(utra::main::REPORT_REPORT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_d11ctime_csr() {
        use super::*;
        let mut d11ctime_csr = CSR::new(HW_D11CTIME_BASE as *mut u32);

        let foo = d11ctime_csr.r(utra::d11ctime::CONTROL);
        d11ctime_csr.wo(utra::d11ctime::CONTROL, foo);
        let bar = d11ctime_csr.rf(utra::d11ctime::CONTROL_COUNT);
        d11ctime_csr.rmwf(utra::d11ctime::CONTROL_COUNT, bar);
        let mut baz = d11ctime_csr.zf(utra::d11ctime::CONTROL_COUNT, bar);
        baz |= d11ctime_csr.ms(utra::d11ctime::CONTROL_COUNT, 1);
        d11ctime_csr.wfo(utra::d11ctime::CONTROL_COUNT, baz);

        let foo = d11ctime_csr.r(utra::d11ctime::HEARTBEAT);
        d11ctime_csr.wo(utra::d11ctime::HEARTBEAT, foo);
        let bar = d11ctime_csr.rf(utra::d11ctime::HEARTBEAT_BEAT);
        d11ctime_csr.rmwf(utra::d11ctime::HEARTBEAT_BEAT, bar);
        let mut baz = d11ctime_csr.zf(utra::d11ctime::HEARTBEAT_BEAT, bar);
        baz |= d11ctime_csr.ms(utra::d11ctime::HEARTBEAT_BEAT, 1);
        d11ctime_csr.wfo(utra::d11ctime::HEARTBEAT_BEAT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_susres_csr() {
        use super::*;
        let mut susres_csr = CSR::new(HW_SUSRES_BASE as *mut u32);

        let foo = susres_csr.r(utra::susres::CONTROL);
        susres_csr.wo(utra::susres::CONTROL, foo);
        let bar = susres_csr.rf(utra::susres::CONTROL_PAUSE);
        susres_csr.rmwf(utra::susres::CONTROL_PAUSE, bar);
        let mut baz = susres_csr.zf(utra::susres::CONTROL_PAUSE, bar);
        baz |= susres_csr.ms(utra::susres::CONTROL_PAUSE, 1);
        susres_csr.wfo(utra::susres::CONTROL_PAUSE, baz);
        let bar = susres_csr.rf(utra::susres::CONTROL_LOAD);
        susres_csr.rmwf(utra::susres::CONTROL_LOAD, bar);
        let mut baz = susres_csr.zf(utra::susres::CONTROL_LOAD, bar);
        baz |= susres_csr.ms(utra::susres::CONTROL_LOAD, 1);
        susres_csr.wfo(utra::susres::CONTROL_LOAD, baz);

        let foo = susres_csr.r(utra::susres::RESUME_TIME1);
        susres_csr.wo(utra::susres::RESUME_TIME1, foo);
        let bar = susres_csr.rf(utra::susres::RESUME_TIME1_RESUME_TIME);
        susres_csr.rmwf(utra::susres::RESUME_TIME1_RESUME_TIME, bar);
        let mut baz = susres_csr.zf(utra::susres::RESUME_TIME1_RESUME_TIME, bar);
        baz |= susres_csr.ms(utra::susres::RESUME_TIME1_RESUME_TIME, 1);
        susres_csr.wfo(utra::susres::RESUME_TIME1_RESUME_TIME, baz);

        let foo = susres_csr.r(utra::susres::RESUME_TIME0);
        susres_csr.wo(utra::susres::RESUME_TIME0, foo);
        let bar = susres_csr.rf(utra::susres::RESUME_TIME0_RESUME_TIME);
        susres_csr.rmwf(utra::susres::RESUME_TIME0_RESUME_TIME, bar);
        let mut baz = susres_csr.zf(utra::susres::RESUME_TIME0_RESUME_TIME, bar);
        baz |= susres_csr.ms(utra::susres::RESUME_TIME0_RESUME_TIME, 1);
        susres_csr.wfo(utra::susres::RESUME_TIME0_RESUME_TIME, baz);

        let foo = susres_csr.r(utra::susres::TIME1);
        susres_csr.wo(utra::susres::TIME1, foo);
        let bar = susres_csr.rf(utra::susres::TIME1_TIME);
        susres_csr.rmwf(utra::susres::TIME1_TIME, bar);
        let mut baz = susres_csr.zf(utra::susres::TIME1_TIME, bar);
        baz |= susres_csr.ms(utra::susres::TIME1_TIME, 1);
        susres_csr.wfo(utra::susres::TIME1_TIME, baz);

        let foo = susres_csr.r(utra::susres::TIME0);
        susres_csr.wo(utra::susres::TIME0, foo);
        let bar = susres_csr.rf(utra::susres::TIME0_TIME);
        susres_csr.rmwf(utra::susres::TIME0_TIME, bar);
        let mut baz = susres_csr.zf(utra::susres::TIME0_TIME, bar);
        baz |= susres_csr.ms(utra::susres::TIME0_TIME, 1);
        susres_csr.wfo(utra::susres::TIME0_TIME, baz);

        let foo = susres_csr.r(utra::susres::STATUS);
        susres_csr.wo(utra::susres::STATUS, foo);
        let bar = susres_csr.rf(utra::susres::STATUS_PAUSED);
        susres_csr.rmwf(utra::susres::STATUS_PAUSED, bar);
        let mut baz = susres_csr.zf(utra::susres::STATUS_PAUSED, bar);
        baz |= susres_csr.ms(utra::susres::STATUS_PAUSED, 1);
        susres_csr.wfo(utra::susres::STATUS_PAUSED, baz);

        let foo = susres_csr.r(utra::susres::STATE);
        susres_csr.wo(utra::susres::STATE, foo);
        let bar = susres_csr.rf(utra::susres::STATE_RESUME);
        susres_csr.rmwf(utra::susres::STATE_RESUME, bar);
        let mut baz = susres_csr.zf(utra::susres::STATE_RESUME, bar);
        baz |= susres_csr.ms(utra::susres::STATE_RESUME, 1);
        susres_csr.wfo(utra::susres::STATE_RESUME, baz);
        let bar = susres_csr.rf(utra::susres::STATE_WAS_FORCED);
        susres_csr.rmwf(utra::susres::STATE_WAS_FORCED, bar);
        let mut baz = susres_csr.zf(utra::susres::STATE_WAS_FORCED, bar);
        baz |= susres_csr.ms(utra::susres::STATE_WAS_FORCED, 1);
        susres_csr.wfo(utra::susres::STATE_WAS_FORCED, baz);

        let foo = susres_csr.r(utra::susres::INTERRUPT);
        susres_csr.wo(utra::susres::INTERRUPT, foo);
        let bar = susres_csr.rf(utra::susres::INTERRUPT_INTERRUPT);
        susres_csr.rmwf(utra::susres::INTERRUPT_INTERRUPT, bar);
        let mut baz = susres_csr.zf(utra::susres::INTERRUPT_INTERRUPT, bar);
        baz |= susres_csr.ms(utra::susres::INTERRUPT_INTERRUPT, 1);
        susres_csr.wfo(utra::susres::INTERRUPT_INTERRUPT, baz);

        let foo = susres_csr.r(utra::susres::EV_STATUS);
        susres_csr.wo(utra::susres::EV_STATUS, foo);
        let bar = susres_csr.rf(utra::susres::EV_STATUS_SOFT_INT);
        susres_csr.rmwf(utra::susres::EV_STATUS_SOFT_INT, bar);
        let mut baz = susres_csr.zf(utra::susres::EV_STATUS_SOFT_INT, bar);
        baz |= susres_csr.ms(utra::susres::EV_STATUS_SOFT_INT, 1);
        susres_csr.wfo(utra::susres::EV_STATUS_SOFT_INT, baz);

        let foo = susres_csr.r(utra::susres::EV_PENDING);
        susres_csr.wo(utra::susres::EV_PENDING, foo);
        let bar = susres_csr.rf(utra::susres::EV_PENDING_SOFT_INT);
        susres_csr.rmwf(utra::susres::EV_PENDING_SOFT_INT, bar);
        let mut baz = susres_csr.zf(utra::susres::EV_PENDING_SOFT_INT, bar);
        baz |= susres_csr.ms(utra::susres::EV_PENDING_SOFT_INT, 1);
        susres_csr.wfo(utra::susres::EV_PENDING_SOFT_INT, baz);

        let foo = susres_csr.r(utra::susres::EV_ENABLE);
        susres_csr.wo(utra::susres::EV_ENABLE, foo);
        let bar = susres_csr.rf(utra::susres::EV_ENABLE_SOFT_INT);
        susres_csr.rmwf(utra::susres::EV_ENABLE_SOFT_INT, bar);
        let mut baz = susres_csr.zf(utra::susres::EV_ENABLE_SOFT_INT, bar);
        baz |= susres_csr.ms(utra::susres::EV_ENABLE_SOFT_INT, 1);
        susres_csr.wfo(utra::susres::EV_ENABLE_SOFT_INT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_coreuser_csr() {
        use super::*;
        let mut coreuser_csr = CSR::new(HW_COREUSER_BASE as *mut u32);

        let foo = coreuser_csr.r(utra::coreuser::CONTROL);
        coreuser_csr.wo(utra::coreuser::CONTROL, foo);
        let bar = coreuser_csr.rf(utra::coreuser::CONTROL_ENABLE);
        coreuser_csr.rmwf(utra::coreuser::CONTROL_ENABLE, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::CONTROL_ENABLE, bar);
        baz |= coreuser_csr.ms(utra::coreuser::CONTROL_ENABLE, 1);
        coreuser_csr.wfo(utra::coreuser::CONTROL_ENABLE, baz);
        let bar = coreuser_csr.rf(utra::coreuser::CONTROL_INVERT_PRIV);
        coreuser_csr.rmwf(utra::coreuser::CONTROL_INVERT_PRIV, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::CONTROL_INVERT_PRIV, bar);
        baz |= coreuser_csr.ms(utra::coreuser::CONTROL_INVERT_PRIV, 1);
        coreuser_csr.wfo(utra::coreuser::CONTROL_INVERT_PRIV, baz);

        let foo = coreuser_csr.r(utra::coreuser::STATUS);
        coreuser_csr.wo(utra::coreuser::STATUS, foo);
        let bar = coreuser_csr.rf(utra::coreuser::STATUS_COREUSER);
        coreuser_csr.rmwf(utra::coreuser::STATUS_COREUSER, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::STATUS_COREUSER, bar);
        baz |= coreuser_csr.ms(utra::coreuser::STATUS_COREUSER, 1);
        coreuser_csr.wfo(utra::coreuser::STATUS_COREUSER, baz);
        let bar = coreuser_csr.rf(utra::coreuser::STATUS_MM);
        coreuser_csr.rmwf(utra::coreuser::STATUS_MM, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::STATUS_MM, bar);
        baz |= coreuser_csr.ms(utra::coreuser::STATUS_MM, 1);
        coreuser_csr.wfo(utra::coreuser::STATUS_MM, baz);

        let foo = coreuser_csr.r(utra::coreuser::MAP_LO);
        coreuser_csr.wo(utra::coreuser::MAP_LO, foo);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_LO_LUT0);
        coreuser_csr.rmwf(utra::coreuser::MAP_LO_LUT0, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_LO_LUT0, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_LO_LUT0, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_LO_LUT0, baz);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_LO_LUT1);
        coreuser_csr.rmwf(utra::coreuser::MAP_LO_LUT1, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_LO_LUT1, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_LO_LUT1, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_LO_LUT1, baz);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_LO_LUT2);
        coreuser_csr.rmwf(utra::coreuser::MAP_LO_LUT2, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_LO_LUT2, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_LO_LUT2, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_LO_LUT2, baz);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_LO_LUT3);
        coreuser_csr.rmwf(utra::coreuser::MAP_LO_LUT3, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_LO_LUT3, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_LO_LUT3, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_LO_LUT3, baz);

        let foo = coreuser_csr.r(utra::coreuser::MAP_HI);
        coreuser_csr.wo(utra::coreuser::MAP_HI, foo);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_HI_LUT4);
        coreuser_csr.rmwf(utra::coreuser::MAP_HI_LUT4, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_HI_LUT4, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_HI_LUT4, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_HI_LUT4, baz);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_HI_LUT5);
        coreuser_csr.rmwf(utra::coreuser::MAP_HI_LUT5, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_HI_LUT5, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_HI_LUT5, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_HI_LUT5, baz);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_HI_LUT6);
        coreuser_csr.rmwf(utra::coreuser::MAP_HI_LUT6, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_HI_LUT6, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_HI_LUT6, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_HI_LUT6, baz);
        let bar = coreuser_csr.rf(utra::coreuser::MAP_HI_LUT7);
        coreuser_csr.rmwf(utra::coreuser::MAP_HI_LUT7, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::MAP_HI_LUT7, bar);
        baz |= coreuser_csr.ms(utra::coreuser::MAP_HI_LUT7, 1);
        coreuser_csr.wfo(utra::coreuser::MAP_HI_LUT7, baz);

        let foo = coreuser_csr.r(utra::coreuser::USERVALUE);
        coreuser_csr.wo(utra::coreuser::USERVALUE, foo);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER0);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER0, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER0, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER0, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER0, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER1);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER1, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER1, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER1, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER1, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER2);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER2, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER2, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER2, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER2, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER3);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER3, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER3, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER3, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER3, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER4);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER4, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER4, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER4, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER4, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER5);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER5, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER5, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER5, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER5, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER6);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER6, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER6, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER6, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER6, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_USER7);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_USER7, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_USER7, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_USER7, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_USER7, baz);
        let bar = coreuser_csr.rf(utra::coreuser::USERVALUE_DEFAULT);
        coreuser_csr.rmwf(utra::coreuser::USERVALUE_DEFAULT, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::USERVALUE_DEFAULT, bar);
        baz |= coreuser_csr.ms(utra::coreuser::USERVALUE_DEFAULT, 1);
        coreuser_csr.wfo(utra::coreuser::USERVALUE_DEFAULT, baz);

        let foo = coreuser_csr.r(utra::coreuser::PROTECT);
        coreuser_csr.wo(utra::coreuser::PROTECT, foo);
        let bar = coreuser_csr.rf(utra::coreuser::PROTECT_PROTECT);
        coreuser_csr.rmwf(utra::coreuser::PROTECT_PROTECT, bar);
        let mut baz = coreuser_csr.zf(utra::coreuser::PROTECT_PROTECT, bar);
        baz |= coreuser_csr.ms(utra::coreuser::PROTECT_PROTECT, 1);
        coreuser_csr.wfo(utra::coreuser::PROTECT_PROTECT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_csrtest_csr() {
        use super::*;
        let mut csrtest_csr = CSR::new(HW_CSRTEST_BASE as *mut u32);

        let foo = csrtest_csr.r(utra::csrtest::WTEST);
        csrtest_csr.wo(utra::csrtest::WTEST, foo);
        let bar = csrtest_csr.rf(utra::csrtest::WTEST_WTEST);
        csrtest_csr.rmwf(utra::csrtest::WTEST_WTEST, bar);
        let mut baz = csrtest_csr.zf(utra::csrtest::WTEST_WTEST, bar);
        baz |= csrtest_csr.ms(utra::csrtest::WTEST_WTEST, 1);
        csrtest_csr.wfo(utra::csrtest::WTEST_WTEST, baz);

        let foo = csrtest_csr.r(utra::csrtest::RTEST);
        csrtest_csr.wo(utra::csrtest::RTEST, foo);
        let bar = csrtest_csr.rf(utra::csrtest::RTEST_RTEST);
        csrtest_csr.rmwf(utra::csrtest::RTEST_RTEST, bar);
        let mut baz = csrtest_csr.zf(utra::csrtest::RTEST_RTEST, bar);
        baz |= csrtest_csr.ms(utra::csrtest::RTEST_RTEST, 1);
        csrtest_csr.wfo(utra::csrtest::RTEST_RTEST, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray0_csr() {
        use super::*;
        let mut irqarray0_csr = CSR::new(HW_IRQARRAY0_BASE as *mut u32);

        let foo = irqarray0_csr.r(utra::irqarray0::EV_SOFT);
        irqarray0_csr.wo(utra::irqarray0::EV_SOFT, foo);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_SOFT_TRIGGER);
        irqarray0_csr.rmwf(utra::irqarray0::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_SOFT_TRIGGER, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_SOFT_TRIGGER, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_SOFT_TRIGGER, baz);

        let foo = irqarray0_csr.r(utra::irqarray0::EV_EDGE_TRIGGERED);
        irqarray0_csr.wo(utra::irqarray0::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray0_csr.r(utra::irqarray0::EV_POLARITY);
        irqarray0_csr.wo(utra::irqarray0::EV_POLARITY, foo);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_POLARITY_RISING);
        irqarray0_csr.rmwf(utra::irqarray0::EV_POLARITY_RISING, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_POLARITY_RISING, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_POLARITY_RISING, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_POLARITY_RISING, baz);

        let foo = irqarray0_csr.r(utra::irqarray0::EV_STATUS);
        irqarray0_csr.wo(utra::irqarray0::EV_STATUS, foo);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_MDMAIRQ_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_MDMAIRQ_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_MDMAIRQ_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_MDMAIRQ_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_MDMAIRQ_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S1);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S1, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S1, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S1, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S1, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S2);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S2, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S2, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S2, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S2, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S3);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S3, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S3, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S3, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S3, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_PIOIRQ0_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_PIOIRQ0_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_PIOIRQ0_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_PIOIRQ0_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_PIOIRQ1_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_PIOIRQ1_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_PIOIRQ1_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_PIOIRQ1_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_PIOIRQ2_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_PIOIRQ2_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_PIOIRQ2_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_PIOIRQ2_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_PIOIRQ3_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_PIOIRQ3_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_PIOIRQ3_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_PIOIRQ3_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S8);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S8, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S8, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S8, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S8, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S9);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S9, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S9, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S9, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S9, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S10);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S10, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S10, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S10, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S10, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S11);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S11, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S11, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S11, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S11, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S12);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S12, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S12, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S12, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S12, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S13);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S13, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S13, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S13, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S13, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S14);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S14, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S14, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S14, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S14, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_STATUS_NC_B0S15);
        irqarray0_csr.rmwf(utra::irqarray0::EV_STATUS_NC_B0S15, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_STATUS_NC_B0S15, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_STATUS_NC_B0S15, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_STATUS_NC_B0S15, baz);

        let foo = irqarray0_csr.r(utra::irqarray0::EV_PENDING);
        irqarray0_csr.wo(utra::irqarray0::EV_PENDING, foo);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_MDMAIRQ_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_MDMAIRQ_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_MDMAIRQ_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_MDMAIRQ_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_MDMAIRQ_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S1);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S1, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S1, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S1, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S1, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S2);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S2, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S2, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S2, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S2, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S3);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S3, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S3, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S3, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S3, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_PIOIRQ0_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_PIOIRQ0_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_PIOIRQ0_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_PIOIRQ0_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_PIOIRQ1_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_PIOIRQ1_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_PIOIRQ1_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_PIOIRQ1_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_PIOIRQ2_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_PIOIRQ2_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_PIOIRQ2_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_PIOIRQ2_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_PIOIRQ3_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_PIOIRQ3_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_PIOIRQ3_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_PIOIRQ3_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S8);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S8, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S8, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S8, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S8, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S9);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S9, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S9, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S9, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S9, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S10);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S10, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S10, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S10, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S10, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S11);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S11, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S11, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S11, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S11, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S12);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S12, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S12, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S12, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S12, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S13);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S13, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S13, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S13, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S13, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S14);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S14, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S14, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S14, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S14, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_PENDING_NC_B0S15);
        irqarray0_csr.rmwf(utra::irqarray0::EV_PENDING_NC_B0S15, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_PENDING_NC_B0S15, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_PENDING_NC_B0S15, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_PENDING_NC_B0S15, baz);

        let foo = irqarray0_csr.r(utra::irqarray0::EV_ENABLE);
        irqarray0_csr.wo(utra::irqarray0::EV_ENABLE, foo);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_MDMAIRQ_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_MDMAIRQ_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_MDMAIRQ_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_MDMAIRQ_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_MDMAIRQ_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S1);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S1, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S1, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S1, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S1, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S2);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S2, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S2, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S2, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S2, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S3);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S3, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S3, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S3, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S3, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_PIOIRQ0_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_PIOIRQ0_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_PIOIRQ0_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_PIOIRQ0_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_PIOIRQ1_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_PIOIRQ1_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_PIOIRQ1_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_PIOIRQ1_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_PIOIRQ2_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_PIOIRQ2_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_PIOIRQ2_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_PIOIRQ2_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_PIOIRQ3_DUPE);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_PIOIRQ3_DUPE, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_PIOIRQ3_DUPE, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_PIOIRQ3_DUPE, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S8);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S8, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S8, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S8, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S8, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S9);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S9, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S9, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S9, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S9, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S10);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S10, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S10, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S10, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S10, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S11);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S11, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S11, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S11, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S11, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S12);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S12, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S12, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S12, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S12, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S13);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S13, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S13, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S13, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S13, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S14);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S14, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S14, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S14, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S14, baz);
        let bar = irqarray0_csr.rf(utra::irqarray0::EV_ENABLE_NC_B0S15);
        irqarray0_csr.rmwf(utra::irqarray0::EV_ENABLE_NC_B0S15, bar);
        let mut baz = irqarray0_csr.zf(utra::irqarray0::EV_ENABLE_NC_B0S15, bar);
        baz |= irqarray0_csr.ms(utra::irqarray0::EV_ENABLE_NC_B0S15, 1);
        irqarray0_csr.wfo(utra::irqarray0::EV_ENABLE_NC_B0S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray1_csr() {
        use super::*;
        let mut irqarray1_csr = CSR::new(HW_IRQARRAY1_BASE as *mut u32);

        let foo = irqarray1_csr.r(utra::irqarray1::EV_SOFT);
        irqarray1_csr.wo(utra::irqarray1::EV_SOFT, foo);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_SOFT_TRIGGER);
        irqarray1_csr.rmwf(utra::irqarray1::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_SOFT_TRIGGER, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_SOFT_TRIGGER, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_SOFT_TRIGGER, baz);

        let foo = irqarray1_csr.r(utra::irqarray1::EV_EDGE_TRIGGERED);
        irqarray1_csr.wo(utra::irqarray1::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray1_csr.rmwf(utra::irqarray1::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray1_csr.r(utra::irqarray1::EV_POLARITY);
        irqarray1_csr.wo(utra::irqarray1::EV_POLARITY, foo);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_POLARITY_RISING);
        irqarray1_csr.rmwf(utra::irqarray1::EV_POLARITY_RISING, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_POLARITY_RISING, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_POLARITY_RISING, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_POLARITY_RISING, baz);

        let foo = irqarray1_csr.r(utra::irqarray1::EV_STATUS);
        irqarray1_csr.wo(utra::irqarray1::EV_STATUS, foo);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_USBC_DUPE);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_USBC_DUPE, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_USBC_DUPE, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_USBC_DUPE, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_USBC_DUPE, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S1);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S1, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S1, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S1, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S1, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S2);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S2, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S2, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S2, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S2, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S3);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S3, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S3, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S3, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S3, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S4);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S4, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S4, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S4, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S4, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S5);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S5, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S5, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S5, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S5, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S6);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S6, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S6, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S6, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S6, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S7);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S7, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S7, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S7, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S7, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S8);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S8, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S8, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S8, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S8, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S9);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S9, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S9, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S9, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S9, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S10);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S10, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S10, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S10, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S10, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S11);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S11, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S11, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S11, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S11, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S12);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S12, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S12, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S12, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S12, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S13);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S13, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S13, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S13, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S13, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S14);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S14, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S14, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S14, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S14, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_STATUS_NC_B1S15);
        irqarray1_csr.rmwf(utra::irqarray1::EV_STATUS_NC_B1S15, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_STATUS_NC_B1S15, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_STATUS_NC_B1S15, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_STATUS_NC_B1S15, baz);

        let foo = irqarray1_csr.r(utra::irqarray1::EV_PENDING);
        irqarray1_csr.wo(utra::irqarray1::EV_PENDING, foo);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_USBC_DUPE);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_USBC_DUPE, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_USBC_DUPE, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_USBC_DUPE, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_USBC_DUPE, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S1);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S1, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S1, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S1, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S1, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S2);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S2, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S2, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S2, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S2, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S3);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S3, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S3, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S3, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S3, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S4);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S4, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S4, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S4, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S4, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S5);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S5, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S5, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S5, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S5, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S6);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S6, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S6, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S6, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S6, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S7);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S7, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S7, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S7, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S7, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S8);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S8, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S8, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S8, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S8, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S9);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S9, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S9, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S9, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S9, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S10);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S10, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S10, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S10, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S10, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S11);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S11, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S11, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S11, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S11, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S12);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S12, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S12, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S12, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S12, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S13);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S13, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S13, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S13, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S13, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S14);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S14, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S14, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S14, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S14, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_PENDING_NC_B1S15);
        irqarray1_csr.rmwf(utra::irqarray1::EV_PENDING_NC_B1S15, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_PENDING_NC_B1S15, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_PENDING_NC_B1S15, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_PENDING_NC_B1S15, baz);

        let foo = irqarray1_csr.r(utra::irqarray1::EV_ENABLE);
        irqarray1_csr.wo(utra::irqarray1::EV_ENABLE, foo);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_USBC_DUPE);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_USBC_DUPE, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_USBC_DUPE, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_USBC_DUPE, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_USBC_DUPE, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S1);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S1, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S1, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S1, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S1, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S2);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S2, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S2, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S2, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S2, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S3);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S3, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S3, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S3, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S3, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S4);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S4, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S4, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S4, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S4, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S5);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S5, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S5, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S5, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S5, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S6);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S6, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S6, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S6, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S6, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S7);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S7, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S7, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S7, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S7, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S8);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S8, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S8, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S8, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S8, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S9);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S9, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S9, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S9, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S9, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S10);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S10, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S10, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S10, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S10, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S11);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S11, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S11, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S11, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S11, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S12);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S12, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S12, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S12, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S12, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S13);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S13, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S13, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S13, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S13, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S14);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S14, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S14, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S14, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S14, baz);
        let bar = irqarray1_csr.rf(utra::irqarray1::EV_ENABLE_NC_B1S15);
        irqarray1_csr.rmwf(utra::irqarray1::EV_ENABLE_NC_B1S15, bar);
        let mut baz = irqarray1_csr.zf(utra::irqarray1::EV_ENABLE_NC_B1S15, bar);
        baz |= irqarray1_csr.ms(utra::irqarray1::EV_ENABLE_NC_B1S15, 1);
        irqarray1_csr.wfo(utra::irqarray1::EV_ENABLE_NC_B1S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray10_csr() {
        use super::*;
        let mut irqarray10_csr = CSR::new(HW_IRQARRAY10_BASE as *mut u32);

        let foo = irqarray10_csr.r(utra::irqarray10::EV_SOFT);
        irqarray10_csr.wo(utra::irqarray10::EV_SOFT, foo);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_SOFT_TRIGGER);
        irqarray10_csr.rmwf(utra::irqarray10::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_SOFT_TRIGGER, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_SOFT_TRIGGER, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_SOFT_TRIGGER, baz);

        let foo = irqarray10_csr.r(utra::irqarray10::EV_EDGE_TRIGGERED);
        irqarray10_csr.wo(utra::irqarray10::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray10_csr.rmwf(utra::irqarray10::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray10_csr.r(utra::irqarray10::EV_POLARITY);
        irqarray10_csr.wo(utra::irqarray10::EV_POLARITY, foo);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_POLARITY_RISING);
        irqarray10_csr.rmwf(utra::irqarray10::EV_POLARITY_RISING, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_POLARITY_RISING, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_POLARITY_RISING, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_POLARITY_RISING, baz);

        let foo = irqarray10_csr.r(utra::irqarray10::EV_STATUS);
        irqarray10_csr.wo(utra::irqarray10::EV_STATUS, foo);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_IOXIRQ);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_IOXIRQ, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_IOXIRQ, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_IOXIRQ, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_IOXIRQ, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_USBC);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_USBC, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_USBC, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_USBC, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_USBC, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_SDDCIRQ);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_SDDCIRQ, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_SDDCIRQ, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_SDDCIRQ, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_SDDCIRQ, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_PIOIRQ0);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_PIOIRQ0, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_PIOIRQ0, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_PIOIRQ0, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_PIOIRQ0, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_PIOIRQ1);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_PIOIRQ1, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_PIOIRQ1, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_PIOIRQ1, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_PIOIRQ1, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_PIOIRQ2);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_PIOIRQ2, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_PIOIRQ2, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_PIOIRQ2, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_PIOIRQ2, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_PIOIRQ3);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_PIOIRQ3, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_PIOIRQ3, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_PIOIRQ3, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_PIOIRQ3, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S7);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S7, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S7, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S7, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S7, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S8);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S8, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S8, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S8, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S8, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S9);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S9, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S9, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S9, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S9, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S10);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S10, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S10, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S10, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S10, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S11);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S11, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S11, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S11, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S11, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S12);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S12, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S12, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S12, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S12, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S13);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S13, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S13, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S13, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S13, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S14);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S14, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S14, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S14, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S14, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_STATUS_NC_B10S15);
        irqarray10_csr.rmwf(utra::irqarray10::EV_STATUS_NC_B10S15, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_STATUS_NC_B10S15, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_STATUS_NC_B10S15, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_STATUS_NC_B10S15, baz);

        let foo = irqarray10_csr.r(utra::irqarray10::EV_PENDING);
        irqarray10_csr.wo(utra::irqarray10::EV_PENDING, foo);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_IOXIRQ);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_IOXIRQ, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_IOXIRQ, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_IOXIRQ, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_IOXIRQ, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_USBC);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_USBC, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_USBC, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_USBC, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_USBC, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_SDDCIRQ);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_SDDCIRQ, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_SDDCIRQ, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_SDDCIRQ, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_SDDCIRQ, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_PIOIRQ0);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_PIOIRQ0, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_PIOIRQ0, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_PIOIRQ0, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_PIOIRQ0, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_PIOIRQ1);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_PIOIRQ1, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_PIOIRQ1, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_PIOIRQ1, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_PIOIRQ1, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_PIOIRQ2);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_PIOIRQ2, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_PIOIRQ2, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_PIOIRQ2, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_PIOIRQ2, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_PIOIRQ3);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_PIOIRQ3, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_PIOIRQ3, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_PIOIRQ3, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_PIOIRQ3, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S7);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S7, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S7, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S7, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S7, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S8);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S8, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S8, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S8, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S8, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S9);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S9, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S9, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S9, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S9, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S10);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S10, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S10, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S10, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S10, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S11);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S11, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S11, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S11, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S11, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S12);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S12, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S12, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S12, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S12, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S13);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S13, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S13, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S13, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S13, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S14);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S14, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S14, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S14, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S14, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_PENDING_NC_B10S15);
        irqarray10_csr.rmwf(utra::irqarray10::EV_PENDING_NC_B10S15, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_PENDING_NC_B10S15, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_PENDING_NC_B10S15, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_PENDING_NC_B10S15, baz);

        let foo = irqarray10_csr.r(utra::irqarray10::EV_ENABLE);
        irqarray10_csr.wo(utra::irqarray10::EV_ENABLE, foo);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_IOXIRQ);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_IOXIRQ, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_IOXIRQ, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_IOXIRQ, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_IOXIRQ, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_USBC);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_USBC, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_USBC, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_USBC, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_USBC, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_SDDCIRQ);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_SDDCIRQ, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_SDDCIRQ, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_SDDCIRQ, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_SDDCIRQ, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_PIOIRQ0);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_PIOIRQ0, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_PIOIRQ0, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_PIOIRQ0, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_PIOIRQ0, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_PIOIRQ1);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_PIOIRQ1, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_PIOIRQ1, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_PIOIRQ1, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_PIOIRQ1, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_PIOIRQ2);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_PIOIRQ2, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_PIOIRQ2, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_PIOIRQ2, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_PIOIRQ2, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_PIOIRQ3);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_PIOIRQ3, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_PIOIRQ3, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_PIOIRQ3, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_PIOIRQ3, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S7);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S7, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S7, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S7, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S7, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S8);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S8, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S8, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S8, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S8, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S9);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S9, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S9, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S9, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S9, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S10);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S10, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S10, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S10, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S10, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S11);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S11, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S11, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S11, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S11, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S12);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S12, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S12, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S12, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S12, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S13);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S13, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S13, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S13, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S13, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S14);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S14, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S14, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S14, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S14, baz);
        let bar = irqarray10_csr.rf(utra::irqarray10::EV_ENABLE_NC_B10S15);
        irqarray10_csr.rmwf(utra::irqarray10::EV_ENABLE_NC_B10S15, bar);
        let mut baz = irqarray10_csr.zf(utra::irqarray10::EV_ENABLE_NC_B10S15, bar);
        baz |= irqarray10_csr.ms(utra::irqarray10::EV_ENABLE_NC_B10S15, 1);
        irqarray10_csr.wfo(utra::irqarray10::EV_ENABLE_NC_B10S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray11_csr() {
        use super::*;
        let mut irqarray11_csr = CSR::new(HW_IRQARRAY11_BASE as *mut u32);

        let foo = irqarray11_csr.r(utra::irqarray11::EV_SOFT);
        irqarray11_csr.wo(utra::irqarray11::EV_SOFT, foo);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_SOFT_TRIGGER);
        irqarray11_csr.rmwf(utra::irqarray11::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_SOFT_TRIGGER, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_SOFT_TRIGGER, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_SOFT_TRIGGER, baz);

        let foo = irqarray11_csr.r(utra::irqarray11::EV_EDGE_TRIGGERED);
        irqarray11_csr.wo(utra::irqarray11::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray11_csr.r(utra::irqarray11::EV_POLARITY);
        irqarray11_csr.wo(utra::irqarray11::EV_POLARITY, foo);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_POLARITY_RISING);
        irqarray11_csr.rmwf(utra::irqarray11::EV_POLARITY_RISING, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_POLARITY_RISING, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_POLARITY_RISING, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_POLARITY_RISING, baz);

        let foo = irqarray11_csr.r(utra::irqarray11::EV_STATUS);
        irqarray11_csr.wo(utra::irqarray11::EV_STATUS, foo);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_I2S_RX_DUPE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_I2S_RX_DUPE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_I2S_RX_DUPE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_I2S_RX_DUPE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_I2S_RX_DUPE, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_I2S_TX_DUPE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_I2S_TX_DUPE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_I2S_TX_DUPE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_I2S_TX_DUPE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_I2S_TX_DUPE, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S2);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S2, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S2, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S2, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S2, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S3);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S3, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S3, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S3, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S3, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S4);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S4, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S4, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S4, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S4, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S5);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S5, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S5, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S5, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S5, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S6);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S6, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S6, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S6, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S6, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S7);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S7, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S7, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S7, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S7, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S8);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S8, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S8, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S8, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S8, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S9);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S9, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S9, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S9, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S9, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S10);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S10, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S10, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S10, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S10, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S11);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S11, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S11, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S11, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S11, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S12);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S12, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S12, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S12, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S12, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S13);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S13, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S13, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S13, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S13, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S14);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S14, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S14, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S14, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S14, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_STATUS_NC_B11S15);
        irqarray11_csr.rmwf(utra::irqarray11::EV_STATUS_NC_B11S15, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_STATUS_NC_B11S15, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_STATUS_NC_B11S15, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_STATUS_NC_B11S15, baz);

        let foo = irqarray11_csr.r(utra::irqarray11::EV_PENDING);
        irqarray11_csr.wo(utra::irqarray11::EV_PENDING, foo);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_I2S_RX_DUPE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_I2S_RX_DUPE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_I2S_RX_DUPE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_I2S_RX_DUPE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_I2S_RX_DUPE, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_I2S_TX_DUPE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_I2S_TX_DUPE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_I2S_TX_DUPE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_I2S_TX_DUPE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_I2S_TX_DUPE, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S2);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S2, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S2, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S2, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S2, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S3);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S3, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S3, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S3, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S3, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S4);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S4, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S4, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S4, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S4, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S5);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S5, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S5, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S5, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S5, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S6);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S6, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S6, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S6, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S6, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S7);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S7, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S7, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S7, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S7, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S8);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S8, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S8, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S8, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S8, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S9);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S9, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S9, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S9, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S9, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S10);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S10, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S10, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S10, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S10, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S11);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S11, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S11, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S11, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S11, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S12);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S12, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S12, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S12, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S12, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S13);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S13, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S13, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S13, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S13, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S14);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S14, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S14, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S14, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S14, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_PENDING_NC_B11S15);
        irqarray11_csr.rmwf(utra::irqarray11::EV_PENDING_NC_B11S15, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_PENDING_NC_B11S15, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_PENDING_NC_B11S15, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_PENDING_NC_B11S15, baz);

        let foo = irqarray11_csr.r(utra::irqarray11::EV_ENABLE);
        irqarray11_csr.wo(utra::irqarray11::EV_ENABLE, foo);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_I2S_RX_DUPE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_I2S_RX_DUPE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_I2S_RX_DUPE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_I2S_RX_DUPE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_I2S_RX_DUPE, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_I2S_TX_DUPE);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_I2S_TX_DUPE, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_I2S_TX_DUPE, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_I2S_TX_DUPE, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_I2S_TX_DUPE, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S2);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S2, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S2, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S2, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S2, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S3);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S3, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S3, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S3, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S3, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S4);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S4, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S4, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S4, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S4, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S5);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S5, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S5, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S5, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S5, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S6);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S6, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S6, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S6, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S6, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S7);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S7, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S7, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S7, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S7, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S8);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S8, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S8, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S8, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S8, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S9);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S9, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S9, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S9, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S9, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S10);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S10, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S10, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S10, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S10, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S11);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S11, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S11, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S11, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S11, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S12);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S12, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S12, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S12, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S12, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S13);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S13, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S13, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S13, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S13, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S14);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S14, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S14, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S14, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S14, baz);
        let bar = irqarray11_csr.rf(utra::irqarray11::EV_ENABLE_NC_B11S15);
        irqarray11_csr.rmwf(utra::irqarray11::EV_ENABLE_NC_B11S15, bar);
        let mut baz = irqarray11_csr.zf(utra::irqarray11::EV_ENABLE_NC_B11S15, bar);
        baz |= irqarray11_csr.ms(utra::irqarray11::EV_ENABLE_NC_B11S15, 1);
        irqarray11_csr.wfo(utra::irqarray11::EV_ENABLE_NC_B11S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray12_csr() {
        use super::*;
        let mut irqarray12_csr = CSR::new(HW_IRQARRAY12_BASE as *mut u32);

        let foo = irqarray12_csr.r(utra::irqarray12::EV_SOFT);
        irqarray12_csr.wo(utra::irqarray12::EV_SOFT, foo);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_SOFT_TRIGGER);
        irqarray12_csr.rmwf(utra::irqarray12::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_SOFT_TRIGGER, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_SOFT_TRIGGER, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_SOFT_TRIGGER, baz);

        let foo = irqarray12_csr.r(utra::irqarray12::EV_EDGE_TRIGGERED);
        irqarray12_csr.wo(utra::irqarray12::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray12_csr.rmwf(utra::irqarray12::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray12_csr.r(utra::irqarray12::EV_POLARITY);
        irqarray12_csr.wo(utra::irqarray12::EV_POLARITY, foo);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_POLARITY_RISING);
        irqarray12_csr.rmwf(utra::irqarray12::EV_POLARITY_RISING, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_POLARITY_RISING, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_POLARITY_RISING, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_POLARITY_RISING, baz);

        let foo = irqarray12_csr.r(utra::irqarray12::EV_STATUS);
        irqarray12_csr.wo(utra::irqarray12::EV_STATUS, foo);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S0);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S0, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S0, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S0, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S0, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S1);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S1, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S1, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S1, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S1, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S2);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S2, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S2, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S2, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S2, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S3);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S3, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S3, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S3, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S3, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S4);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S4, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S4, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S4, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S4, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S5);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S5, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S5, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S5, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S5, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S6);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S6, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S6, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S6, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S6, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_NC_B12S7);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_NC_B12S7, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_NC_B12S7, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_NC_B12S7, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_NC_B12S7, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C0_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C0_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C0_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C0_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C0_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C1_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C1_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C1_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C1_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C1_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C2_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C2_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C2_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C2_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C2_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C3_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C3_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C3_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C3_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C3_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C0_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C0_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C0_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C0_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C0_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C1_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C1_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C1_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C1_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C1_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C2_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C2_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C2_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C2_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C2_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_STATUS_I2C3_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_STATUS_I2C3_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_STATUS_I2C3_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_STATUS_I2C3_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_STATUS_I2C3_ERR, baz);

        let foo = irqarray12_csr.r(utra::irqarray12::EV_PENDING);
        irqarray12_csr.wo(utra::irqarray12::EV_PENDING, foo);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S0);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S0, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S0, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S0, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S0, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S1);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S1, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S1, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S1, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S1, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S2);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S2, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S2, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S2, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S2, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S3);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S3, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S3, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S3, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S3, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S4);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S4, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S4, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S4, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S4, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S5);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S5, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S5, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S5, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S5, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S6);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S6, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S6, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S6, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S6, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_NC_B12S7);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_NC_B12S7, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_NC_B12S7, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_NC_B12S7, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_NC_B12S7, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C0_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C0_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C0_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C0_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C0_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C1_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C1_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C1_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C1_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C1_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C2_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C2_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C2_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C2_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C2_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C3_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C3_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C3_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C3_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C3_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C0_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C0_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C0_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C0_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C0_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C1_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C1_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C1_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C1_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C1_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C2_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C2_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C2_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C2_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C2_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_PENDING_I2C3_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_PENDING_I2C3_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_PENDING_I2C3_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_PENDING_I2C3_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_PENDING_I2C3_ERR, baz);

        let foo = irqarray12_csr.r(utra::irqarray12::EV_ENABLE);
        irqarray12_csr.wo(utra::irqarray12::EV_ENABLE, foo);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S0);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S0, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S0, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S0, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S0, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S1);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S1, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S1, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S1, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S1, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S2);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S2, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S2, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S2, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S2, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S3);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S3, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S3, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S3, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S3, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S4);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S4, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S4, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S4, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S4, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S5);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S5, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S5, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S5, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S5, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S6);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S6, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S6, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S6, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S6, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_NC_B12S7);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_NC_B12S7, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_NC_B12S7, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_NC_B12S7, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_NC_B12S7, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C0_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C0_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C0_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C0_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C0_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C1_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C1_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C1_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C1_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C1_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C2_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C2_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C2_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C2_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C2_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C3_NACK);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C3_NACK, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C3_NACK, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C3_NACK, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C3_NACK, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C0_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C0_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C0_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C0_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C0_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C1_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C1_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C1_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C1_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C1_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C2_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C2_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C2_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C2_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C2_ERR, baz);
        let bar = irqarray12_csr.rf(utra::irqarray12::EV_ENABLE_I2C3_ERR);
        irqarray12_csr.rmwf(utra::irqarray12::EV_ENABLE_I2C3_ERR, bar);
        let mut baz = irqarray12_csr.zf(utra::irqarray12::EV_ENABLE_I2C3_ERR, bar);
        baz |= irqarray12_csr.ms(utra::irqarray12::EV_ENABLE_I2C3_ERR, 1);
        irqarray12_csr.wfo(utra::irqarray12::EV_ENABLE_I2C3_ERR, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray13_csr() {
        use super::*;
        let mut irqarray13_csr = CSR::new(HW_IRQARRAY13_BASE as *mut u32);

        let foo = irqarray13_csr.r(utra::irqarray13::EV_SOFT);
        irqarray13_csr.wo(utra::irqarray13::EV_SOFT, foo);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_SOFT_TRIGGER);
        irqarray13_csr.rmwf(utra::irqarray13::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_SOFT_TRIGGER, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_SOFT_TRIGGER, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_SOFT_TRIGGER, baz);

        let foo = irqarray13_csr.r(utra::irqarray13::EV_EDGE_TRIGGERED);
        irqarray13_csr.wo(utra::irqarray13::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray13_csr.rmwf(utra::irqarray13::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray13_csr.r(utra::irqarray13::EV_POLARITY);
        irqarray13_csr.wo(utra::irqarray13::EV_POLARITY, foo);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_POLARITY_RISING);
        irqarray13_csr.rmwf(utra::irqarray13::EV_POLARITY_RISING, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_POLARITY_RISING, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_POLARITY_RISING, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_POLARITY_RISING, baz);

        let foo = irqarray13_csr.r(utra::irqarray13::EV_STATUS);
        irqarray13_csr.wo(utra::irqarray13::EV_STATUS, foo);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_CORESUBERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_CORESUBERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_CORESUBERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_CORESUBERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_CORESUBERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_SCEERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_SCEERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_SCEERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_SCEERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_SCEERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_IFSUBERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_IFSUBERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_IFSUBERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_IFSUBERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_IFSUBERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_SECIRQ);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_SECIRQ, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_SECIRQ, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_SECIRQ, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_SECIRQ, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S4);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S4, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S4, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S4, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S4, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S5);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S5, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S5, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S5, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S5, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S6);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S6, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S6, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S6, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S6, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S7);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S7, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S7, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S7, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S7, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S8);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S8, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S8, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S8, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S8, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S9);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S9, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S9, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S9, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S9, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S10);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S10, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S10, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S10, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S10, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S11);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S11, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S11, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S11, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S11, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S12);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S12, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S12, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S12, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S12, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S13);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S13, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S13, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S13, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S13, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S14);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S14, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S14, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S14, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S14, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_STATUS_NC_B13S15);
        irqarray13_csr.rmwf(utra::irqarray13::EV_STATUS_NC_B13S15, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_STATUS_NC_B13S15, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_STATUS_NC_B13S15, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_STATUS_NC_B13S15, baz);

        let foo = irqarray13_csr.r(utra::irqarray13::EV_PENDING);
        irqarray13_csr.wo(utra::irqarray13::EV_PENDING, foo);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_CORESUBERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_CORESUBERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_CORESUBERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_CORESUBERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_CORESUBERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_SCEERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_SCEERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_SCEERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_SCEERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_SCEERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_IFSUBERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_IFSUBERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_IFSUBERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_IFSUBERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_IFSUBERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_SECIRQ);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_SECIRQ, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_SECIRQ, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_SECIRQ, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_SECIRQ, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S4);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S4, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S4, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S4, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S4, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S5);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S5, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S5, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S5, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S5, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S6);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S6, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S6, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S6, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S6, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S7);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S7, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S7, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S7, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S7, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S8);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S8, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S8, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S8, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S8, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S9);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S9, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S9, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S9, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S9, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S10);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S10, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S10, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S10, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S10, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S11);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S11, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S11, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S11, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S11, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S12);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S12, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S12, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S12, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S12, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S13);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S13, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S13, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S13, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S13, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S14);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S14, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S14, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S14, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S14, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_PENDING_NC_B13S15);
        irqarray13_csr.rmwf(utra::irqarray13::EV_PENDING_NC_B13S15, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_PENDING_NC_B13S15, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_PENDING_NC_B13S15, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_PENDING_NC_B13S15, baz);

        let foo = irqarray13_csr.r(utra::irqarray13::EV_ENABLE);
        irqarray13_csr.wo(utra::irqarray13::EV_ENABLE, foo);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_CORESUBERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_CORESUBERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_CORESUBERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_CORESUBERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_CORESUBERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_SCEERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_SCEERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_SCEERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_SCEERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_SCEERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_IFSUBERR);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_IFSUBERR, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_IFSUBERR, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_IFSUBERR, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_IFSUBERR, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_SECIRQ);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_SECIRQ, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_SECIRQ, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_SECIRQ, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_SECIRQ, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S4);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S4, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S4, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S4, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S4, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S5);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S5, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S5, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S5, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S5, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S6);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S6, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S6, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S6, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S6, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S7);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S7, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S7, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S7, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S7, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S8);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S8, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S8, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S8, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S8, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S9);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S9, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S9, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S9, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S9, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S10);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S10, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S10, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S10, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S10, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S11);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S11, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S11, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S11, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S11, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S12);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S12, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S12, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S12, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S12, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S13);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S13, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S13, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S13, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S13, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S14);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S14, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S14, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S14, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S14, baz);
        let bar = irqarray13_csr.rf(utra::irqarray13::EV_ENABLE_NC_B13S15);
        irqarray13_csr.rmwf(utra::irqarray13::EV_ENABLE_NC_B13S15, bar);
        let mut baz = irqarray13_csr.zf(utra::irqarray13::EV_ENABLE_NC_B13S15, bar);
        baz |= irqarray13_csr.ms(utra::irqarray13::EV_ENABLE_NC_B13S15, 1);
        irqarray13_csr.wfo(utra::irqarray13::EV_ENABLE_NC_B13S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray14_csr() {
        use super::*;
        let mut irqarray14_csr = CSR::new(HW_IRQARRAY14_BASE as *mut u32);

        let foo = irqarray14_csr.r(utra::irqarray14::EV_SOFT);
        irqarray14_csr.wo(utra::irqarray14::EV_SOFT, foo);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_SOFT_TRIGGER);
        irqarray14_csr.rmwf(utra::irqarray14::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_SOFT_TRIGGER, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_SOFT_TRIGGER, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_SOFT_TRIGGER, baz);

        let foo = irqarray14_csr.r(utra::irqarray14::EV_EDGE_TRIGGERED);
        irqarray14_csr.wo(utra::irqarray14::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray14_csr.r(utra::irqarray14::EV_POLARITY);
        irqarray14_csr.wo(utra::irqarray14::EV_POLARITY, foo);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_POLARITY_RISING);
        irqarray14_csr.rmwf(utra::irqarray14::EV_POLARITY_RISING, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_POLARITY_RISING, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_POLARITY_RISING, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_POLARITY_RISING, baz);

        let foo = irqarray14_csr.r(utra::irqarray14::EV_STATUS);
        irqarray14_csr.wo(utra::irqarray14::EV_STATUS, foo);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART2_RX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART2_RX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART2_RX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART2_RX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART2_RX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART2_TX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART2_TX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART2_TX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART2_TX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART2_TX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART2_RX_CHAR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART2_RX_CHAR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART2_RX_CHAR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART2_RX_CHAR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART2_RX_CHAR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART2_ERR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART2_ERR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART2_ERR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART2_ERR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART2_ERR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART3_RX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART3_RX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART3_RX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART3_RX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART3_RX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART3_TX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART3_TX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART3_TX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART3_TX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART3_TX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART3_RX_CHAR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART3_RX_CHAR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART3_RX_CHAR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART3_RX_CHAR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART3_RX_CHAR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_UART3_ERR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_UART3_ERR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_UART3_ERR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_UART3_ERR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_UART3_ERR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_TRNG_DONE_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_TRNG_DONE_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_TRNG_DONE_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_TRNG_DONE_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_TRNG_DONE_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S9);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S9, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S9, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S9, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S9, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S10);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S10, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S10, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S10, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S10, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S11);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S11, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S11, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S11, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S11, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S12);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S12, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S12, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S12, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S12, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S13);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S13, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S13, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S13, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S13, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S14);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S14, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S14, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S14, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S14, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_STATUS_NC_B14S15);
        irqarray14_csr.rmwf(utra::irqarray14::EV_STATUS_NC_B14S15, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_STATUS_NC_B14S15, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_STATUS_NC_B14S15, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_STATUS_NC_B14S15, baz);

        let foo = irqarray14_csr.r(utra::irqarray14::EV_PENDING);
        irqarray14_csr.wo(utra::irqarray14::EV_PENDING, foo);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART2_RX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART2_RX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART2_RX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART2_RX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART2_RX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART2_TX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART2_TX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART2_TX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART2_TX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART2_TX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART2_RX_CHAR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART2_RX_CHAR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART2_RX_CHAR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART2_RX_CHAR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART2_RX_CHAR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART2_ERR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART2_ERR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART2_ERR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART2_ERR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART2_ERR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART3_RX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART3_RX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART3_RX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART3_RX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART3_RX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART3_TX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART3_TX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART3_TX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART3_TX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART3_TX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART3_RX_CHAR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART3_RX_CHAR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART3_RX_CHAR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART3_RX_CHAR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART3_RX_CHAR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_UART3_ERR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_UART3_ERR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_UART3_ERR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_UART3_ERR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_UART3_ERR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_TRNG_DONE_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_TRNG_DONE_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_TRNG_DONE_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_TRNG_DONE_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_TRNG_DONE_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S9);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S9, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S9, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S9, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S9, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S10);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S10, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S10, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S10, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S10, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S11);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S11, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S11, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S11, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S11, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S12);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S12, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S12, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S12, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S12, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S13);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S13, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S13, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S13, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S13, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S14);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S14, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S14, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S14, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S14, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_PENDING_NC_B14S15);
        irqarray14_csr.rmwf(utra::irqarray14::EV_PENDING_NC_B14S15, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_PENDING_NC_B14S15, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_PENDING_NC_B14S15, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_PENDING_NC_B14S15, baz);

        let foo = irqarray14_csr.r(utra::irqarray14::EV_ENABLE);
        irqarray14_csr.wo(utra::irqarray14::EV_ENABLE, foo);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART2_RX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART2_RX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART2_RX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART2_RX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART2_RX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART2_TX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART2_TX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART2_TX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART2_TX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART2_TX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART2_RX_CHAR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART2_RX_CHAR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART2_RX_CHAR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART2_RX_CHAR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART2_RX_CHAR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART2_ERR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART2_ERR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART2_ERR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART2_ERR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART2_ERR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART3_RX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART3_RX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART3_RX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART3_RX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART3_RX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART3_TX_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART3_TX_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART3_TX_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART3_TX_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART3_TX_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART3_RX_CHAR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART3_RX_CHAR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART3_RX_CHAR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART3_RX_CHAR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART3_RX_CHAR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_UART3_ERR_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_UART3_ERR_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_UART3_ERR_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_UART3_ERR_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_UART3_ERR_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_TRNG_DONE_DUPE);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_TRNG_DONE_DUPE, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_TRNG_DONE_DUPE, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_TRNG_DONE_DUPE, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_TRNG_DONE_DUPE, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S9);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S9, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S9, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S9, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S9, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S10);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S10, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S10, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S10, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S10, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S11);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S11, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S11, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S11, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S11, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S12);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S12, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S12, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S12, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S12, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S13);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S13, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S13, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S13, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S13, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S14);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S14, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S14, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S14, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S14, baz);
        let bar = irqarray14_csr.rf(utra::irqarray14::EV_ENABLE_NC_B14S15);
        irqarray14_csr.rmwf(utra::irqarray14::EV_ENABLE_NC_B14S15, bar);
        let mut baz = irqarray14_csr.zf(utra::irqarray14::EV_ENABLE_NC_B14S15, bar);
        baz |= irqarray14_csr.ms(utra::irqarray14::EV_ENABLE_NC_B14S15, 1);
        irqarray14_csr.wfo(utra::irqarray14::EV_ENABLE_NC_B14S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray15_csr() {
        use super::*;
        let mut irqarray15_csr = CSR::new(HW_IRQARRAY15_BASE as *mut u32);

        let foo = irqarray15_csr.r(utra::irqarray15::EV_SOFT);
        irqarray15_csr.wo(utra::irqarray15::EV_SOFT, foo);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_SOFT_TRIGGER);
        irqarray15_csr.rmwf(utra::irqarray15::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_SOFT_TRIGGER, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_SOFT_TRIGGER, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_SOFT_TRIGGER, baz);

        let foo = irqarray15_csr.r(utra::irqarray15::EV_EDGE_TRIGGERED);
        irqarray15_csr.wo(utra::irqarray15::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray15_csr.rmwf(utra::irqarray15::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray15_csr.r(utra::irqarray15::EV_POLARITY);
        irqarray15_csr.wo(utra::irqarray15::EV_POLARITY, foo);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_POLARITY_RISING);
        irqarray15_csr.rmwf(utra::irqarray15::EV_POLARITY_RISING, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_POLARITY_RISING, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_POLARITY_RISING, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_POLARITY_RISING, baz);

        let foo = irqarray15_csr.r(utra::irqarray15::EV_STATUS);
        irqarray15_csr.wo(utra::irqarray15::EV_STATUS, foo);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_SEC0);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_SEC0, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_SEC0, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_SEC0, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_SEC0, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S1);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S1, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S1, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S1, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S1, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S2);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S2, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S2, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S2, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S2, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S3);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S3, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S3, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S3, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S3, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S4);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S4, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S4, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S4, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S4, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S5);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S5, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S5, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S5, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S5, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S6);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S6, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S6, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S6, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S6, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S7);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S7, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S7, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S7, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S7, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S8);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S8, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S8, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S8, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S8, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S9);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S9, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S9, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S9, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S9, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S10);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S10, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S10, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S10, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S10, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S11);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S11, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S11, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S11, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S11, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S12);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S12, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S12, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S12, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S12, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S13);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S13, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S13, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S13, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S13, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S14);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S14, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S14, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S14, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S14, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_STATUS_NC_B15S15);
        irqarray15_csr.rmwf(utra::irqarray15::EV_STATUS_NC_B15S15, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_STATUS_NC_B15S15, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_STATUS_NC_B15S15, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_STATUS_NC_B15S15, baz);

        let foo = irqarray15_csr.r(utra::irqarray15::EV_PENDING);
        irqarray15_csr.wo(utra::irqarray15::EV_PENDING, foo);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_SEC0);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_SEC0, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_SEC0, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_SEC0, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_SEC0, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S1);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S1, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S1, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S1, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S1, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S2);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S2, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S2, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S2, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S2, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S3);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S3, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S3, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S3, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S3, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S4);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S4, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S4, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S4, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S4, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S5);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S5, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S5, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S5, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S5, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S6);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S6, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S6, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S6, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S6, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S7);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S7, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S7, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S7, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S7, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S8);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S8, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S8, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S8, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S8, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S9);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S9, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S9, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S9, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S9, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S10);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S10, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S10, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S10, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S10, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S11);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S11, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S11, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S11, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S11, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S12);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S12, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S12, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S12, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S12, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S13);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S13, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S13, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S13, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S13, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S14);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S14, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S14, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S14, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S14, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_PENDING_NC_B15S15);
        irqarray15_csr.rmwf(utra::irqarray15::EV_PENDING_NC_B15S15, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_PENDING_NC_B15S15, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_PENDING_NC_B15S15, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_PENDING_NC_B15S15, baz);

        let foo = irqarray15_csr.r(utra::irqarray15::EV_ENABLE);
        irqarray15_csr.wo(utra::irqarray15::EV_ENABLE, foo);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_SEC0);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_SEC0, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_SEC0, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_SEC0, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_SEC0, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S1);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S1, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S1, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S1, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S1, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S2);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S2, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S2, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S2, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S2, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S3);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S3, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S3, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S3, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S3, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S4);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S4, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S4, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S4, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S4, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S5);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S5, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S5, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S5, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S5, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S6);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S6, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S6, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S6, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S6, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S7);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S7, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S7, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S7, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S7, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S8);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S8, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S8, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S8, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S8, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S9);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S9, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S9, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S9, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S9, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S10);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S10, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S10, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S10, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S10, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S11);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S11, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S11, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S11, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S11, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S12);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S12, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S12, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S12, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S12, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S13);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S13, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S13, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S13, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S13, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S14);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S14, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S14, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S14, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S14, baz);
        let bar = irqarray15_csr.rf(utra::irqarray15::EV_ENABLE_NC_B15S15);
        irqarray15_csr.rmwf(utra::irqarray15::EV_ENABLE_NC_B15S15, bar);
        let mut baz = irqarray15_csr.zf(utra::irqarray15::EV_ENABLE_NC_B15S15, bar);
        baz |= irqarray15_csr.ms(utra::irqarray15::EV_ENABLE_NC_B15S15, 1);
        irqarray15_csr.wfo(utra::irqarray15::EV_ENABLE_NC_B15S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray16_csr() {
        use super::*;
        let mut irqarray16_csr = CSR::new(HW_IRQARRAY16_BASE as *mut u32);

        let foo = irqarray16_csr.r(utra::irqarray16::EV_SOFT);
        irqarray16_csr.wo(utra::irqarray16::EV_SOFT, foo);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_SOFT_TRIGGER);
        irqarray16_csr.rmwf(utra::irqarray16::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_SOFT_TRIGGER, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_SOFT_TRIGGER, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_SOFT_TRIGGER, baz);

        let foo = irqarray16_csr.r(utra::irqarray16::EV_EDGE_TRIGGERED);
        irqarray16_csr.wo(utra::irqarray16::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray16_csr.r(utra::irqarray16::EV_POLARITY);
        irqarray16_csr.wo(utra::irqarray16::EV_POLARITY, foo);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_POLARITY_RISING);
        irqarray16_csr.rmwf(utra::irqarray16::EV_POLARITY_RISING, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_POLARITY_RISING, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_POLARITY_RISING, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_POLARITY_RISING, baz);

        let foo = irqarray16_csr.r(utra::irqarray16::EV_STATUS);
        irqarray16_csr.wo(utra::irqarray16::EV_STATUS, foo);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_CAM_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_CAM_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_CAM_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_CAM_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_CAM_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_I2S_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_I2S_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_I2S_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_I2S_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_I2S_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_I2S_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_I2S_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_I2S_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_I2S_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_I2S_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_NC_B16S3);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_NC_B16S3, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_NC_B16S3, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_NC_B16S3, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_NC_B16S3, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM1_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM1_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM1_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM1_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM1_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM1_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM1_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM1_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM1_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM1_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM1_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM1_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM1_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM1_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM1_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM1_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM1_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM1_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM1_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM1_EOT_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM2_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM2_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM2_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM2_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM2_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM2_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM2_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM2_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM2_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM2_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM2_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM2_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM2_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM2_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM2_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_SPIM2_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_SPIM2_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_SPIM2_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_SPIM2_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_SPIM2_EOT_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_I2C0_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_I2C0_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_I2C0_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_I2C0_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_I2C0_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_I2C0_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_I2C0_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_I2C0_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_I2C0_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_I2C0_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_I2C0_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_I2C0_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_I2C0_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_I2C0_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_I2C0_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_STATUS_I2C0_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_STATUS_I2C0_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_STATUS_I2C0_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_STATUS_I2C0_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_STATUS_I2C0_EOT_DUPE, baz);

        let foo = irqarray16_csr.r(utra::irqarray16::EV_PENDING);
        irqarray16_csr.wo(utra::irqarray16::EV_PENDING, foo);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_CAM_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_CAM_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_CAM_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_CAM_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_CAM_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_I2S_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_I2S_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_I2S_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_I2S_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_I2S_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_I2S_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_I2S_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_I2S_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_I2S_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_I2S_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_NC_B16S3);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_NC_B16S3, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_NC_B16S3, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_NC_B16S3, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_NC_B16S3, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM1_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM1_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM1_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM1_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM1_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM1_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM1_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM1_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM1_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM1_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM1_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM1_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM1_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM1_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM1_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM1_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM1_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM1_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM1_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM1_EOT_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM2_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM2_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM2_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM2_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM2_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM2_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM2_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM2_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM2_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM2_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM2_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM2_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM2_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM2_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM2_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_SPIM2_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_SPIM2_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_SPIM2_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_SPIM2_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_SPIM2_EOT_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_I2C0_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_I2C0_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_I2C0_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_I2C0_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_I2C0_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_I2C0_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_I2C0_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_I2C0_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_I2C0_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_I2C0_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_I2C0_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_I2C0_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_I2C0_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_I2C0_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_I2C0_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_PENDING_I2C0_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_PENDING_I2C0_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_PENDING_I2C0_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_PENDING_I2C0_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_PENDING_I2C0_EOT_DUPE, baz);

        let foo = irqarray16_csr.r(utra::irqarray16::EV_ENABLE);
        irqarray16_csr.wo(utra::irqarray16::EV_ENABLE, foo);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_CAM_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_CAM_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_CAM_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_CAM_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_CAM_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_I2S_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_I2S_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_I2S_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_I2S_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_I2S_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_I2S_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_I2S_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_I2S_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_I2S_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_I2S_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_NC_B16S3);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_NC_B16S3, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_NC_B16S3, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_NC_B16S3, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_NC_B16S3, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM1_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM1_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM1_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM1_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM1_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM1_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM1_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM1_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM1_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM1_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM1_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM1_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM1_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM1_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM1_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM1_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM1_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM1_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM1_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM1_EOT_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM2_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM2_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM2_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM2_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM2_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM2_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM2_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM2_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM2_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM2_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM2_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM2_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM2_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM2_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM2_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_SPIM2_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_SPIM2_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_SPIM2_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_SPIM2_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_SPIM2_EOT_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_I2C0_RX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_I2C0_RX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_I2C0_RX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_I2C0_RX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_I2C0_RX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_I2C0_TX_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_I2C0_TX_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_I2C0_TX_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_I2C0_TX_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_I2C0_TX_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_I2C0_CMD_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_I2C0_CMD_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_I2C0_CMD_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_I2C0_CMD_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_I2C0_CMD_DUPE, baz);
        let bar = irqarray16_csr.rf(utra::irqarray16::EV_ENABLE_I2C0_EOT_DUPE);
        irqarray16_csr.rmwf(utra::irqarray16::EV_ENABLE_I2C0_EOT_DUPE, bar);
        let mut baz = irqarray16_csr.zf(utra::irqarray16::EV_ENABLE_I2C0_EOT_DUPE, bar);
        baz |= irqarray16_csr.ms(utra::irqarray16::EV_ENABLE_I2C0_EOT_DUPE, 1);
        irqarray16_csr.wfo(utra::irqarray16::EV_ENABLE_I2C0_EOT_DUPE, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray17_csr() {
        use super::*;
        let mut irqarray17_csr = CSR::new(HW_IRQARRAY17_BASE as *mut u32);

        let foo = irqarray17_csr.r(utra::irqarray17::EV_SOFT);
        irqarray17_csr.wo(utra::irqarray17::EV_SOFT, foo);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_SOFT_TRIGGER);
        irqarray17_csr.rmwf(utra::irqarray17::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_SOFT_TRIGGER, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_SOFT_TRIGGER, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_SOFT_TRIGGER, baz);

        let foo = irqarray17_csr.r(utra::irqarray17::EV_EDGE_TRIGGERED);
        irqarray17_csr.wo(utra::irqarray17::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray17_csr.r(utra::irqarray17::EV_POLARITY);
        irqarray17_csr.wo(utra::irqarray17::EV_POLARITY, foo);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_POLARITY_RISING);
        irqarray17_csr.rmwf(utra::irqarray17::EV_POLARITY_RISING, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_POLARITY_RISING, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_POLARITY_RISING, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_POLARITY_RISING, baz);

        let foo = irqarray17_csr.r(utra::irqarray17::EV_STATUS);
        irqarray17_csr.wo(utra::irqarray17::EV_STATUS, foo);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_I2C1_RX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_I2C1_RX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_I2C1_RX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_I2C1_RX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_I2C1_RX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_I2C1_TX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_I2C1_TX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_I2C1_TX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_I2C1_TX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_I2C1_TX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_I2C1_CMD_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_I2C1_CMD_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_I2C1_CMD_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_I2C1_CMD_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_I2C1_CMD_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_I2C1_EOT_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_I2C1_EOT_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_I2C1_EOT_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_I2C1_EOT_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_I2C1_EOT_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_PIOIRQ0_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_PIOIRQ0_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_PIOIRQ0_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_PIOIRQ0_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_PIOIRQ1_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_PIOIRQ1_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_PIOIRQ1_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_PIOIRQ1_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_PIOIRQ2_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_PIOIRQ2_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_PIOIRQ2_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_PIOIRQ2_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_PIOIRQ3_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_PIOIRQ3_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_PIOIRQ3_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_PIOIRQ3_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_QFCIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_QFCIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_QFCIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_QFCIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_QFCIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_ADC_RX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_ADC_RX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_ADC_RX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_ADC_RX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_ADC_RX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_IOXIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_IOXIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_IOXIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_IOXIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_IOXIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_SDDCIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_SDDCIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_SDDCIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_SDDCIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_SDDCIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_NC_B17S12);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_NC_B17S12, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_NC_B17S12, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_NC_B17S12, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_NC_B17S12, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_NC_B17S13);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_NC_B17S13, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_NC_B17S13, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_NC_B17S13, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_NC_B17S13, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_NC_B17S14);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_NC_B17S14, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_NC_B17S14, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_NC_B17S14, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_NC_B17S14, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_STATUS_NC_B17S15);
        irqarray17_csr.rmwf(utra::irqarray17::EV_STATUS_NC_B17S15, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_STATUS_NC_B17S15, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_STATUS_NC_B17S15, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_STATUS_NC_B17S15, baz);

        let foo = irqarray17_csr.r(utra::irqarray17::EV_PENDING);
        irqarray17_csr.wo(utra::irqarray17::EV_PENDING, foo);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_I2C1_RX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_I2C1_RX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_I2C1_RX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_I2C1_RX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_I2C1_RX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_I2C1_TX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_I2C1_TX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_I2C1_TX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_I2C1_TX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_I2C1_TX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_I2C1_CMD_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_I2C1_CMD_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_I2C1_CMD_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_I2C1_CMD_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_I2C1_CMD_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_I2C1_EOT_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_I2C1_EOT_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_I2C1_EOT_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_I2C1_EOT_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_I2C1_EOT_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_PIOIRQ0_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_PIOIRQ0_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_PIOIRQ0_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_PIOIRQ0_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_PIOIRQ1_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_PIOIRQ1_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_PIOIRQ1_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_PIOIRQ1_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_PIOIRQ2_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_PIOIRQ2_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_PIOIRQ2_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_PIOIRQ2_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_PIOIRQ3_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_PIOIRQ3_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_PIOIRQ3_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_PIOIRQ3_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_QFCIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_QFCIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_QFCIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_QFCIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_QFCIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_ADC_RX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_ADC_RX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_ADC_RX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_ADC_RX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_ADC_RX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_IOXIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_IOXIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_IOXIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_IOXIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_IOXIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_SDDCIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_SDDCIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_SDDCIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_SDDCIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_SDDCIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_NC_B17S12);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_NC_B17S12, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_NC_B17S12, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_NC_B17S12, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_NC_B17S12, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_NC_B17S13);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_NC_B17S13, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_NC_B17S13, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_NC_B17S13, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_NC_B17S13, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_NC_B17S14);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_NC_B17S14, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_NC_B17S14, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_NC_B17S14, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_NC_B17S14, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_PENDING_NC_B17S15);
        irqarray17_csr.rmwf(utra::irqarray17::EV_PENDING_NC_B17S15, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_PENDING_NC_B17S15, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_PENDING_NC_B17S15, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_PENDING_NC_B17S15, baz);

        let foo = irqarray17_csr.r(utra::irqarray17::EV_ENABLE);
        irqarray17_csr.wo(utra::irqarray17::EV_ENABLE, foo);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_I2C1_RX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_I2C1_RX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_I2C1_RX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_I2C1_RX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_I2C1_RX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_I2C1_TX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_I2C1_TX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_I2C1_TX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_I2C1_TX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_I2C1_TX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_I2C1_CMD_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_I2C1_CMD_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_I2C1_CMD_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_I2C1_CMD_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_I2C1_CMD_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_I2C1_EOT_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_I2C1_EOT_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_I2C1_EOT_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_I2C1_EOT_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_I2C1_EOT_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_PIOIRQ0_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_PIOIRQ0_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_PIOIRQ0_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_PIOIRQ0_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_PIOIRQ1_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_PIOIRQ1_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_PIOIRQ1_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_PIOIRQ1_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_PIOIRQ2_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_PIOIRQ2_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_PIOIRQ2_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_PIOIRQ2_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_PIOIRQ3_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_PIOIRQ3_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_PIOIRQ3_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_PIOIRQ3_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_QFCIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_QFCIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_QFCIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_QFCIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_QFCIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_ADC_RX_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_ADC_RX_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_ADC_RX_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_ADC_RX_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_ADC_RX_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_IOXIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_IOXIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_IOXIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_IOXIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_IOXIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_SDDCIRQ_DUPE);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_SDDCIRQ_DUPE, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_SDDCIRQ_DUPE, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_SDDCIRQ_DUPE, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_SDDCIRQ_DUPE, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_NC_B17S12);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_NC_B17S12, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_NC_B17S12, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_NC_B17S12, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_NC_B17S12, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_NC_B17S13);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_NC_B17S13, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_NC_B17S13, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_NC_B17S13, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_NC_B17S13, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_NC_B17S14);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_NC_B17S14, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_NC_B17S14, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_NC_B17S14, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_NC_B17S14, baz);
        let bar = irqarray17_csr.rf(utra::irqarray17::EV_ENABLE_NC_B17S15);
        irqarray17_csr.rmwf(utra::irqarray17::EV_ENABLE_NC_B17S15, bar);
        let mut baz = irqarray17_csr.zf(utra::irqarray17::EV_ENABLE_NC_B17S15, bar);
        baz |= irqarray17_csr.ms(utra::irqarray17::EV_ENABLE_NC_B17S15, 1);
        irqarray17_csr.wfo(utra::irqarray17::EV_ENABLE_NC_B17S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray18_csr() {
        use super::*;
        let mut irqarray18_csr = CSR::new(HW_IRQARRAY18_BASE as *mut u32);

        let foo = irqarray18_csr.r(utra::irqarray18::EV_SOFT);
        irqarray18_csr.wo(utra::irqarray18::EV_SOFT, foo);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_SOFT_TRIGGER);
        irqarray18_csr.rmwf(utra::irqarray18::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_SOFT_TRIGGER, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_SOFT_TRIGGER, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_SOFT_TRIGGER, baz);

        let foo = irqarray18_csr.r(utra::irqarray18::EV_EDGE_TRIGGERED);
        irqarray18_csr.wo(utra::irqarray18::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray18_csr.r(utra::irqarray18::EV_POLARITY);
        irqarray18_csr.wo(utra::irqarray18::EV_POLARITY, foo);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_POLARITY_RISING);
        irqarray18_csr.rmwf(utra::irqarray18::EV_POLARITY_RISING, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_POLARITY_RISING, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_POLARITY_RISING, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_POLARITY_RISING, baz);

        let foo = irqarray18_csr.r(utra::irqarray18::EV_STATUS);
        irqarray18_csr.wo(utra::irqarray18::EV_STATUS, foo);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_PIOIRQ0_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_PIOIRQ0_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_PIOIRQ0_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_PIOIRQ0_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_PIOIRQ1_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_PIOIRQ1_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_PIOIRQ1_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_PIOIRQ1_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_PIOIRQ2_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_PIOIRQ2_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_PIOIRQ2_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_PIOIRQ2_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_PIOIRQ3_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_PIOIRQ3_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_PIOIRQ3_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_PIOIRQ3_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C2_RX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C2_RX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C2_RX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C2_RX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C2_RX_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C2_TX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C2_TX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C2_TX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C2_TX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C2_TX_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C2_CMD_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C2_CMD_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C2_CMD_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C2_CMD_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C2_CMD_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C2_EOT_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C2_EOT_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C2_EOT_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C2_EOT_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C2_EOT_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C0_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C0_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C0_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C0_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C0_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C1_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C1_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C1_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C1_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C1_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C2_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C2_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C2_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C2_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C2_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C0_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C0_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C0_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C0_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C0_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C1_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C1_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C1_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C1_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C1_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_I2C2_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_I2C2_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_I2C2_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_I2C2_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_I2C2_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_IOXIRQ_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_IOXIRQ_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_IOXIRQ_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_IOXIRQ_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_IOXIRQ_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_STATUS_CAM_RX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_STATUS_CAM_RX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_STATUS_CAM_RX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_STATUS_CAM_RX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_STATUS_CAM_RX_DUPE, baz);

        let foo = irqarray18_csr.r(utra::irqarray18::EV_PENDING);
        irqarray18_csr.wo(utra::irqarray18::EV_PENDING, foo);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_PIOIRQ0_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_PIOIRQ0_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_PIOIRQ0_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_PIOIRQ0_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_PIOIRQ1_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_PIOIRQ1_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_PIOIRQ1_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_PIOIRQ1_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_PIOIRQ2_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_PIOIRQ2_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_PIOIRQ2_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_PIOIRQ2_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_PIOIRQ3_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_PIOIRQ3_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_PIOIRQ3_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_PIOIRQ3_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C2_RX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C2_RX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C2_RX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C2_RX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C2_RX_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C2_TX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C2_TX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C2_TX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C2_TX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C2_TX_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C2_CMD_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C2_CMD_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C2_CMD_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C2_CMD_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C2_CMD_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C2_EOT_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C2_EOT_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C2_EOT_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C2_EOT_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C2_EOT_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C0_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C0_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C0_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C0_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C0_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C1_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C1_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C1_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C1_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C1_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C2_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C2_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C2_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C2_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C2_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C0_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C0_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C0_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C0_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C0_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C1_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C1_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C1_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C1_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C1_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_I2C2_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_I2C2_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_I2C2_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_I2C2_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_I2C2_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_IOXIRQ_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_IOXIRQ_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_IOXIRQ_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_IOXIRQ_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_IOXIRQ_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_PENDING_CAM_RX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_PENDING_CAM_RX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_PENDING_CAM_RX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_PENDING_CAM_RX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_PENDING_CAM_RX_DUPE, baz);

        let foo = irqarray18_csr.r(utra::irqarray18::EV_ENABLE);
        irqarray18_csr.wo(utra::irqarray18::EV_ENABLE, foo);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_PIOIRQ0_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_PIOIRQ0_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_PIOIRQ0_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_PIOIRQ0_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_PIOIRQ1_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_PIOIRQ1_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_PIOIRQ1_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_PIOIRQ1_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_PIOIRQ2_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_PIOIRQ2_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_PIOIRQ2_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_PIOIRQ2_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_PIOIRQ3_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_PIOIRQ3_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_PIOIRQ3_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_PIOIRQ3_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C2_RX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C2_RX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C2_RX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C2_RX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C2_RX_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C2_TX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C2_TX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C2_TX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C2_TX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C2_TX_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C2_CMD_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C2_CMD_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C2_CMD_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C2_CMD_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C2_CMD_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C2_EOT_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C2_EOT_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C2_EOT_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C2_EOT_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C2_EOT_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C0_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C0_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C0_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C0_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C0_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C1_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C1_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C1_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C1_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C1_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C2_NACK_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C2_NACK_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C2_NACK_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C2_NACK_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C2_NACK_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C0_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C0_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C0_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C0_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C0_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C1_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C1_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C1_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C1_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C1_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_I2C2_ERR_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_I2C2_ERR_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_I2C2_ERR_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_I2C2_ERR_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_I2C2_ERR_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_IOXIRQ_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_IOXIRQ_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_IOXIRQ_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_IOXIRQ_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_IOXIRQ_DUPE, baz);
        let bar = irqarray18_csr.rf(utra::irqarray18::EV_ENABLE_CAM_RX_DUPE);
        irqarray18_csr.rmwf(utra::irqarray18::EV_ENABLE_CAM_RX_DUPE, bar);
        let mut baz = irqarray18_csr.zf(utra::irqarray18::EV_ENABLE_CAM_RX_DUPE, bar);
        baz |= irqarray18_csr.ms(utra::irqarray18::EV_ENABLE_CAM_RX_DUPE, 1);
        irqarray18_csr.wfo(utra::irqarray18::EV_ENABLE_CAM_RX_DUPE, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray19_csr() {
        use super::*;
        let mut irqarray19_csr = CSR::new(HW_IRQARRAY19_BASE as *mut u32);

        let foo = irqarray19_csr.r(utra::irqarray19::EV_SOFT);
        irqarray19_csr.wo(utra::irqarray19::EV_SOFT, foo);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_SOFT_TRIGGER);
        irqarray19_csr.rmwf(utra::irqarray19::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_SOFT_TRIGGER, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_SOFT_TRIGGER, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_SOFT_TRIGGER, baz);

        let foo = irqarray19_csr.r(utra::irqarray19::EV_EDGE_TRIGGERED);
        irqarray19_csr.wo(utra::irqarray19::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray19_csr.r(utra::irqarray19::EV_POLARITY);
        irqarray19_csr.wo(utra::irqarray19::EV_POLARITY, foo);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_POLARITY_RISING);
        irqarray19_csr.rmwf(utra::irqarray19::EV_POLARITY_RISING, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_POLARITY_RISING, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_POLARITY_RISING, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_POLARITY_RISING, baz);

        let foo = irqarray19_csr.r(utra::irqarray19::EV_STATUS);
        irqarray19_csr.wo(utra::irqarray19::EV_STATUS, foo);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_MBOX_IRQ_AVAILABLE_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_MBOX_IRQ_AVAILABLE_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_MBOX_IRQ_AVAILABLE_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_MBOX_IRQ_AVAILABLE_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_MBOX_IRQ_AVAILABLE_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_MBOX_IRQ_ABORT_INIT_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_MBOX_IRQ_ABORT_INIT_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_MBOX_IRQ_ABORT_INIT_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_MBOX_IRQ_ABORT_INIT_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_MBOX_IRQ_ABORT_INIT_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_MBOX_IRQ_DONE_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_MBOX_IRQ_DONE_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_MBOX_IRQ_DONE_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_MBOX_IRQ_DONE_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_MBOX_IRQ_DONE_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_MBOX_IRQ_ERROR_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_MBOX_IRQ_ERROR_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_MBOX_IRQ_ERROR_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_MBOX_IRQ_ERROR_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_MBOX_IRQ_ERROR_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_PIOIRQ0_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_PIOIRQ0_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_PIOIRQ0_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_PIOIRQ0_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_PIOIRQ1_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_PIOIRQ1_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_PIOIRQ1_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_PIOIRQ1_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_PIOIRQ2_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_PIOIRQ2_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_PIOIRQ2_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_PIOIRQ2_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_PIOIRQ3_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_PIOIRQ3_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_PIOIRQ3_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_PIOIRQ3_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_SDIO_RX_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_SDIO_RX_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_SDIO_RX_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_SDIO_RX_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_SDIO_RX_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_SDIO_TX_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_SDIO_TX_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_SDIO_TX_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_SDIO_TX_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_SDIO_TX_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_SDIO_EOT_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_SDIO_EOT_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_SDIO_EOT_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_SDIO_EOT_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_SDIO_EOT_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_SDIO_ERR_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_SDIO_ERR_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_SDIO_ERR_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_SDIO_ERR_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_SDIO_ERR_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_NC_B19S12);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_NC_B19S12, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_NC_B19S12, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_NC_B19S12, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_NC_B19S12, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_NC_B19S13);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_NC_B19S13, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_NC_B19S13, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_NC_B19S13, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_NC_B19S13, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_NC_B19S14);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_NC_B19S14, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_NC_B19S14, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_NC_B19S14, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_NC_B19S14, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_STATUS_NC_B19S15);
        irqarray19_csr.rmwf(utra::irqarray19::EV_STATUS_NC_B19S15, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_STATUS_NC_B19S15, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_STATUS_NC_B19S15, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_STATUS_NC_B19S15, baz);

        let foo = irqarray19_csr.r(utra::irqarray19::EV_PENDING);
        irqarray19_csr.wo(utra::irqarray19::EV_PENDING, foo);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_MBOX_IRQ_AVAILABLE_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_MBOX_IRQ_AVAILABLE_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_MBOX_IRQ_AVAILABLE_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_MBOX_IRQ_AVAILABLE_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_MBOX_IRQ_AVAILABLE_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_MBOX_IRQ_ABORT_INIT_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_MBOX_IRQ_ABORT_INIT_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_MBOX_IRQ_ABORT_INIT_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_MBOX_IRQ_ABORT_INIT_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_MBOX_IRQ_ABORT_INIT_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_MBOX_IRQ_DONE_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_MBOX_IRQ_DONE_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_MBOX_IRQ_DONE_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_MBOX_IRQ_DONE_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_MBOX_IRQ_DONE_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_MBOX_IRQ_ERROR_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_MBOX_IRQ_ERROR_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_MBOX_IRQ_ERROR_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_MBOX_IRQ_ERROR_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_MBOX_IRQ_ERROR_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_PIOIRQ0_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_PIOIRQ0_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_PIOIRQ0_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_PIOIRQ0_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_PIOIRQ1_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_PIOIRQ1_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_PIOIRQ1_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_PIOIRQ1_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_PIOIRQ2_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_PIOIRQ2_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_PIOIRQ2_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_PIOIRQ2_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_PIOIRQ3_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_PIOIRQ3_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_PIOIRQ3_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_PIOIRQ3_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_SDIO_RX_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_SDIO_RX_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_SDIO_RX_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_SDIO_RX_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_SDIO_RX_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_SDIO_TX_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_SDIO_TX_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_SDIO_TX_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_SDIO_TX_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_SDIO_TX_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_SDIO_EOT_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_SDIO_EOT_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_SDIO_EOT_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_SDIO_EOT_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_SDIO_EOT_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_SDIO_ERR_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_SDIO_ERR_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_SDIO_ERR_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_SDIO_ERR_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_SDIO_ERR_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_NC_B19S12);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_NC_B19S12, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_NC_B19S12, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_NC_B19S12, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_NC_B19S12, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_NC_B19S13);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_NC_B19S13, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_NC_B19S13, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_NC_B19S13, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_NC_B19S13, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_NC_B19S14);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_NC_B19S14, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_NC_B19S14, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_NC_B19S14, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_NC_B19S14, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_PENDING_NC_B19S15);
        irqarray19_csr.rmwf(utra::irqarray19::EV_PENDING_NC_B19S15, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_PENDING_NC_B19S15, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_PENDING_NC_B19S15, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_PENDING_NC_B19S15, baz);

        let foo = irqarray19_csr.r(utra::irqarray19::EV_ENABLE);
        irqarray19_csr.wo(utra::irqarray19::EV_ENABLE, foo);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_AVAILABLE_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_AVAILABLE_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_AVAILABLE_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_MBOX_IRQ_AVAILABLE_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_MBOX_IRQ_AVAILABLE_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ABORT_INIT_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ABORT_INIT_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ABORT_INIT_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ABORT_INIT_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ABORT_INIT_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_DONE_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_DONE_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_DONE_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_MBOX_IRQ_DONE_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_MBOX_IRQ_DONE_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ERROR_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ERROR_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ERROR_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ERROR_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_MBOX_IRQ_ERROR_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_PIOIRQ0_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_PIOIRQ0_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_PIOIRQ0_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_PIOIRQ0_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_PIOIRQ0_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_PIOIRQ1_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_PIOIRQ1_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_PIOIRQ1_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_PIOIRQ1_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_PIOIRQ1_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_PIOIRQ2_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_PIOIRQ2_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_PIOIRQ2_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_PIOIRQ2_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_PIOIRQ2_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_PIOIRQ3_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_PIOIRQ3_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_PIOIRQ3_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_PIOIRQ3_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_PIOIRQ3_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_SDIO_RX_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_SDIO_RX_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_SDIO_RX_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_SDIO_RX_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_SDIO_RX_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_SDIO_TX_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_SDIO_TX_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_SDIO_TX_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_SDIO_TX_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_SDIO_TX_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_SDIO_EOT_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_SDIO_EOT_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_SDIO_EOT_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_SDIO_EOT_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_SDIO_EOT_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_SDIO_ERR_DUPE);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_SDIO_ERR_DUPE, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_SDIO_ERR_DUPE, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_SDIO_ERR_DUPE, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_SDIO_ERR_DUPE, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_NC_B19S12);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_NC_B19S12, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_NC_B19S12, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_NC_B19S12, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_NC_B19S12, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_NC_B19S13);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_NC_B19S13, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_NC_B19S13, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_NC_B19S13, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_NC_B19S13, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_NC_B19S14);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_NC_B19S14, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_NC_B19S14, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_NC_B19S14, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_NC_B19S14, baz);
        let bar = irqarray19_csr.rf(utra::irqarray19::EV_ENABLE_NC_B19S15);
        irqarray19_csr.rmwf(utra::irqarray19::EV_ENABLE_NC_B19S15, bar);
        let mut baz = irqarray19_csr.zf(utra::irqarray19::EV_ENABLE_NC_B19S15, bar);
        baz |= irqarray19_csr.ms(utra::irqarray19::EV_ENABLE_NC_B19S15, 1);
        irqarray19_csr.wfo(utra::irqarray19::EV_ENABLE_NC_B19S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray2_csr() {
        use super::*;
        let mut irqarray2_csr = CSR::new(HW_IRQARRAY2_BASE as *mut u32);

        let foo = irqarray2_csr.r(utra::irqarray2::EV_SOFT);
        irqarray2_csr.wo(utra::irqarray2::EV_SOFT, foo);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_SOFT_TRIGGER);
        irqarray2_csr.rmwf(utra::irqarray2::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_SOFT_TRIGGER, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_SOFT_TRIGGER, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_SOFT_TRIGGER, baz);

        let foo = irqarray2_csr.r(utra::irqarray2::EV_EDGE_TRIGGERED);
        irqarray2_csr.wo(utra::irqarray2::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray2_csr.r(utra::irqarray2::EV_POLARITY);
        irqarray2_csr.wo(utra::irqarray2::EV_POLARITY, foo);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_POLARITY_RISING);
        irqarray2_csr.rmwf(utra::irqarray2::EV_POLARITY_RISING, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_POLARITY_RISING, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_POLARITY_RISING, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_POLARITY_RISING, baz);

        let foo = irqarray2_csr.r(utra::irqarray2::EV_STATUS);
        irqarray2_csr.wo(utra::irqarray2::EV_STATUS, foo);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_QFCIRQ);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_QFCIRQ, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_QFCIRQ, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_QFCIRQ, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_QFCIRQ, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_MDMAIRQ);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_MDMAIRQ, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_MDMAIRQ, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_MDMAIRQ, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_MDMAIRQ, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_MBOX_IRQ_AVAILABLE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_MBOX_IRQ_AVAILABLE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_MBOX_IRQ_AVAILABLE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_MBOX_IRQ_AVAILABLE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_MBOX_IRQ_AVAILABLE, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_MBOX_IRQ_ABORT_INIT);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_MBOX_IRQ_ABORT_INIT, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_MBOX_IRQ_ABORT_INIT, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_MBOX_IRQ_ABORT_INIT, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_MBOX_IRQ_ABORT_INIT, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_MBOX_IRQ_DONE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_MBOX_IRQ_DONE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_MBOX_IRQ_DONE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_MBOX_IRQ_DONE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_MBOX_IRQ_DONE, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_MBOX_IRQ_ERROR);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_MBOX_IRQ_ERROR, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_MBOX_IRQ_ERROR, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_MBOX_IRQ_ERROR, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_MBOX_IRQ_ERROR, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S6);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S6, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S6, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S6, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S6, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S7);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S7, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S7, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S7, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S7, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S8);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S8, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S8, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S8, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S8, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S9);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S9, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S9, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S9, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S9, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S10);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S10, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S10, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S10, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S10, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S11);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S11, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S11, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S11, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S11, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S12);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S12, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S12, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S12, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S12, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S13);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S13, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S13, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S13, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S13, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_NC_B2S14);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_NC_B2S14, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_NC_B2S14, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_NC_B2S14, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_NC_B2S14, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_STATUS_AOWKUPINT);
        irqarray2_csr.rmwf(utra::irqarray2::EV_STATUS_AOWKUPINT, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_STATUS_AOWKUPINT, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_STATUS_AOWKUPINT, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_STATUS_AOWKUPINT, baz);

        let foo = irqarray2_csr.r(utra::irqarray2::EV_PENDING);
        irqarray2_csr.wo(utra::irqarray2::EV_PENDING, foo);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_QFCIRQ);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_QFCIRQ, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_QFCIRQ, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_QFCIRQ, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_QFCIRQ, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_MDMAIRQ);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_MDMAIRQ, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_MDMAIRQ, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_MDMAIRQ, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_MDMAIRQ, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_MBOX_IRQ_AVAILABLE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_MBOX_IRQ_AVAILABLE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_MBOX_IRQ_AVAILABLE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_MBOX_IRQ_AVAILABLE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_MBOX_IRQ_AVAILABLE, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_MBOX_IRQ_ABORT_INIT);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_MBOX_IRQ_ABORT_INIT, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_MBOX_IRQ_ABORT_INIT, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_MBOX_IRQ_ABORT_INIT, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_MBOX_IRQ_ABORT_INIT, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_MBOX_IRQ_DONE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_MBOX_IRQ_DONE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_MBOX_IRQ_DONE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_MBOX_IRQ_DONE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_MBOX_IRQ_DONE, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_MBOX_IRQ_ERROR);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_MBOX_IRQ_ERROR, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_MBOX_IRQ_ERROR, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_MBOX_IRQ_ERROR, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_MBOX_IRQ_ERROR, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S6);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S6, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S6, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S6, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S6, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S7);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S7, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S7, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S7, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S7, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S8);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S8, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S8, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S8, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S8, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S9);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S9, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S9, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S9, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S9, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S10);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S10, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S10, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S10, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S10, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S11);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S11, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S11, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S11, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S11, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S12);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S12, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S12, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S12, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S12, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S13);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S13, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S13, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S13, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S13, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_NC_B2S14);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_NC_B2S14, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_NC_B2S14, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_NC_B2S14, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_NC_B2S14, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_PENDING_AOWKUPINT);
        irqarray2_csr.rmwf(utra::irqarray2::EV_PENDING_AOWKUPINT, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_PENDING_AOWKUPINT, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_PENDING_AOWKUPINT, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_PENDING_AOWKUPINT, baz);

        let foo = irqarray2_csr.r(utra::irqarray2::EV_ENABLE);
        irqarray2_csr.wo(utra::irqarray2::EV_ENABLE, foo);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_QFCIRQ);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_QFCIRQ, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_QFCIRQ, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_QFCIRQ, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_QFCIRQ, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_MDMAIRQ);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_MDMAIRQ, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_MDMAIRQ, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_MDMAIRQ, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_MDMAIRQ, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_AVAILABLE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_AVAILABLE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_AVAILABLE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_MBOX_IRQ_AVAILABLE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_MBOX_IRQ_AVAILABLE, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ABORT_INIT);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ABORT_INIT, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ABORT_INIT, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ABORT_INIT, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ABORT_INIT, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_DONE);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_DONE, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_DONE, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_MBOX_IRQ_DONE, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_MBOX_IRQ_DONE, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ERROR);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ERROR, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ERROR, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ERROR, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_MBOX_IRQ_ERROR, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S6);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S6, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S6, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S6, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S6, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S7);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S7, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S7, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S7, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S7, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S8);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S8, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S8, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S8, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S8, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S9);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S9, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S9, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S9, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S9, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S10);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S10, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S10, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S10, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S10, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S11);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S11, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S11, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S11, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S11, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S12);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S12, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S12, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S12, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S12, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S13);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S13, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S13, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S13, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S13, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_NC_B2S14);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_NC_B2S14, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_NC_B2S14, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_NC_B2S14, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_NC_B2S14, baz);
        let bar = irqarray2_csr.rf(utra::irqarray2::EV_ENABLE_AOWKUPINT);
        irqarray2_csr.rmwf(utra::irqarray2::EV_ENABLE_AOWKUPINT, bar);
        let mut baz = irqarray2_csr.zf(utra::irqarray2::EV_ENABLE_AOWKUPINT, bar);
        baz |= irqarray2_csr.ms(utra::irqarray2::EV_ENABLE_AOWKUPINT, 1);
        irqarray2_csr.wfo(utra::irqarray2::EV_ENABLE_AOWKUPINT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray3_csr() {
        use super::*;
        let mut irqarray3_csr = CSR::new(HW_IRQARRAY3_BASE as *mut u32);

        let foo = irqarray3_csr.r(utra::irqarray3::EV_SOFT);
        irqarray3_csr.wo(utra::irqarray3::EV_SOFT, foo);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_SOFT_TRIGGER);
        irqarray3_csr.rmwf(utra::irqarray3::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_SOFT_TRIGGER, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_SOFT_TRIGGER, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_SOFT_TRIGGER, baz);

        let foo = irqarray3_csr.r(utra::irqarray3::EV_EDGE_TRIGGERED);
        irqarray3_csr.wo(utra::irqarray3::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray3_csr.r(utra::irqarray3::EV_POLARITY);
        irqarray3_csr.wo(utra::irqarray3::EV_POLARITY, foo);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_POLARITY_RISING);
        irqarray3_csr.rmwf(utra::irqarray3::EV_POLARITY_RISING, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_POLARITY_RISING, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_POLARITY_RISING, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_POLARITY_RISING, baz);

        let foo = irqarray3_csr.r(utra::irqarray3::EV_STATUS);
        irqarray3_csr.wo(utra::irqarray3::EV_STATUS, foo);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_TRNG_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_TRNG_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_TRNG_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_TRNG_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_TRNG_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_AES_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_AES_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_AES_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_AES_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_AES_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_PKE_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_PKE_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_PKE_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_PKE_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_PKE_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_HASH_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_HASH_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_HASH_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_HASH_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_HASH_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_ALU_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_ALU_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_ALU_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_ALU_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_ALU_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_SDMA_ICHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_SDMA_ICHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_SDMA_ICHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_SDMA_ICHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_SDMA_ICHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_SDMA_SCHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_SDMA_SCHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_SDMA_SCHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_SDMA_SCHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_SDMA_SCHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_SDMA_XCHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_SDMA_XCHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_SDMA_XCHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_SDMA_XCHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_SDMA_XCHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S8);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S8, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S8, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S8, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S8, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S9);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S9, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S9, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S9, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S9, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S10);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S10, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S10, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S10, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S10, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S11);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S11, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S11, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S11, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S11, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S12);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S12, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S12, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S12, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S12, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S13);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S13, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S13, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S13, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S13, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S14);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S14, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S14, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S14, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S14, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_STATUS_NC_B3S15);
        irqarray3_csr.rmwf(utra::irqarray3::EV_STATUS_NC_B3S15, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_STATUS_NC_B3S15, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_STATUS_NC_B3S15, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_STATUS_NC_B3S15, baz);

        let foo = irqarray3_csr.r(utra::irqarray3::EV_PENDING);
        irqarray3_csr.wo(utra::irqarray3::EV_PENDING, foo);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_TRNG_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_TRNG_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_TRNG_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_TRNG_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_TRNG_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_AES_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_AES_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_AES_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_AES_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_AES_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_PKE_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_PKE_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_PKE_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_PKE_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_PKE_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_HASH_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_HASH_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_HASH_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_HASH_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_HASH_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_ALU_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_ALU_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_ALU_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_ALU_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_ALU_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_SDMA_ICHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_SDMA_ICHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_SDMA_ICHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_SDMA_ICHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_SDMA_ICHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_SDMA_SCHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_SDMA_SCHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_SDMA_SCHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_SDMA_SCHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_SDMA_SCHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_SDMA_XCHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_SDMA_XCHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_SDMA_XCHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_SDMA_XCHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_SDMA_XCHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S8);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S8, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S8, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S8, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S8, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S9);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S9, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S9, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S9, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S9, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S10);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S10, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S10, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S10, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S10, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S11);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S11, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S11, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S11, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S11, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S12);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S12, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S12, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S12, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S12, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S13);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S13, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S13, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S13, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S13, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S14);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S14, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S14, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S14, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S14, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_PENDING_NC_B3S15);
        irqarray3_csr.rmwf(utra::irqarray3::EV_PENDING_NC_B3S15, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_PENDING_NC_B3S15, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_PENDING_NC_B3S15, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_PENDING_NC_B3S15, baz);

        let foo = irqarray3_csr.r(utra::irqarray3::EV_ENABLE);
        irqarray3_csr.wo(utra::irqarray3::EV_ENABLE, foo);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_TRNG_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_TRNG_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_TRNG_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_TRNG_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_TRNG_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_AES_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_AES_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_AES_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_AES_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_AES_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_PKE_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_PKE_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_PKE_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_PKE_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_PKE_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_HASH_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_HASH_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_HASH_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_HASH_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_HASH_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_ALU_DONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_ALU_DONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_ALU_DONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_ALU_DONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_ALU_DONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_SDMA_ICHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_SDMA_ICHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_SDMA_ICHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_SDMA_ICHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_SDMA_ICHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_SDMA_SCHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_SDMA_SCHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_SDMA_SCHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_SDMA_SCHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_SDMA_SCHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_SDMA_XCHDONE);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_SDMA_XCHDONE, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_SDMA_XCHDONE, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_SDMA_XCHDONE, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_SDMA_XCHDONE, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S8);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S8, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S8, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S8, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S8, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S9);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S9, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S9, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S9, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S9, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S10);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S10, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S10, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S10, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S10, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S11);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S11, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S11, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S11, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S11, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S12);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S12, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S12, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S12, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S12, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S13);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S13, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S13, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S13, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S13, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S14);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S14, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S14, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S14, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S14, baz);
        let bar = irqarray3_csr.rf(utra::irqarray3::EV_ENABLE_NC_B3S15);
        irqarray3_csr.rmwf(utra::irqarray3::EV_ENABLE_NC_B3S15, bar);
        let mut baz = irqarray3_csr.zf(utra::irqarray3::EV_ENABLE_NC_B3S15, bar);
        baz |= irqarray3_csr.ms(utra::irqarray3::EV_ENABLE_NC_B3S15, 1);
        irqarray3_csr.wfo(utra::irqarray3::EV_ENABLE_NC_B3S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray4_csr() {
        use super::*;
        let mut irqarray4_csr = CSR::new(HW_IRQARRAY4_BASE as *mut u32);

        let foo = irqarray4_csr.r(utra::irqarray4::EV_SOFT);
        irqarray4_csr.wo(utra::irqarray4::EV_SOFT, foo);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_SOFT_TRIGGER);
        irqarray4_csr.rmwf(utra::irqarray4::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_SOFT_TRIGGER, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_SOFT_TRIGGER, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_SOFT_TRIGGER, baz);

        let foo = irqarray4_csr.r(utra::irqarray4::EV_EDGE_TRIGGERED);
        irqarray4_csr.wo(utra::irqarray4::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray4_csr.r(utra::irqarray4::EV_POLARITY);
        irqarray4_csr.wo(utra::irqarray4::EV_POLARITY, foo);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_POLARITY_RISING);
        irqarray4_csr.rmwf(utra::irqarray4::EV_POLARITY_RISING, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_POLARITY_RISING, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_POLARITY_RISING, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_POLARITY_RISING, baz);

        let foo = irqarray4_csr.r(utra::irqarray4::EV_STATUS);
        irqarray4_csr.wo(utra::irqarray4::EV_STATUS, foo);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_TRNG_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_TRNG_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_TRNG_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_TRNG_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_TRNG_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_AES_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_AES_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_AES_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_AES_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_AES_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_PKE_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_PKE_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_PKE_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_PKE_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_PKE_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_HASH_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_HASH_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_HASH_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_HASH_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_HASH_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_ALU_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_ALU_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_ALU_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_ALU_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_ALU_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_SDMA_ICHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_SDMA_ICHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_SDMA_ICHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_SDMA_ICHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_SDMA_ICHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_SDMA_SCHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_SDMA_SCHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_SDMA_SCHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_SDMA_SCHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_SDMA_SCHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_SDMA_XCHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_SDMA_XCHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_SDMA_XCHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_SDMA_XCHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_SDMA_XCHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S8);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S8, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S8, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S8, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S8, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S9);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S9, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S9, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S9, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S9, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S10);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S10, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S10, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S10, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S10, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S11);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S11, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S11, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S11, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S11, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S12);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S12, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S12, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S12, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S12, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S13);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S13, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S13, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S13, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S13, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S14);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S14, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S14, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S14, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S14, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_STATUS_NC_B4S15);
        irqarray4_csr.rmwf(utra::irqarray4::EV_STATUS_NC_B4S15, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_STATUS_NC_B4S15, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_STATUS_NC_B4S15, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_STATUS_NC_B4S15, baz);

        let foo = irqarray4_csr.r(utra::irqarray4::EV_PENDING);
        irqarray4_csr.wo(utra::irqarray4::EV_PENDING, foo);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_TRNG_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_TRNG_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_TRNG_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_TRNG_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_TRNG_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_AES_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_AES_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_AES_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_AES_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_AES_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_PKE_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_PKE_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_PKE_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_PKE_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_PKE_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_HASH_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_HASH_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_HASH_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_HASH_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_HASH_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_ALU_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_ALU_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_ALU_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_ALU_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_ALU_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_SDMA_ICHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_SDMA_ICHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_SDMA_ICHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_SDMA_ICHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_SDMA_ICHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_SDMA_SCHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_SDMA_SCHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_SDMA_SCHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_SDMA_SCHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_SDMA_SCHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_SDMA_XCHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_SDMA_XCHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_SDMA_XCHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_SDMA_XCHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_SDMA_XCHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S8);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S8, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S8, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S8, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S8, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S9);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S9, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S9, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S9, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S9, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S10);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S10, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S10, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S10, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S10, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S11);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S11, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S11, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S11, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S11, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S12);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S12, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S12, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S12, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S12, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S13);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S13, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S13, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S13, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S13, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S14);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S14, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S14, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S14, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S14, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_PENDING_NC_B4S15);
        irqarray4_csr.rmwf(utra::irqarray4::EV_PENDING_NC_B4S15, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_PENDING_NC_B4S15, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_PENDING_NC_B4S15, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_PENDING_NC_B4S15, baz);

        let foo = irqarray4_csr.r(utra::irqarray4::EV_ENABLE);
        irqarray4_csr.wo(utra::irqarray4::EV_ENABLE, foo);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_TRNG_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_TRNG_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_TRNG_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_TRNG_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_TRNG_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_AES_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_AES_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_AES_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_AES_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_AES_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_PKE_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_PKE_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_PKE_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_PKE_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_PKE_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_HASH_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_HASH_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_HASH_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_HASH_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_HASH_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_ALU_DONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_ALU_DONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_ALU_DONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_ALU_DONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_ALU_DONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_SDMA_ICHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_SDMA_ICHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_SDMA_ICHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_SDMA_ICHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_SDMA_ICHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_SDMA_SCHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_SDMA_SCHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_SDMA_SCHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_SDMA_SCHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_SDMA_SCHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_SDMA_XCHDONE_DUPE);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_SDMA_XCHDONE_DUPE, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_SDMA_XCHDONE_DUPE, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_SDMA_XCHDONE_DUPE, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_SDMA_XCHDONE_DUPE, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S8);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S8, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S8, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S8, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S8, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S9);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S9, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S9, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S9, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S9, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S10);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S10, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S10, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S10, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S10, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S11);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S11, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S11, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S11, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S11, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S12);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S12, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S12, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S12, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S12, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S13);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S13, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S13, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S13, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S13, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S14);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S14, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S14, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S14, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S14, baz);
        let bar = irqarray4_csr.rf(utra::irqarray4::EV_ENABLE_NC_B4S15);
        irqarray4_csr.rmwf(utra::irqarray4::EV_ENABLE_NC_B4S15, bar);
        let mut baz = irqarray4_csr.zf(utra::irqarray4::EV_ENABLE_NC_B4S15, bar);
        baz |= irqarray4_csr.ms(utra::irqarray4::EV_ENABLE_NC_B4S15, 1);
        irqarray4_csr.wfo(utra::irqarray4::EV_ENABLE_NC_B4S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray5_csr() {
        use super::*;
        let mut irqarray5_csr = CSR::new(HW_IRQARRAY5_BASE as *mut u32);

        let foo = irqarray5_csr.r(utra::irqarray5::EV_SOFT);
        irqarray5_csr.wo(utra::irqarray5::EV_SOFT, foo);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_SOFT_TRIGGER);
        irqarray5_csr.rmwf(utra::irqarray5::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_SOFT_TRIGGER, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_SOFT_TRIGGER, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_SOFT_TRIGGER, baz);

        let foo = irqarray5_csr.r(utra::irqarray5::EV_EDGE_TRIGGERED);
        irqarray5_csr.wo(utra::irqarray5::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray5_csr.rmwf(utra::irqarray5::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray5_csr.r(utra::irqarray5::EV_POLARITY);
        irqarray5_csr.wo(utra::irqarray5::EV_POLARITY, foo);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_POLARITY_RISING);
        irqarray5_csr.rmwf(utra::irqarray5::EV_POLARITY_RISING, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_POLARITY_RISING, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_POLARITY_RISING, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_POLARITY_RISING, baz);

        let foo = irqarray5_csr.r(utra::irqarray5::EV_STATUS);
        irqarray5_csr.wo(utra::irqarray5::EV_STATUS, foo);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART0_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART0_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART0_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART0_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART0_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART0_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART0_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART0_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART0_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART0_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART0_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART0_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART0_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART0_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART0_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART0_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART0_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART0_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART0_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART0_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART1_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART1_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART1_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART1_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART1_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART1_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART1_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART1_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART1_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART1_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART1_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART1_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART1_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART1_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART1_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART1_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART1_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART1_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART1_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART1_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART2_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART2_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART2_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART2_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART2_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART2_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART2_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART2_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART2_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART2_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART2_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART2_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART2_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART2_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART2_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART2_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART2_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART2_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART2_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART2_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART3_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART3_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART3_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART3_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART3_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART3_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART3_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART3_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART3_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART3_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART3_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART3_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART3_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART3_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART3_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_STATUS_UART3_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_STATUS_UART3_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_STATUS_UART3_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_STATUS_UART3_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_STATUS_UART3_ERR, baz);

        let foo = irqarray5_csr.r(utra::irqarray5::EV_PENDING);
        irqarray5_csr.wo(utra::irqarray5::EV_PENDING, foo);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART0_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART0_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART0_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART0_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART0_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART0_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART0_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART0_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART0_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART0_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART0_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART0_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART0_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART0_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART0_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART0_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART0_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART0_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART0_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART0_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART1_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART1_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART1_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART1_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART1_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART1_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART1_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART1_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART1_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART1_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART1_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART1_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART1_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART1_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART1_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART1_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART1_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART1_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART1_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART1_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART2_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART2_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART2_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART2_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART2_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART2_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART2_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART2_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART2_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART2_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART2_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART2_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART2_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART2_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART2_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART2_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART2_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART2_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART2_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART2_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART3_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART3_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART3_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART3_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART3_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART3_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART3_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART3_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART3_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART3_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART3_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART3_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART3_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART3_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART3_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_PENDING_UART3_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_PENDING_UART3_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_PENDING_UART3_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_PENDING_UART3_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_PENDING_UART3_ERR, baz);

        let foo = irqarray5_csr.r(utra::irqarray5::EV_ENABLE);
        irqarray5_csr.wo(utra::irqarray5::EV_ENABLE, foo);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART0_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART0_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART0_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART0_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART0_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART0_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART0_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART0_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART0_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART0_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART0_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART0_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART0_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART0_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART0_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART0_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART0_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART0_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART0_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART0_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART1_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART1_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART1_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART1_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART1_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART1_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART1_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART1_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART1_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART1_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART1_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART1_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART1_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART1_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART1_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART1_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART1_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART1_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART1_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART1_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART2_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART2_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART2_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART2_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART2_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART2_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART2_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART2_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART2_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART2_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART2_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART2_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART2_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART2_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART2_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART2_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART2_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART2_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART2_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART2_ERR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART3_RX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART3_RX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART3_RX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART3_RX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART3_RX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART3_TX);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART3_TX, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART3_TX, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART3_TX, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART3_TX, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART3_RX_CHAR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART3_RX_CHAR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART3_RX_CHAR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART3_RX_CHAR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART3_RX_CHAR, baz);
        let bar = irqarray5_csr.rf(utra::irqarray5::EV_ENABLE_UART3_ERR);
        irqarray5_csr.rmwf(utra::irqarray5::EV_ENABLE_UART3_ERR, bar);
        let mut baz = irqarray5_csr.zf(utra::irqarray5::EV_ENABLE_UART3_ERR, bar);
        baz |= irqarray5_csr.ms(utra::irqarray5::EV_ENABLE_UART3_ERR, 1);
        irqarray5_csr.wfo(utra::irqarray5::EV_ENABLE_UART3_ERR, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray6_csr() {
        use super::*;
        let mut irqarray6_csr = CSR::new(HW_IRQARRAY6_BASE as *mut u32);

        let foo = irqarray6_csr.r(utra::irqarray6::EV_SOFT);
        irqarray6_csr.wo(utra::irqarray6::EV_SOFT, foo);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_SOFT_TRIGGER);
        irqarray6_csr.rmwf(utra::irqarray6::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_SOFT_TRIGGER, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_SOFT_TRIGGER, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_SOFT_TRIGGER, baz);

        let foo = irqarray6_csr.r(utra::irqarray6::EV_EDGE_TRIGGERED);
        irqarray6_csr.wo(utra::irqarray6::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray6_csr.rmwf(utra::irqarray6::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray6_csr.r(utra::irqarray6::EV_POLARITY);
        irqarray6_csr.wo(utra::irqarray6::EV_POLARITY, foo);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_POLARITY_RISING);
        irqarray6_csr.rmwf(utra::irqarray6::EV_POLARITY_RISING, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_POLARITY_RISING, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_POLARITY_RISING, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_POLARITY_RISING, baz);

        let foo = irqarray6_csr.r(utra::irqarray6::EV_STATUS);
        irqarray6_csr.wo(utra::irqarray6::EV_STATUS, foo);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM0_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM0_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM0_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM0_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM0_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM0_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM0_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM0_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM0_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM0_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM0_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM0_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM0_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM0_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM0_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM0_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM0_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM0_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM0_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM0_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM1_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM1_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM1_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM1_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM1_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM1_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM1_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM1_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM1_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM1_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM1_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM1_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM1_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM1_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM1_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM1_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM1_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM1_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM1_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM1_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM2_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM2_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM2_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM2_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM2_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM2_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM2_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM2_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM2_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM2_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM2_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM2_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM2_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM2_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM2_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM2_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM2_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM2_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM2_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM2_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM3_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM3_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM3_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM3_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM3_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM3_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM3_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM3_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM3_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM3_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM3_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM3_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM3_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM3_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM3_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_STATUS_SPIM3_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_STATUS_SPIM3_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_STATUS_SPIM3_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_STATUS_SPIM3_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_STATUS_SPIM3_EOT, baz);

        let foo = irqarray6_csr.r(utra::irqarray6::EV_PENDING);
        irqarray6_csr.wo(utra::irqarray6::EV_PENDING, foo);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM0_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM0_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM0_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM0_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM0_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM0_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM0_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM0_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM0_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM0_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM0_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM0_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM0_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM0_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM0_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM0_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM0_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM0_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM0_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM0_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM1_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM1_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM1_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM1_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM1_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM1_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM1_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM1_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM1_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM1_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM1_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM1_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM1_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM1_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM1_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM1_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM1_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM1_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM1_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM1_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM2_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM2_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM2_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM2_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM2_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM2_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM2_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM2_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM2_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM2_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM2_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM2_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM2_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM2_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM2_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM2_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM2_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM2_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM2_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM2_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM3_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM3_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM3_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM3_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM3_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM3_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM3_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM3_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM3_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM3_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM3_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM3_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM3_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM3_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM3_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_PENDING_SPIM3_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_PENDING_SPIM3_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_PENDING_SPIM3_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_PENDING_SPIM3_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_PENDING_SPIM3_EOT, baz);

        let foo = irqarray6_csr.r(utra::irqarray6::EV_ENABLE);
        irqarray6_csr.wo(utra::irqarray6::EV_ENABLE, foo);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM0_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM0_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM0_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM0_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM0_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM0_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM0_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM0_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM0_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM0_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM0_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM0_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM0_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM0_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM0_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM0_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM0_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM0_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM0_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM0_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM1_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM1_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM1_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM1_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM1_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM1_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM1_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM1_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM1_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM1_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM1_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM1_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM1_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM1_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM1_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM1_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM1_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM1_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM1_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM1_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM2_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM2_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM2_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM2_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM2_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM2_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM2_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM2_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM2_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM2_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM2_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM2_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM2_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM2_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM2_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM2_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM2_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM2_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM2_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM2_EOT, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM3_RX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM3_RX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM3_RX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM3_RX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM3_RX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM3_TX);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM3_TX, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM3_TX, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM3_TX, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM3_TX, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM3_CMD);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM3_CMD, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM3_CMD, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM3_CMD, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM3_CMD, baz);
        let bar = irqarray6_csr.rf(utra::irqarray6::EV_ENABLE_SPIM3_EOT);
        irqarray6_csr.rmwf(utra::irqarray6::EV_ENABLE_SPIM3_EOT, bar);
        let mut baz = irqarray6_csr.zf(utra::irqarray6::EV_ENABLE_SPIM3_EOT, bar);
        baz |= irqarray6_csr.ms(utra::irqarray6::EV_ENABLE_SPIM3_EOT, 1);
        irqarray6_csr.wfo(utra::irqarray6::EV_ENABLE_SPIM3_EOT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray7_csr() {
        use super::*;
        let mut irqarray7_csr = CSR::new(HW_IRQARRAY7_BASE as *mut u32);

        let foo = irqarray7_csr.r(utra::irqarray7::EV_SOFT);
        irqarray7_csr.wo(utra::irqarray7::EV_SOFT, foo);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_SOFT_TRIGGER);
        irqarray7_csr.rmwf(utra::irqarray7::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_SOFT_TRIGGER, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_SOFT_TRIGGER, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_SOFT_TRIGGER, baz);

        let foo = irqarray7_csr.r(utra::irqarray7::EV_EDGE_TRIGGERED);
        irqarray7_csr.wo(utra::irqarray7::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray7_csr.rmwf(utra::irqarray7::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray7_csr.r(utra::irqarray7::EV_POLARITY);
        irqarray7_csr.wo(utra::irqarray7::EV_POLARITY, foo);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_POLARITY_RISING);
        irqarray7_csr.rmwf(utra::irqarray7::EV_POLARITY_RISING, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_POLARITY_RISING, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_POLARITY_RISING, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_POLARITY_RISING, baz);

        let foo = irqarray7_csr.r(utra::irqarray7::EV_STATUS);
        irqarray7_csr.wo(utra::irqarray7::EV_STATUS, foo);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C0_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C0_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C0_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C0_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C0_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C0_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C0_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C0_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C0_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C0_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C0_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C0_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C0_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C0_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C0_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C0_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C0_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C0_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C0_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C0_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C1_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C1_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C1_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C1_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C1_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C1_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C1_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C1_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C1_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C1_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C1_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C1_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C1_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C1_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C1_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C1_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C1_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C1_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C1_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C1_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C2_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C2_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C2_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C2_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C2_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C2_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C2_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C2_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C2_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C2_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C2_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C2_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C2_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C2_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C2_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C2_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C2_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C2_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C2_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C2_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C3_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C3_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C3_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C3_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C3_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C3_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C3_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C3_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C3_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C3_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C3_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C3_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C3_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C3_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C3_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_STATUS_I2C3_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_STATUS_I2C3_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_STATUS_I2C3_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_STATUS_I2C3_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_STATUS_I2C3_EOT, baz);

        let foo = irqarray7_csr.r(utra::irqarray7::EV_PENDING);
        irqarray7_csr.wo(utra::irqarray7::EV_PENDING, foo);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C0_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C0_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C0_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C0_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C0_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C0_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C0_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C0_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C0_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C0_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C0_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C0_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C0_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C0_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C0_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C0_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C0_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C0_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C0_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C0_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C1_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C1_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C1_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C1_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C1_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C1_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C1_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C1_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C1_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C1_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C1_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C1_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C1_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C1_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C1_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C1_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C1_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C1_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C1_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C1_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C2_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C2_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C2_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C2_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C2_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C2_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C2_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C2_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C2_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C2_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C2_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C2_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C2_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C2_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C2_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C2_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C2_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C2_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C2_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C2_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C3_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C3_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C3_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C3_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C3_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C3_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C3_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C3_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C3_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C3_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C3_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C3_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C3_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C3_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C3_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_PENDING_I2C3_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_PENDING_I2C3_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_PENDING_I2C3_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_PENDING_I2C3_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_PENDING_I2C3_EOT, baz);

        let foo = irqarray7_csr.r(utra::irqarray7::EV_ENABLE);
        irqarray7_csr.wo(utra::irqarray7::EV_ENABLE, foo);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C0_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C0_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C0_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C0_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C0_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C0_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C0_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C0_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C0_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C0_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C0_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C0_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C0_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C0_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C0_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C0_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C0_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C0_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C0_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C0_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C1_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C1_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C1_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C1_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C1_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C1_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C1_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C1_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C1_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C1_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C1_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C1_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C1_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C1_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C1_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C1_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C1_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C1_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C1_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C1_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C2_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C2_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C2_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C2_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C2_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C2_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C2_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C2_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C2_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C2_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C2_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C2_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C2_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C2_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C2_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C2_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C2_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C2_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C2_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C2_EOT, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C3_RX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C3_RX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C3_RX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C3_RX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C3_RX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C3_TX);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C3_TX, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C3_TX, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C3_TX, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C3_TX, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C3_CMD);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C3_CMD, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C3_CMD, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C3_CMD, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C3_CMD, baz);
        let bar = irqarray7_csr.rf(utra::irqarray7::EV_ENABLE_I2C3_EOT);
        irqarray7_csr.rmwf(utra::irqarray7::EV_ENABLE_I2C3_EOT, bar);
        let mut baz = irqarray7_csr.zf(utra::irqarray7::EV_ENABLE_I2C3_EOT, bar);
        baz |= irqarray7_csr.ms(utra::irqarray7::EV_ENABLE_I2C3_EOT, 1);
        irqarray7_csr.wfo(utra::irqarray7::EV_ENABLE_I2C3_EOT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray8_csr() {
        use super::*;
        let mut irqarray8_csr = CSR::new(HW_IRQARRAY8_BASE as *mut u32);

        let foo = irqarray8_csr.r(utra::irqarray8::EV_SOFT);
        irqarray8_csr.wo(utra::irqarray8::EV_SOFT, foo);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_SOFT_TRIGGER);
        irqarray8_csr.rmwf(utra::irqarray8::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_SOFT_TRIGGER, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_SOFT_TRIGGER, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_SOFT_TRIGGER, baz);

        let foo = irqarray8_csr.r(utra::irqarray8::EV_EDGE_TRIGGERED);
        irqarray8_csr.wo(utra::irqarray8::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray8_csr.rmwf(utra::irqarray8::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray8_csr.r(utra::irqarray8::EV_POLARITY);
        irqarray8_csr.wo(utra::irqarray8::EV_POLARITY, foo);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_POLARITY_RISING);
        irqarray8_csr.rmwf(utra::irqarray8::EV_POLARITY_RISING, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_POLARITY_RISING, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_POLARITY_RISING, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_POLARITY_RISING, baz);

        let foo = irqarray8_csr.r(utra::irqarray8::EV_STATUS);
        irqarray8_csr.wo(utra::irqarray8::EV_STATUS, foo);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_SDIO_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_SDIO_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_SDIO_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_SDIO_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_SDIO_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_SDIO_TX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_SDIO_TX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_SDIO_TX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_SDIO_TX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_SDIO_TX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_SDIO_EOT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_SDIO_EOT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_SDIO_EOT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_SDIO_EOT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_SDIO_EOT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_SDIO_ERR);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_SDIO_ERR, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_SDIO_ERR, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_SDIO_ERR, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_SDIO_ERR, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_I2S_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_I2S_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_I2S_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_I2S_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_I2S_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_I2S_TX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_I2S_TX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_I2S_TX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_I2S_TX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_I2S_TX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_NC_B8S6);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_NC_B8S6, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_NC_B8S6, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_NC_B8S6, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_NC_B8S6, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_NC_B8S7);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_NC_B8S7, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_NC_B8S7, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_NC_B8S7, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_NC_B8S7, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_CAM_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_CAM_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_CAM_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_CAM_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_CAM_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_ADC_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_ADC_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_ADC_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_ADC_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_ADC_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_NC_B8S10);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_NC_B8S10, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_NC_B8S10, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_NC_B8S10, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_NC_B8S10, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_NC_B8S11);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_NC_B8S11, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_NC_B8S11, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_NC_B8S11, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_NC_B8S11, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_FILTER_EOT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_FILTER_EOT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_FILTER_EOT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_FILTER_EOT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_FILTER_EOT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_FILTER_ACT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_FILTER_ACT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_FILTER_ACT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_FILTER_ACT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_FILTER_ACT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_NC_B8S14);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_NC_B8S14, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_NC_B8S14, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_NC_B8S14, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_NC_B8S14, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_STATUS_NC_B8S15);
        irqarray8_csr.rmwf(utra::irqarray8::EV_STATUS_NC_B8S15, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_STATUS_NC_B8S15, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_STATUS_NC_B8S15, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_STATUS_NC_B8S15, baz);

        let foo = irqarray8_csr.r(utra::irqarray8::EV_PENDING);
        irqarray8_csr.wo(utra::irqarray8::EV_PENDING, foo);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_SDIO_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_SDIO_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_SDIO_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_SDIO_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_SDIO_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_SDIO_TX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_SDIO_TX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_SDIO_TX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_SDIO_TX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_SDIO_TX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_SDIO_EOT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_SDIO_EOT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_SDIO_EOT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_SDIO_EOT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_SDIO_EOT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_SDIO_ERR);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_SDIO_ERR, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_SDIO_ERR, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_SDIO_ERR, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_SDIO_ERR, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_I2S_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_I2S_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_I2S_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_I2S_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_I2S_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_I2S_TX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_I2S_TX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_I2S_TX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_I2S_TX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_I2S_TX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_NC_B8S6);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_NC_B8S6, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_NC_B8S6, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_NC_B8S6, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_NC_B8S6, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_NC_B8S7);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_NC_B8S7, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_NC_B8S7, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_NC_B8S7, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_NC_B8S7, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_CAM_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_CAM_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_CAM_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_CAM_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_CAM_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_ADC_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_ADC_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_ADC_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_ADC_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_ADC_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_NC_B8S10);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_NC_B8S10, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_NC_B8S10, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_NC_B8S10, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_NC_B8S10, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_NC_B8S11);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_NC_B8S11, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_NC_B8S11, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_NC_B8S11, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_NC_B8S11, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_FILTER_EOT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_FILTER_EOT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_FILTER_EOT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_FILTER_EOT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_FILTER_EOT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_FILTER_ACT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_FILTER_ACT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_FILTER_ACT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_FILTER_ACT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_FILTER_ACT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_NC_B8S14);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_NC_B8S14, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_NC_B8S14, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_NC_B8S14, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_NC_B8S14, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_PENDING_NC_B8S15);
        irqarray8_csr.rmwf(utra::irqarray8::EV_PENDING_NC_B8S15, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_PENDING_NC_B8S15, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_PENDING_NC_B8S15, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_PENDING_NC_B8S15, baz);

        let foo = irqarray8_csr.r(utra::irqarray8::EV_ENABLE);
        irqarray8_csr.wo(utra::irqarray8::EV_ENABLE, foo);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_SDIO_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_SDIO_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_SDIO_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_SDIO_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_SDIO_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_SDIO_TX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_SDIO_TX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_SDIO_TX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_SDIO_TX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_SDIO_TX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_SDIO_EOT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_SDIO_EOT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_SDIO_EOT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_SDIO_EOT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_SDIO_EOT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_SDIO_ERR);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_SDIO_ERR, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_SDIO_ERR, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_SDIO_ERR, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_SDIO_ERR, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_I2S_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_I2S_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_I2S_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_I2S_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_I2S_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_I2S_TX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_I2S_TX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_I2S_TX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_I2S_TX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_I2S_TX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_NC_B8S6);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_NC_B8S6, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_NC_B8S6, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_NC_B8S6, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_NC_B8S6, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_NC_B8S7);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_NC_B8S7, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_NC_B8S7, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_NC_B8S7, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_NC_B8S7, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_CAM_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_CAM_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_CAM_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_CAM_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_CAM_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_ADC_RX);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_ADC_RX, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_ADC_RX, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_ADC_RX, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_ADC_RX, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_NC_B8S10);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_NC_B8S10, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_NC_B8S10, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_NC_B8S10, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_NC_B8S10, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_NC_B8S11);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_NC_B8S11, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_NC_B8S11, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_NC_B8S11, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_NC_B8S11, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_FILTER_EOT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_FILTER_EOT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_FILTER_EOT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_FILTER_EOT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_FILTER_EOT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_FILTER_ACT);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_FILTER_ACT, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_FILTER_ACT, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_FILTER_ACT, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_FILTER_ACT, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_NC_B8S14);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_NC_B8S14, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_NC_B8S14, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_NC_B8S14, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_NC_B8S14, baz);
        let bar = irqarray8_csr.rf(utra::irqarray8::EV_ENABLE_NC_B8S15);
        irqarray8_csr.rmwf(utra::irqarray8::EV_ENABLE_NC_B8S15, bar);
        let mut baz = irqarray8_csr.zf(utra::irqarray8::EV_ENABLE_NC_B8S15, bar);
        baz |= irqarray8_csr.ms(utra::irqarray8::EV_ENABLE_NC_B8S15, 1);
        irqarray8_csr.wfo(utra::irqarray8::EV_ENABLE_NC_B8S15, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_irqarray9_csr() {
        use super::*;
        let mut irqarray9_csr = CSR::new(HW_IRQARRAY9_BASE as *mut u32);

        let foo = irqarray9_csr.r(utra::irqarray9::EV_SOFT);
        irqarray9_csr.wo(utra::irqarray9::EV_SOFT, foo);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_SOFT_TRIGGER);
        irqarray9_csr.rmwf(utra::irqarray9::EV_SOFT_TRIGGER, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_SOFT_TRIGGER, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_SOFT_TRIGGER, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_SOFT_TRIGGER, baz);

        let foo = irqarray9_csr.r(utra::irqarray9::EV_EDGE_TRIGGERED);
        irqarray9_csr.wo(utra::irqarray9::EV_EDGE_TRIGGERED, foo);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_EDGE_TRIGGERED_USE_EDGE);
        irqarray9_csr.rmwf(utra::irqarray9::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_EDGE_TRIGGERED_USE_EDGE, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_EDGE_TRIGGERED_USE_EDGE, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_EDGE_TRIGGERED_USE_EDGE, baz);

        let foo = irqarray9_csr.r(utra::irqarray9::EV_POLARITY);
        irqarray9_csr.wo(utra::irqarray9::EV_POLARITY, foo);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_POLARITY_RISING);
        irqarray9_csr.rmwf(utra::irqarray9::EV_POLARITY_RISING, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_POLARITY_RISING, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_POLARITY_RISING, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_POLARITY_RISING, baz);

        let foo = irqarray9_csr.r(utra::irqarray9::EV_STATUS);
        irqarray9_csr.wo(utra::irqarray9::EV_STATUS, foo);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SCIF_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SCIF_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SCIF_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SCIF_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SCIF_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SCIF_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SCIF_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SCIF_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SCIF_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SCIF_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SCIF_RX_CHAR);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SCIF_RX_CHAR, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SCIF_RX_CHAR, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SCIF_RX_CHAR, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SCIF_RX_CHAR, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SCIF_ERR);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SCIF_ERR, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SCIF_ERR, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SCIF_ERR, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SCIF_ERR, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SPIS0_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SPIS0_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SPIS0_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SPIS0_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SPIS0_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SPIS0_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SPIS0_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SPIS0_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SPIS0_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SPIS0_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SPIS0_EOT);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SPIS0_EOT, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SPIS0_EOT, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SPIS0_EOT, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SPIS0_EOT, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_NC_B9S7);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_NC_B9S7, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_NC_B9S7, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_NC_B9S7, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_NC_B9S7, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SPIS1_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SPIS1_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SPIS1_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SPIS1_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SPIS1_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SPIS1_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SPIS1_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SPIS1_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SPIS1_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SPIS1_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_SPIS1_EOT);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_SPIS1_EOT, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_SPIS1_EOT, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_SPIS1_EOT, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_SPIS1_EOT, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_NC_B9S11);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_NC_B9S11, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_NC_B9S11, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_NC_B9S11, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_NC_B9S11, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_PWM0_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_PWM0_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_PWM0_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_PWM0_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_PWM0_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_PWM1_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_PWM1_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_PWM1_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_PWM1_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_PWM1_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_PWM2_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_PWM2_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_PWM2_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_PWM2_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_PWM2_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_STATUS_PWM3_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_STATUS_PWM3_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_STATUS_PWM3_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_STATUS_PWM3_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_STATUS_PWM3_EV, baz);

        let foo = irqarray9_csr.r(utra::irqarray9::EV_PENDING);
        irqarray9_csr.wo(utra::irqarray9::EV_PENDING, foo);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SCIF_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SCIF_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SCIF_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SCIF_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SCIF_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SCIF_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SCIF_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SCIF_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SCIF_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SCIF_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SCIF_RX_CHAR);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SCIF_RX_CHAR, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SCIF_RX_CHAR, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SCIF_RX_CHAR, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SCIF_RX_CHAR, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SCIF_ERR);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SCIF_ERR, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SCIF_ERR, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SCIF_ERR, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SCIF_ERR, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SPIS0_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SPIS0_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SPIS0_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SPIS0_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SPIS0_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SPIS0_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SPIS0_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SPIS0_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SPIS0_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SPIS0_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SPIS0_EOT);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SPIS0_EOT, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SPIS0_EOT, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SPIS0_EOT, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SPIS0_EOT, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_NC_B9S7);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_NC_B9S7, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_NC_B9S7, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_NC_B9S7, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_NC_B9S7, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SPIS1_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SPIS1_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SPIS1_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SPIS1_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SPIS1_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SPIS1_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SPIS1_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SPIS1_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SPIS1_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SPIS1_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_SPIS1_EOT);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_SPIS1_EOT, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_SPIS1_EOT, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_SPIS1_EOT, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_SPIS1_EOT, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_NC_B9S11);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_NC_B9S11, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_NC_B9S11, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_NC_B9S11, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_NC_B9S11, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_PWM0_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_PWM0_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_PWM0_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_PWM0_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_PWM0_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_PWM1_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_PWM1_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_PWM1_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_PWM1_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_PWM1_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_PWM2_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_PWM2_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_PWM2_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_PWM2_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_PWM2_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_PENDING_PWM3_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_PENDING_PWM3_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_PENDING_PWM3_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_PENDING_PWM3_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_PENDING_PWM3_EV, baz);

        let foo = irqarray9_csr.r(utra::irqarray9::EV_ENABLE);
        irqarray9_csr.wo(utra::irqarray9::EV_ENABLE, foo);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SCIF_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SCIF_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SCIF_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SCIF_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SCIF_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SCIF_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SCIF_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SCIF_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SCIF_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SCIF_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SCIF_RX_CHAR);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SCIF_RX_CHAR, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SCIF_RX_CHAR, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SCIF_RX_CHAR, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SCIF_RX_CHAR, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SCIF_ERR);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SCIF_ERR, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SCIF_ERR, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SCIF_ERR, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SCIF_ERR, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SPIS0_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SPIS0_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SPIS0_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SPIS0_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SPIS0_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SPIS0_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SPIS0_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SPIS0_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SPIS0_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SPIS0_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SPIS0_EOT);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SPIS0_EOT, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SPIS0_EOT, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SPIS0_EOT, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SPIS0_EOT, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_NC_B9S7);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_NC_B9S7, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_NC_B9S7, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_NC_B9S7, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_NC_B9S7, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SPIS1_RX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SPIS1_RX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SPIS1_RX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SPIS1_RX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SPIS1_RX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SPIS1_TX);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SPIS1_TX, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SPIS1_TX, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SPIS1_TX, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SPIS1_TX, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_SPIS1_EOT);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_SPIS1_EOT, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_SPIS1_EOT, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_SPIS1_EOT, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_SPIS1_EOT, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_NC_B9S11);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_NC_B9S11, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_NC_B9S11, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_NC_B9S11, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_NC_B9S11, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_PWM0_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_PWM0_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_PWM0_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_PWM0_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_PWM0_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_PWM1_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_PWM1_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_PWM1_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_PWM1_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_PWM1_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_PWM2_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_PWM2_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_PWM2_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_PWM2_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_PWM2_EV, baz);
        let bar = irqarray9_csr.rf(utra::irqarray9::EV_ENABLE_PWM3_EV);
        irqarray9_csr.rmwf(utra::irqarray9::EV_ENABLE_PWM3_EV, bar);
        let mut baz = irqarray9_csr.zf(utra::irqarray9::EV_ENABLE_PWM3_EV, bar);
        baz |= irqarray9_csr.ms(utra::irqarray9::EV_ENABLE_PWM3_EV, 1);
        irqarray9_csr.wfo(utra::irqarray9::EV_ENABLE_PWM3_EV, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_mailbox_csr() {
        use super::*;
        let mut mailbox_csr = CSR::new(HW_MAILBOX_BASE as *mut u32);

        let foo = mailbox_csr.r(utra::mailbox::WDATA);
        mailbox_csr.wo(utra::mailbox::WDATA, foo);
        let bar = mailbox_csr.rf(utra::mailbox::WDATA_WDATA);
        mailbox_csr.rmwf(utra::mailbox::WDATA_WDATA, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::WDATA_WDATA, bar);
        baz |= mailbox_csr.ms(utra::mailbox::WDATA_WDATA, 1);
        mailbox_csr.wfo(utra::mailbox::WDATA_WDATA, baz);

        let foo = mailbox_csr.r(utra::mailbox::RDATA);
        mailbox_csr.wo(utra::mailbox::RDATA, foo);
        let bar = mailbox_csr.rf(utra::mailbox::RDATA_RDATA);
        mailbox_csr.rmwf(utra::mailbox::RDATA_RDATA, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::RDATA_RDATA, bar);
        baz |= mailbox_csr.ms(utra::mailbox::RDATA_RDATA, 1);
        mailbox_csr.wfo(utra::mailbox::RDATA_RDATA, baz);

        let foo = mailbox_csr.r(utra::mailbox::EV_STATUS);
        mailbox_csr.wo(utra::mailbox::EV_STATUS, foo);
        let bar = mailbox_csr.rf(utra::mailbox::EV_STATUS_AVAILABLE);
        mailbox_csr.rmwf(utra::mailbox::EV_STATUS_AVAILABLE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_STATUS_AVAILABLE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_STATUS_AVAILABLE, 1);
        mailbox_csr.wfo(utra::mailbox::EV_STATUS_AVAILABLE, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_STATUS_ABORT_INIT);
        mailbox_csr.rmwf(utra::mailbox::EV_STATUS_ABORT_INIT, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_STATUS_ABORT_INIT, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_STATUS_ABORT_INIT, 1);
        mailbox_csr.wfo(utra::mailbox::EV_STATUS_ABORT_INIT, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_STATUS_ABORT_DONE);
        mailbox_csr.rmwf(utra::mailbox::EV_STATUS_ABORT_DONE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_STATUS_ABORT_DONE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_STATUS_ABORT_DONE, 1);
        mailbox_csr.wfo(utra::mailbox::EV_STATUS_ABORT_DONE, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_STATUS_ERROR);
        mailbox_csr.rmwf(utra::mailbox::EV_STATUS_ERROR, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_STATUS_ERROR, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_STATUS_ERROR, 1);
        mailbox_csr.wfo(utra::mailbox::EV_STATUS_ERROR, baz);

        let foo = mailbox_csr.r(utra::mailbox::EV_PENDING);
        mailbox_csr.wo(utra::mailbox::EV_PENDING, foo);
        let bar = mailbox_csr.rf(utra::mailbox::EV_PENDING_AVAILABLE);
        mailbox_csr.rmwf(utra::mailbox::EV_PENDING_AVAILABLE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_PENDING_AVAILABLE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_PENDING_AVAILABLE, 1);
        mailbox_csr.wfo(utra::mailbox::EV_PENDING_AVAILABLE, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_PENDING_ABORT_INIT);
        mailbox_csr.rmwf(utra::mailbox::EV_PENDING_ABORT_INIT, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_PENDING_ABORT_INIT, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_PENDING_ABORT_INIT, 1);
        mailbox_csr.wfo(utra::mailbox::EV_PENDING_ABORT_INIT, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_PENDING_ABORT_DONE);
        mailbox_csr.rmwf(utra::mailbox::EV_PENDING_ABORT_DONE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_PENDING_ABORT_DONE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_PENDING_ABORT_DONE, 1);
        mailbox_csr.wfo(utra::mailbox::EV_PENDING_ABORT_DONE, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_PENDING_ERROR);
        mailbox_csr.rmwf(utra::mailbox::EV_PENDING_ERROR, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_PENDING_ERROR, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_PENDING_ERROR, 1);
        mailbox_csr.wfo(utra::mailbox::EV_PENDING_ERROR, baz);

        let foo = mailbox_csr.r(utra::mailbox::EV_ENABLE);
        mailbox_csr.wo(utra::mailbox::EV_ENABLE, foo);
        let bar = mailbox_csr.rf(utra::mailbox::EV_ENABLE_AVAILABLE);
        mailbox_csr.rmwf(utra::mailbox::EV_ENABLE_AVAILABLE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_ENABLE_AVAILABLE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_ENABLE_AVAILABLE, 1);
        mailbox_csr.wfo(utra::mailbox::EV_ENABLE_AVAILABLE, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_ENABLE_ABORT_INIT);
        mailbox_csr.rmwf(utra::mailbox::EV_ENABLE_ABORT_INIT, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_ENABLE_ABORT_INIT, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_ENABLE_ABORT_INIT, 1);
        mailbox_csr.wfo(utra::mailbox::EV_ENABLE_ABORT_INIT, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_ENABLE_ABORT_DONE);
        mailbox_csr.rmwf(utra::mailbox::EV_ENABLE_ABORT_DONE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_ENABLE_ABORT_DONE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_ENABLE_ABORT_DONE, 1);
        mailbox_csr.wfo(utra::mailbox::EV_ENABLE_ABORT_DONE, baz);
        let bar = mailbox_csr.rf(utra::mailbox::EV_ENABLE_ERROR);
        mailbox_csr.rmwf(utra::mailbox::EV_ENABLE_ERROR, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::EV_ENABLE_ERROR, bar);
        baz |= mailbox_csr.ms(utra::mailbox::EV_ENABLE_ERROR, 1);
        mailbox_csr.wfo(utra::mailbox::EV_ENABLE_ERROR, baz);

        let foo = mailbox_csr.r(utra::mailbox::STATUS);
        mailbox_csr.wo(utra::mailbox::STATUS, foo);
        let bar = mailbox_csr.rf(utra::mailbox::STATUS_RX_WORDS);
        mailbox_csr.rmwf(utra::mailbox::STATUS_RX_WORDS, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::STATUS_RX_WORDS, bar);
        baz |= mailbox_csr.ms(utra::mailbox::STATUS_RX_WORDS, 1);
        mailbox_csr.wfo(utra::mailbox::STATUS_RX_WORDS, baz);
        let bar = mailbox_csr.rf(utra::mailbox::STATUS_TX_WORDS);
        mailbox_csr.rmwf(utra::mailbox::STATUS_TX_WORDS, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::STATUS_TX_WORDS, bar);
        baz |= mailbox_csr.ms(utra::mailbox::STATUS_TX_WORDS, 1);
        mailbox_csr.wfo(utra::mailbox::STATUS_TX_WORDS, baz);
        let bar = mailbox_csr.rf(utra::mailbox::STATUS_ABORT_IN_PROGRESS);
        mailbox_csr.rmwf(utra::mailbox::STATUS_ABORT_IN_PROGRESS, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::STATUS_ABORT_IN_PROGRESS, bar);
        baz |= mailbox_csr.ms(utra::mailbox::STATUS_ABORT_IN_PROGRESS, 1);
        mailbox_csr.wfo(utra::mailbox::STATUS_ABORT_IN_PROGRESS, baz);
        let bar = mailbox_csr.rf(utra::mailbox::STATUS_ABORT_ACK);
        mailbox_csr.rmwf(utra::mailbox::STATUS_ABORT_ACK, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::STATUS_ABORT_ACK, bar);
        baz |= mailbox_csr.ms(utra::mailbox::STATUS_ABORT_ACK, 1);
        mailbox_csr.wfo(utra::mailbox::STATUS_ABORT_ACK, baz);
        let bar = mailbox_csr.rf(utra::mailbox::STATUS_TX_ERR);
        mailbox_csr.rmwf(utra::mailbox::STATUS_TX_ERR, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::STATUS_TX_ERR, bar);
        baz |= mailbox_csr.ms(utra::mailbox::STATUS_TX_ERR, 1);
        mailbox_csr.wfo(utra::mailbox::STATUS_TX_ERR, baz);
        let bar = mailbox_csr.rf(utra::mailbox::STATUS_RX_ERR);
        mailbox_csr.rmwf(utra::mailbox::STATUS_RX_ERR, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::STATUS_RX_ERR, bar);
        baz |= mailbox_csr.ms(utra::mailbox::STATUS_RX_ERR, 1);
        mailbox_csr.wfo(utra::mailbox::STATUS_RX_ERR, baz);

        let foo = mailbox_csr.r(utra::mailbox::CONTROL);
        mailbox_csr.wo(utra::mailbox::CONTROL, foo);
        let bar = mailbox_csr.rf(utra::mailbox::CONTROL_ABORT);
        mailbox_csr.rmwf(utra::mailbox::CONTROL_ABORT, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::CONTROL_ABORT, bar);
        baz |= mailbox_csr.ms(utra::mailbox::CONTROL_ABORT, 1);
        mailbox_csr.wfo(utra::mailbox::CONTROL_ABORT, baz);

        let foo = mailbox_csr.r(utra::mailbox::DONE);
        mailbox_csr.wo(utra::mailbox::DONE, foo);
        let bar = mailbox_csr.rf(utra::mailbox::DONE_DONE);
        mailbox_csr.rmwf(utra::mailbox::DONE_DONE, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::DONE_DONE, bar);
        baz |= mailbox_csr.ms(utra::mailbox::DONE_DONE, 1);
        mailbox_csr.wfo(utra::mailbox::DONE_DONE, baz);

        let foo = mailbox_csr.r(utra::mailbox::LOOPBACK);
        mailbox_csr.wo(utra::mailbox::LOOPBACK, foo);
        let bar = mailbox_csr.rf(utra::mailbox::LOOPBACK_LOOPBACK);
        mailbox_csr.rmwf(utra::mailbox::LOOPBACK_LOOPBACK, bar);
        let mut baz = mailbox_csr.zf(utra::mailbox::LOOPBACK_LOOPBACK, bar);
        baz |= mailbox_csr.ms(utra::mailbox::LOOPBACK_LOOPBACK, 1);
        mailbox_csr.wfo(utra::mailbox::LOOPBACK_LOOPBACK, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_mb_client_csr() {
        use super::*;
        let mut mb_client_csr = CSR::new(HW_MB_CLIENT_BASE as *mut u32);

        let foo = mb_client_csr.r(utra::mb_client::WDATA);
        mb_client_csr.wo(utra::mb_client::WDATA, foo);
        let bar = mb_client_csr.rf(utra::mb_client::WDATA_WDATA);
        mb_client_csr.rmwf(utra::mb_client::WDATA_WDATA, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::WDATA_WDATA, bar);
        baz |= mb_client_csr.ms(utra::mb_client::WDATA_WDATA, 1);
        mb_client_csr.wfo(utra::mb_client::WDATA_WDATA, baz);

        let foo = mb_client_csr.r(utra::mb_client::RDATA);
        mb_client_csr.wo(utra::mb_client::RDATA, foo);
        let bar = mb_client_csr.rf(utra::mb_client::RDATA_RDATA);
        mb_client_csr.rmwf(utra::mb_client::RDATA_RDATA, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::RDATA_RDATA, bar);
        baz |= mb_client_csr.ms(utra::mb_client::RDATA_RDATA, 1);
        mb_client_csr.wfo(utra::mb_client::RDATA_RDATA, baz);

        let foo = mb_client_csr.r(utra::mb_client::STATUS);
        mb_client_csr.wo(utra::mb_client::STATUS, foo);
        let bar = mb_client_csr.rf(utra::mb_client::STATUS_RX_AVAIL);
        mb_client_csr.rmwf(utra::mb_client::STATUS_RX_AVAIL, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::STATUS_RX_AVAIL, bar);
        baz |= mb_client_csr.ms(utra::mb_client::STATUS_RX_AVAIL, 1);
        mb_client_csr.wfo(utra::mb_client::STATUS_RX_AVAIL, baz);
        let bar = mb_client_csr.rf(utra::mb_client::STATUS_TX_FREE);
        mb_client_csr.rmwf(utra::mb_client::STATUS_TX_FREE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::STATUS_TX_FREE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::STATUS_TX_FREE, 1);
        mb_client_csr.wfo(utra::mb_client::STATUS_TX_FREE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::STATUS_ABORT_IN_PROGRESS);
        mb_client_csr.rmwf(utra::mb_client::STATUS_ABORT_IN_PROGRESS, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::STATUS_ABORT_IN_PROGRESS, bar);
        baz |= mb_client_csr.ms(utra::mb_client::STATUS_ABORT_IN_PROGRESS, 1);
        mb_client_csr.wfo(utra::mb_client::STATUS_ABORT_IN_PROGRESS, baz);
        let bar = mb_client_csr.rf(utra::mb_client::STATUS_ABORT_ACK);
        mb_client_csr.rmwf(utra::mb_client::STATUS_ABORT_ACK, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::STATUS_ABORT_ACK, bar);
        baz |= mb_client_csr.ms(utra::mb_client::STATUS_ABORT_ACK, 1);
        mb_client_csr.wfo(utra::mb_client::STATUS_ABORT_ACK, baz);
        let bar = mb_client_csr.rf(utra::mb_client::STATUS_TX_ERR);
        mb_client_csr.rmwf(utra::mb_client::STATUS_TX_ERR, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::STATUS_TX_ERR, bar);
        baz |= mb_client_csr.ms(utra::mb_client::STATUS_TX_ERR, 1);
        mb_client_csr.wfo(utra::mb_client::STATUS_TX_ERR, baz);
        let bar = mb_client_csr.rf(utra::mb_client::STATUS_RX_ERR);
        mb_client_csr.rmwf(utra::mb_client::STATUS_RX_ERR, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::STATUS_RX_ERR, bar);
        baz |= mb_client_csr.ms(utra::mb_client::STATUS_RX_ERR, 1);
        mb_client_csr.wfo(utra::mb_client::STATUS_RX_ERR, baz);

        let foo = mb_client_csr.r(utra::mb_client::EV_STATUS);
        mb_client_csr.wo(utra::mb_client::EV_STATUS, foo);
        let bar = mb_client_csr.rf(utra::mb_client::EV_STATUS_AVAILABLE);
        mb_client_csr.rmwf(utra::mb_client::EV_STATUS_AVAILABLE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_STATUS_AVAILABLE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_STATUS_AVAILABLE, 1);
        mb_client_csr.wfo(utra::mb_client::EV_STATUS_AVAILABLE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_STATUS_ABORT_INIT);
        mb_client_csr.rmwf(utra::mb_client::EV_STATUS_ABORT_INIT, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_STATUS_ABORT_INIT, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_STATUS_ABORT_INIT, 1);
        mb_client_csr.wfo(utra::mb_client::EV_STATUS_ABORT_INIT, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_STATUS_ABORT_DONE);
        mb_client_csr.rmwf(utra::mb_client::EV_STATUS_ABORT_DONE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_STATUS_ABORT_DONE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_STATUS_ABORT_DONE, 1);
        mb_client_csr.wfo(utra::mb_client::EV_STATUS_ABORT_DONE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_STATUS_ERROR);
        mb_client_csr.rmwf(utra::mb_client::EV_STATUS_ERROR, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_STATUS_ERROR, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_STATUS_ERROR, 1);
        mb_client_csr.wfo(utra::mb_client::EV_STATUS_ERROR, baz);

        let foo = mb_client_csr.r(utra::mb_client::EV_PENDING);
        mb_client_csr.wo(utra::mb_client::EV_PENDING, foo);
        let bar = mb_client_csr.rf(utra::mb_client::EV_PENDING_AVAILABLE);
        mb_client_csr.rmwf(utra::mb_client::EV_PENDING_AVAILABLE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_PENDING_AVAILABLE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_PENDING_AVAILABLE, 1);
        mb_client_csr.wfo(utra::mb_client::EV_PENDING_AVAILABLE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_PENDING_ABORT_INIT);
        mb_client_csr.rmwf(utra::mb_client::EV_PENDING_ABORT_INIT, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_PENDING_ABORT_INIT, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_PENDING_ABORT_INIT, 1);
        mb_client_csr.wfo(utra::mb_client::EV_PENDING_ABORT_INIT, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_PENDING_ABORT_DONE);
        mb_client_csr.rmwf(utra::mb_client::EV_PENDING_ABORT_DONE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_PENDING_ABORT_DONE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_PENDING_ABORT_DONE, 1);
        mb_client_csr.wfo(utra::mb_client::EV_PENDING_ABORT_DONE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_PENDING_ERROR);
        mb_client_csr.rmwf(utra::mb_client::EV_PENDING_ERROR, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_PENDING_ERROR, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_PENDING_ERROR, 1);
        mb_client_csr.wfo(utra::mb_client::EV_PENDING_ERROR, baz);

        let foo = mb_client_csr.r(utra::mb_client::EV_ENABLE);
        mb_client_csr.wo(utra::mb_client::EV_ENABLE, foo);
        let bar = mb_client_csr.rf(utra::mb_client::EV_ENABLE_AVAILABLE);
        mb_client_csr.rmwf(utra::mb_client::EV_ENABLE_AVAILABLE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_ENABLE_AVAILABLE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_ENABLE_AVAILABLE, 1);
        mb_client_csr.wfo(utra::mb_client::EV_ENABLE_AVAILABLE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_ENABLE_ABORT_INIT);
        mb_client_csr.rmwf(utra::mb_client::EV_ENABLE_ABORT_INIT, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_ENABLE_ABORT_INIT, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_ENABLE_ABORT_INIT, 1);
        mb_client_csr.wfo(utra::mb_client::EV_ENABLE_ABORT_INIT, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_ENABLE_ABORT_DONE);
        mb_client_csr.rmwf(utra::mb_client::EV_ENABLE_ABORT_DONE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_ENABLE_ABORT_DONE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_ENABLE_ABORT_DONE, 1);
        mb_client_csr.wfo(utra::mb_client::EV_ENABLE_ABORT_DONE, baz);
        let bar = mb_client_csr.rf(utra::mb_client::EV_ENABLE_ERROR);
        mb_client_csr.rmwf(utra::mb_client::EV_ENABLE_ERROR, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::EV_ENABLE_ERROR, bar);
        baz |= mb_client_csr.ms(utra::mb_client::EV_ENABLE_ERROR, 1);
        mb_client_csr.wfo(utra::mb_client::EV_ENABLE_ERROR, baz);

        let foo = mb_client_csr.r(utra::mb_client::CONTROL);
        mb_client_csr.wo(utra::mb_client::CONTROL, foo);
        let bar = mb_client_csr.rf(utra::mb_client::CONTROL_ABORT);
        mb_client_csr.rmwf(utra::mb_client::CONTROL_ABORT, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::CONTROL_ABORT, bar);
        baz |= mb_client_csr.ms(utra::mb_client::CONTROL_ABORT, 1);
        mb_client_csr.wfo(utra::mb_client::CONTROL_ABORT, baz);

        let foo = mb_client_csr.r(utra::mb_client::DONE);
        mb_client_csr.wo(utra::mb_client::DONE, foo);
        let bar = mb_client_csr.rf(utra::mb_client::DONE_DONE);
        mb_client_csr.rmwf(utra::mb_client::DONE_DONE, bar);
        let mut baz = mb_client_csr.zf(utra::mb_client::DONE_DONE, bar);
        baz |= mb_client_csr.ms(utra::mb_client::DONE_DONE, 1);
        mb_client_csr.wfo(utra::mb_client::DONE_DONE, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_resetvalue_csr() {
        use super::*;
        let mut resetvalue_csr = CSR::new(HW_RESETVALUE_BASE as *mut u32);

        let foo = resetvalue_csr.r(utra::resetvalue::PC);
        resetvalue_csr.wo(utra::resetvalue::PC, foo);
        let bar = resetvalue_csr.rf(utra::resetvalue::PC_PC);
        resetvalue_csr.rmwf(utra::resetvalue::PC_PC, bar);
        let mut baz = resetvalue_csr.zf(utra::resetvalue::PC_PC, bar);
        baz |= resetvalue_csr.ms(utra::resetvalue::PC_PC, 1);
        resetvalue_csr.wfo(utra::resetvalue::PC_PC, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_ticktimer_csr() {
        use super::*;
        let mut ticktimer_csr = CSR::new(HW_TICKTIMER_BASE as *mut u32);

        let foo = ticktimer_csr.r(utra::ticktimer::CONTROL);
        ticktimer_csr.wo(utra::ticktimer::CONTROL, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::CONTROL_RESET);
        ticktimer_csr.rmwf(utra::ticktimer::CONTROL_RESET, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::CONTROL_RESET, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::CONTROL_RESET, 1);
        ticktimer_csr.wfo(utra::ticktimer::CONTROL_RESET, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::TIME1);
        ticktimer_csr.wo(utra::ticktimer::TIME1, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::TIME1_TIME);
        ticktimer_csr.rmwf(utra::ticktimer::TIME1_TIME, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::TIME1_TIME, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::TIME1_TIME, 1);
        ticktimer_csr.wfo(utra::ticktimer::TIME1_TIME, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::TIME0);
        ticktimer_csr.wo(utra::ticktimer::TIME0, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::TIME0_TIME);
        ticktimer_csr.rmwf(utra::ticktimer::TIME0_TIME, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::TIME0_TIME, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::TIME0_TIME, 1);
        ticktimer_csr.wfo(utra::ticktimer::TIME0_TIME, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::MSLEEP_TARGET1);
        ticktimer_csr.wo(utra::ticktimer::MSLEEP_TARGET1, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::MSLEEP_TARGET1_MSLEEP_TARGET);
        ticktimer_csr.rmwf(utra::ticktimer::MSLEEP_TARGET1_MSLEEP_TARGET, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::MSLEEP_TARGET1_MSLEEP_TARGET, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::MSLEEP_TARGET1_MSLEEP_TARGET, 1);
        ticktimer_csr.wfo(utra::ticktimer::MSLEEP_TARGET1_MSLEEP_TARGET, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::MSLEEP_TARGET0);
        ticktimer_csr.wo(utra::ticktimer::MSLEEP_TARGET0, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::MSLEEP_TARGET0_MSLEEP_TARGET);
        ticktimer_csr.rmwf(utra::ticktimer::MSLEEP_TARGET0_MSLEEP_TARGET, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::MSLEEP_TARGET0_MSLEEP_TARGET, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::MSLEEP_TARGET0_MSLEEP_TARGET, 1);
        ticktimer_csr.wfo(utra::ticktimer::MSLEEP_TARGET0_MSLEEP_TARGET, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::EV_STATUS);
        ticktimer_csr.wo(utra::ticktimer::EV_STATUS, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::EV_STATUS_ALARM);
        ticktimer_csr.rmwf(utra::ticktimer::EV_STATUS_ALARM, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::EV_STATUS_ALARM, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::EV_STATUS_ALARM, 1);
        ticktimer_csr.wfo(utra::ticktimer::EV_STATUS_ALARM, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::EV_PENDING);
        ticktimer_csr.wo(utra::ticktimer::EV_PENDING, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::EV_PENDING_ALARM);
        ticktimer_csr.rmwf(utra::ticktimer::EV_PENDING_ALARM, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::EV_PENDING_ALARM, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::EV_PENDING_ALARM, 1);
        ticktimer_csr.wfo(utra::ticktimer::EV_PENDING_ALARM, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::EV_ENABLE);
        ticktimer_csr.wo(utra::ticktimer::EV_ENABLE, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::EV_ENABLE_ALARM);
        ticktimer_csr.rmwf(utra::ticktimer::EV_ENABLE_ALARM, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::EV_ENABLE_ALARM, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::EV_ENABLE_ALARM, 1);
        ticktimer_csr.wfo(utra::ticktimer::EV_ENABLE_ALARM, baz);

        let foo = ticktimer_csr.r(utra::ticktimer::CLOCKS_PER_TICK);
        ticktimer_csr.wo(utra::ticktimer::CLOCKS_PER_TICK, foo);
        let bar = ticktimer_csr.rf(utra::ticktimer::CLOCKS_PER_TICK_CLOCKS_PER_TICK);
        ticktimer_csr.rmwf(utra::ticktimer::CLOCKS_PER_TICK_CLOCKS_PER_TICK, bar);
        let mut baz = ticktimer_csr.zf(utra::ticktimer::CLOCKS_PER_TICK_CLOCKS_PER_TICK, bar);
        baz |= ticktimer_csr.ms(utra::ticktimer::CLOCKS_PER_TICK_CLOCKS_PER_TICK, 1);
        ticktimer_csr.wfo(utra::ticktimer::CLOCKS_PER_TICK_CLOCKS_PER_TICK, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_timer0_csr() {
        use super::*;
        let mut timer0_csr = CSR::new(HW_TIMER0_BASE as *mut u32);

        let foo = timer0_csr.r(utra::timer0::LOAD);
        timer0_csr.wo(utra::timer0::LOAD, foo);
        let bar = timer0_csr.rf(utra::timer0::LOAD_LOAD);
        timer0_csr.rmwf(utra::timer0::LOAD_LOAD, bar);
        let mut baz = timer0_csr.zf(utra::timer0::LOAD_LOAD, bar);
        baz |= timer0_csr.ms(utra::timer0::LOAD_LOAD, 1);
        timer0_csr.wfo(utra::timer0::LOAD_LOAD, baz);

        let foo = timer0_csr.r(utra::timer0::RELOAD);
        timer0_csr.wo(utra::timer0::RELOAD, foo);
        let bar = timer0_csr.rf(utra::timer0::RELOAD_RELOAD);
        timer0_csr.rmwf(utra::timer0::RELOAD_RELOAD, bar);
        let mut baz = timer0_csr.zf(utra::timer0::RELOAD_RELOAD, bar);
        baz |= timer0_csr.ms(utra::timer0::RELOAD_RELOAD, 1);
        timer0_csr.wfo(utra::timer0::RELOAD_RELOAD, baz);

        let foo = timer0_csr.r(utra::timer0::EN);
        timer0_csr.wo(utra::timer0::EN, foo);
        let bar = timer0_csr.rf(utra::timer0::EN_EN);
        timer0_csr.rmwf(utra::timer0::EN_EN, bar);
        let mut baz = timer0_csr.zf(utra::timer0::EN_EN, bar);
        baz |= timer0_csr.ms(utra::timer0::EN_EN, 1);
        timer0_csr.wfo(utra::timer0::EN_EN, baz);

        let foo = timer0_csr.r(utra::timer0::UPDATE_VALUE);
        timer0_csr.wo(utra::timer0::UPDATE_VALUE, foo);
        let bar = timer0_csr.rf(utra::timer0::UPDATE_VALUE_UPDATE_VALUE);
        timer0_csr.rmwf(utra::timer0::UPDATE_VALUE_UPDATE_VALUE, bar);
        let mut baz = timer0_csr.zf(utra::timer0::UPDATE_VALUE_UPDATE_VALUE, bar);
        baz |= timer0_csr.ms(utra::timer0::UPDATE_VALUE_UPDATE_VALUE, 1);
        timer0_csr.wfo(utra::timer0::UPDATE_VALUE_UPDATE_VALUE, baz);

        let foo = timer0_csr.r(utra::timer0::VALUE);
        timer0_csr.wo(utra::timer0::VALUE, foo);
        let bar = timer0_csr.rf(utra::timer0::VALUE_VALUE);
        timer0_csr.rmwf(utra::timer0::VALUE_VALUE, bar);
        let mut baz = timer0_csr.zf(utra::timer0::VALUE_VALUE, bar);
        baz |= timer0_csr.ms(utra::timer0::VALUE_VALUE, 1);
        timer0_csr.wfo(utra::timer0::VALUE_VALUE, baz);

        let foo = timer0_csr.r(utra::timer0::EV_STATUS);
        timer0_csr.wo(utra::timer0::EV_STATUS, foo);
        let bar = timer0_csr.rf(utra::timer0::EV_STATUS_ZERO);
        timer0_csr.rmwf(utra::timer0::EV_STATUS_ZERO, bar);
        let mut baz = timer0_csr.zf(utra::timer0::EV_STATUS_ZERO, bar);
        baz |= timer0_csr.ms(utra::timer0::EV_STATUS_ZERO, 1);
        timer0_csr.wfo(utra::timer0::EV_STATUS_ZERO, baz);

        let foo = timer0_csr.r(utra::timer0::EV_PENDING);
        timer0_csr.wo(utra::timer0::EV_PENDING, foo);
        let bar = timer0_csr.rf(utra::timer0::EV_PENDING_ZERO);
        timer0_csr.rmwf(utra::timer0::EV_PENDING_ZERO, bar);
        let mut baz = timer0_csr.zf(utra::timer0::EV_PENDING_ZERO, bar);
        baz |= timer0_csr.ms(utra::timer0::EV_PENDING_ZERO, 1);
        timer0_csr.wfo(utra::timer0::EV_PENDING_ZERO, baz);

        let foo = timer0_csr.r(utra::timer0::EV_ENABLE);
        timer0_csr.wo(utra::timer0::EV_ENABLE, foo);
        let bar = timer0_csr.rf(utra::timer0::EV_ENABLE_ZERO);
        timer0_csr.rmwf(utra::timer0::EV_ENABLE_ZERO, bar);
        let mut baz = timer0_csr.zf(utra::timer0::EV_ENABLE_ZERO, bar);
        baz |= timer0_csr.ms(utra::timer0::EV_ENABLE_ZERO, 1);
        timer0_csr.wfo(utra::timer0::EV_ENABLE_ZERO, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_pl230_csr() {
        use super::*;
        let mut pl230_csr = CSR::new(HW_PL230_BASE as *mut u32);

        let foo = pl230_csr.r(utra::pl230::STATUS);
        pl230_csr.wo(utra::pl230::STATUS, foo);
        let bar = pl230_csr.rf(utra::pl230::STATUS_TEST_STATUS);
        pl230_csr.rmwf(utra::pl230::STATUS_TEST_STATUS, bar);
        let mut baz = pl230_csr.zf(utra::pl230::STATUS_TEST_STATUS, bar);
        baz |= pl230_csr.ms(utra::pl230::STATUS_TEST_STATUS, 1);
        pl230_csr.wfo(utra::pl230::STATUS_TEST_STATUS, baz);
        let bar = pl230_csr.rf(utra::pl230::STATUS_CHNLS_MINUS1);
        pl230_csr.rmwf(utra::pl230::STATUS_CHNLS_MINUS1, bar);
        let mut baz = pl230_csr.zf(utra::pl230::STATUS_CHNLS_MINUS1, bar);
        baz |= pl230_csr.ms(utra::pl230::STATUS_CHNLS_MINUS1, 1);
        pl230_csr.wfo(utra::pl230::STATUS_CHNLS_MINUS1, baz);
        let bar = pl230_csr.rf(utra::pl230::STATUS_STATE);
        pl230_csr.rmwf(utra::pl230::STATUS_STATE, bar);
        let mut baz = pl230_csr.zf(utra::pl230::STATUS_STATE, bar);
        baz |= pl230_csr.ms(utra::pl230::STATUS_STATE, 1);
        pl230_csr.wfo(utra::pl230::STATUS_STATE, baz);
        let bar = pl230_csr.rf(utra::pl230::STATUS_MASTER_ENABLE);
        pl230_csr.rmwf(utra::pl230::STATUS_MASTER_ENABLE, bar);
        let mut baz = pl230_csr.zf(utra::pl230::STATUS_MASTER_ENABLE, bar);
        baz |= pl230_csr.ms(utra::pl230::STATUS_MASTER_ENABLE, 1);
        pl230_csr.wfo(utra::pl230::STATUS_MASTER_ENABLE, baz);

        let foo = pl230_csr.r(utra::pl230::CFG);
        pl230_csr.wo(utra::pl230::CFG, foo);
        let bar = pl230_csr.rf(utra::pl230::CFG_CHNL_PROT_CTRL);
        pl230_csr.rmwf(utra::pl230::CFG_CHNL_PROT_CTRL, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CFG_CHNL_PROT_CTRL, bar);
        baz |= pl230_csr.ms(utra::pl230::CFG_CHNL_PROT_CTRL, 1);
        pl230_csr.wfo(utra::pl230::CFG_CHNL_PROT_CTRL, baz);
        let bar = pl230_csr.rf(utra::pl230::CFG_MASTER_ENABLE);
        pl230_csr.rmwf(utra::pl230::CFG_MASTER_ENABLE, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CFG_MASTER_ENABLE, bar);
        baz |= pl230_csr.ms(utra::pl230::CFG_MASTER_ENABLE, 1);
        pl230_csr.wfo(utra::pl230::CFG_MASTER_ENABLE, baz);

        let foo = pl230_csr.r(utra::pl230::CTRLBASEPTR);
        pl230_csr.wo(utra::pl230::CTRLBASEPTR, foo);
        let bar = pl230_csr.rf(utra::pl230::CTRLBASEPTR_CTRL_BASE_PTR);
        pl230_csr.rmwf(utra::pl230::CTRLBASEPTR_CTRL_BASE_PTR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CTRLBASEPTR_CTRL_BASE_PTR, bar);
        baz |= pl230_csr.ms(utra::pl230::CTRLBASEPTR_CTRL_BASE_PTR, 1);
        pl230_csr.wfo(utra::pl230::CTRLBASEPTR_CTRL_BASE_PTR, baz);

        let foo = pl230_csr.r(utra::pl230::ALTCTRLBASEPTR);
        pl230_csr.wo(utra::pl230::ALTCTRLBASEPTR, foo);
        let bar = pl230_csr.rf(utra::pl230::ALTCTRLBASEPTR_ALT_CTRL_BASE_PTR);
        pl230_csr.rmwf(utra::pl230::ALTCTRLBASEPTR_ALT_CTRL_BASE_PTR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::ALTCTRLBASEPTR_ALT_CTRL_BASE_PTR, bar);
        baz |= pl230_csr.ms(utra::pl230::ALTCTRLBASEPTR_ALT_CTRL_BASE_PTR, 1);
        pl230_csr.wfo(utra::pl230::ALTCTRLBASEPTR_ALT_CTRL_BASE_PTR, baz);

        let foo = pl230_csr.r(utra::pl230::DMA_WAITONREQ_STATUS);
        pl230_csr.wo(utra::pl230::DMA_WAITONREQ_STATUS, foo);
        let bar = pl230_csr.rf(utra::pl230::DMA_WAITONREQ_STATUS_DMA_WAITONREQ_STATUS);
        pl230_csr.rmwf(utra::pl230::DMA_WAITONREQ_STATUS_DMA_WAITONREQ_STATUS, bar);
        let mut baz = pl230_csr.zf(utra::pl230::DMA_WAITONREQ_STATUS_DMA_WAITONREQ_STATUS, bar);
        baz |= pl230_csr.ms(utra::pl230::DMA_WAITONREQ_STATUS_DMA_WAITONREQ_STATUS, 1);
        pl230_csr.wfo(utra::pl230::DMA_WAITONREQ_STATUS_DMA_WAITONREQ_STATUS, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLSWREQUEST);
        pl230_csr.wo(utra::pl230::CHNLSWREQUEST, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLSWREQUEST_CHNL_SW_REQUEST);
        pl230_csr.rmwf(utra::pl230::CHNLSWREQUEST_CHNL_SW_REQUEST, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLSWREQUEST_CHNL_SW_REQUEST, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLSWREQUEST_CHNL_SW_REQUEST, 1);
        pl230_csr.wfo(utra::pl230::CHNLSWREQUEST_CHNL_SW_REQUEST, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLUSEBURSTSET);
        pl230_csr.wo(utra::pl230::CHNLUSEBURSTSET, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLUSEBURSTSET_CHNL_USEBURST_SET);
        pl230_csr.rmwf(utra::pl230::CHNLUSEBURSTSET_CHNL_USEBURST_SET, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLUSEBURSTSET_CHNL_USEBURST_SET, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLUSEBURSTSET_CHNL_USEBURST_SET, 1);
        pl230_csr.wfo(utra::pl230::CHNLUSEBURSTSET_CHNL_USEBURST_SET, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLUSEBURSTCLR);
        pl230_csr.wo(utra::pl230::CHNLUSEBURSTCLR, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLUSEBURSTCLR_CHNL_USEBURST_CLR);
        pl230_csr.rmwf(utra::pl230::CHNLUSEBURSTCLR_CHNL_USEBURST_CLR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLUSEBURSTCLR_CHNL_USEBURST_CLR, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLUSEBURSTCLR_CHNL_USEBURST_CLR, 1);
        pl230_csr.wfo(utra::pl230::CHNLUSEBURSTCLR_CHNL_USEBURST_CLR, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLREQMASKSET);
        pl230_csr.wo(utra::pl230::CHNLREQMASKSET, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLREQMASKSET_CHNL_REQ_MASK_SET);
        pl230_csr.rmwf(utra::pl230::CHNLREQMASKSET_CHNL_REQ_MASK_SET, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLREQMASKSET_CHNL_REQ_MASK_SET, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLREQMASKSET_CHNL_REQ_MASK_SET, 1);
        pl230_csr.wfo(utra::pl230::CHNLREQMASKSET_CHNL_REQ_MASK_SET, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLREQMASKCLR);
        pl230_csr.wo(utra::pl230::CHNLREQMASKCLR, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLREQMASKCLR_CHNL_REQ_MASK_CLR);
        pl230_csr.rmwf(utra::pl230::CHNLREQMASKCLR_CHNL_REQ_MASK_CLR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLREQMASKCLR_CHNL_REQ_MASK_CLR, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLREQMASKCLR_CHNL_REQ_MASK_CLR, 1);
        pl230_csr.wfo(utra::pl230::CHNLREQMASKCLR_CHNL_REQ_MASK_CLR, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLENABLESET);
        pl230_csr.wo(utra::pl230::CHNLENABLESET, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLENABLESET_CHNL_ENABLE_SET);
        pl230_csr.rmwf(utra::pl230::CHNLENABLESET_CHNL_ENABLE_SET, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLENABLESET_CHNL_ENABLE_SET, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLENABLESET_CHNL_ENABLE_SET, 1);
        pl230_csr.wfo(utra::pl230::CHNLENABLESET_CHNL_ENABLE_SET, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLENABLECLR);
        pl230_csr.wo(utra::pl230::CHNLENABLECLR, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLENABLECLR_CHNL_ENABLE_CLR);
        pl230_csr.rmwf(utra::pl230::CHNLENABLECLR_CHNL_ENABLE_CLR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLENABLECLR_CHNL_ENABLE_CLR, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLENABLECLR_CHNL_ENABLE_CLR, 1);
        pl230_csr.wfo(utra::pl230::CHNLENABLECLR_CHNL_ENABLE_CLR, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLPRIALTSET);
        pl230_csr.wo(utra::pl230::CHNLPRIALTSET, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLPRIALTSET_CHNL_PRI_ALT_SET);
        pl230_csr.rmwf(utra::pl230::CHNLPRIALTSET_CHNL_PRI_ALT_SET, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLPRIALTSET_CHNL_PRI_ALT_SET, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLPRIALTSET_CHNL_PRI_ALT_SET, 1);
        pl230_csr.wfo(utra::pl230::CHNLPRIALTSET_CHNL_PRI_ALT_SET, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLPRIALTCLR);
        pl230_csr.wo(utra::pl230::CHNLPRIALTCLR, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLPRIALTCLR_CHNL_PRI_ALT_CLR);
        pl230_csr.rmwf(utra::pl230::CHNLPRIALTCLR_CHNL_PRI_ALT_CLR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLPRIALTCLR_CHNL_PRI_ALT_CLR, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLPRIALTCLR_CHNL_PRI_ALT_CLR, 1);
        pl230_csr.wfo(utra::pl230::CHNLPRIALTCLR_CHNL_PRI_ALT_CLR, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLPRIORITYSET);
        pl230_csr.wo(utra::pl230::CHNLPRIORITYSET, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLPRIORITYSET_CHNL_PRIORITY_SET);
        pl230_csr.rmwf(utra::pl230::CHNLPRIORITYSET_CHNL_PRIORITY_SET, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLPRIORITYSET_CHNL_PRIORITY_SET, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLPRIORITYSET_CHNL_PRIORITY_SET, 1);
        pl230_csr.wfo(utra::pl230::CHNLPRIORITYSET_CHNL_PRIORITY_SET, baz);

        let foo = pl230_csr.r(utra::pl230::CHNLPRIORITYCLR);
        pl230_csr.wo(utra::pl230::CHNLPRIORITYCLR, foo);
        let bar = pl230_csr.rf(utra::pl230::CHNLPRIORITYCLR_CHNL_PRIORITY_CLR);
        pl230_csr.rmwf(utra::pl230::CHNLPRIORITYCLR_CHNL_PRIORITY_CLR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::CHNLPRIORITYCLR_CHNL_PRIORITY_CLR, bar);
        baz |= pl230_csr.ms(utra::pl230::CHNLPRIORITYCLR_CHNL_PRIORITY_CLR, 1);
        pl230_csr.wfo(utra::pl230::CHNLPRIORITYCLR_CHNL_PRIORITY_CLR, baz);

        let foo = pl230_csr.r(utra::pl230::ERRCLR);
        pl230_csr.wo(utra::pl230::ERRCLR, foo);
        let bar = pl230_csr.rf(utra::pl230::ERRCLR_ERR_CLR);
        pl230_csr.rmwf(utra::pl230::ERRCLR_ERR_CLR, bar);
        let mut baz = pl230_csr.zf(utra::pl230::ERRCLR_ERR_CLR, bar);
        baz |= pl230_csr.ms(utra::pl230::ERRCLR_ERR_CLR, 1);
        pl230_csr.wfo(utra::pl230::ERRCLR_ERR_CLR, baz);

        let foo = pl230_csr.r(utra::pl230::PERIPH_ID_0);
        pl230_csr.wo(utra::pl230::PERIPH_ID_0, foo);
        let bar = pl230_csr.rf(utra::pl230::PERIPH_ID_0_PART_NUMBER_LSB);
        pl230_csr.rmwf(utra::pl230::PERIPH_ID_0_PART_NUMBER_LSB, bar);
        let mut baz = pl230_csr.zf(utra::pl230::PERIPH_ID_0_PART_NUMBER_LSB, bar);
        baz |= pl230_csr.ms(utra::pl230::PERIPH_ID_0_PART_NUMBER_LSB, 1);
        pl230_csr.wfo(utra::pl230::PERIPH_ID_0_PART_NUMBER_LSB, baz);

        let foo = pl230_csr.r(utra::pl230::PERIPH_ID_1);
        pl230_csr.wo(utra::pl230::PERIPH_ID_1, foo);
        let bar = pl230_csr.rf(utra::pl230::PERIPH_ID_1_PART_NUMBER_MSB);
        pl230_csr.rmwf(utra::pl230::PERIPH_ID_1_PART_NUMBER_MSB, bar);
        let mut baz = pl230_csr.zf(utra::pl230::PERIPH_ID_1_PART_NUMBER_MSB, bar);
        baz |= pl230_csr.ms(utra::pl230::PERIPH_ID_1_PART_NUMBER_MSB, 1);
        pl230_csr.wfo(utra::pl230::PERIPH_ID_1_PART_NUMBER_MSB, baz);
        let bar = pl230_csr.rf(utra::pl230::PERIPH_ID_1_JEP106_LSB);
        pl230_csr.rmwf(utra::pl230::PERIPH_ID_1_JEP106_LSB, bar);
        let mut baz = pl230_csr.zf(utra::pl230::PERIPH_ID_1_JEP106_LSB, bar);
        baz |= pl230_csr.ms(utra::pl230::PERIPH_ID_1_JEP106_LSB, 1);
        pl230_csr.wfo(utra::pl230::PERIPH_ID_1_JEP106_LSB, baz);

        let foo = pl230_csr.r(utra::pl230::PERIPH_ID_2);
        pl230_csr.wo(utra::pl230::PERIPH_ID_2, foo);
        let bar = pl230_csr.rf(utra::pl230::PERIPH_ID_2_JEP106_MSB);
        pl230_csr.rmwf(utra::pl230::PERIPH_ID_2_JEP106_MSB, bar);
        let mut baz = pl230_csr.zf(utra::pl230::PERIPH_ID_2_JEP106_MSB, bar);
        baz |= pl230_csr.ms(utra::pl230::PERIPH_ID_2_JEP106_MSB, 1);
        pl230_csr.wfo(utra::pl230::PERIPH_ID_2_JEP106_MSB, baz);
        let bar = pl230_csr.rf(utra::pl230::PERIPH_ID_2_JEDEC_USED);
        pl230_csr.rmwf(utra::pl230::PERIPH_ID_2_JEDEC_USED, bar);
        let mut baz = pl230_csr.zf(utra::pl230::PERIPH_ID_2_JEDEC_USED, bar);
        baz |= pl230_csr.ms(utra::pl230::PERIPH_ID_2_JEDEC_USED, 1);
        pl230_csr.wfo(utra::pl230::PERIPH_ID_2_JEDEC_USED, baz);
        let bar = pl230_csr.rf(utra::pl230::PERIPH_ID_2_REVISION);
        pl230_csr.rmwf(utra::pl230::PERIPH_ID_2_REVISION, bar);
        let mut baz = pl230_csr.zf(utra::pl230::PERIPH_ID_2_REVISION, bar);
        baz |= pl230_csr.ms(utra::pl230::PERIPH_ID_2_REVISION, 1);
        pl230_csr.wfo(utra::pl230::PERIPH_ID_2_REVISION, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_alu_csr() {
        use super::*;
        let mut alu_csr = CSR::new(HW_ALU_BASE as *mut u32);

        let foo = alu_csr.r(utra::alu::SFR_CRFUNC);
        alu_csr.wo(utra::alu::SFR_CRFUNC, foo);
        let bar = alu_csr.rf(utra::alu::SFR_CRFUNC_SFR_CRFUNC);
        alu_csr.rmwf(utra::alu::SFR_CRFUNC_SFR_CRFUNC, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_CRFUNC_SFR_CRFUNC, bar);
        baz |= alu_csr.ms(utra::alu::SFR_CRFUNC_SFR_CRFUNC, 1);
        alu_csr.wfo(utra::alu::SFR_CRFUNC_SFR_CRFUNC, baz);

        let foo = alu_csr.r(utra::alu::SFR_AR);
        alu_csr.wo(utra::alu::SFR_AR, foo);
        let bar = alu_csr.rf(utra::alu::SFR_AR_SFR_AR);
        alu_csr.rmwf(utra::alu::SFR_AR_SFR_AR, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_AR_SFR_AR, bar);
        baz |= alu_csr.ms(utra::alu::SFR_AR_SFR_AR, 1);
        alu_csr.wfo(utra::alu::SFR_AR_SFR_AR, baz);

        let foo = alu_csr.r(utra::alu::SFR_SRMFSM);
        alu_csr.wo(utra::alu::SFR_SRMFSM, foo);
        let bar = alu_csr.rf(utra::alu::SFR_SRMFSM_MFSM);
        alu_csr.rmwf(utra::alu::SFR_SRMFSM_MFSM, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SRMFSM_MFSM, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SRMFSM_MFSM, 1);
        alu_csr.wfo(utra::alu::SFR_SRMFSM_MFSM, baz);
        let bar = alu_csr.rf(utra::alu::SFR_SRMFSM_CRREG);
        alu_csr.rmwf(utra::alu::SFR_SRMFSM_CRREG, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SRMFSM_CRREG, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SRMFSM_CRREG, 1);
        alu_csr.wfo(utra::alu::SFR_SRMFSM_CRREG, baz);

        let foo = alu_csr.r(utra::alu::SFR_FR);
        alu_csr.wo(utra::alu::SFR_FR, foo);
        let bar = alu_csr.rf(utra::alu::SFR_FR_MFSM_DONE);
        alu_csr.rmwf(utra::alu::SFR_FR_MFSM_DONE, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_FR_MFSM_DONE, bar);
        baz |= alu_csr.ms(utra::alu::SFR_FR_MFSM_DONE, 1);
        alu_csr.wfo(utra::alu::SFR_FR_MFSM_DONE, baz);
        let bar = alu_csr.rf(utra::alu::SFR_FR_DIV_DONE);
        alu_csr.rmwf(utra::alu::SFR_FR_DIV_DONE, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_FR_DIV_DONE, bar);
        baz |= alu_csr.ms(utra::alu::SFR_FR_DIV_DONE, 1);
        alu_csr.wfo(utra::alu::SFR_FR_DIV_DONE, baz);
        let bar = alu_csr.rf(utra::alu::SFR_FR_CHNLO_DONE);
        alu_csr.rmwf(utra::alu::SFR_FR_CHNLO_DONE, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_FR_CHNLO_DONE, bar);
        baz |= alu_csr.ms(utra::alu::SFR_FR_CHNLO_DONE, 1);
        alu_csr.wfo(utra::alu::SFR_FR_CHNLO_DONE, baz);
        let bar = alu_csr.rf(utra::alu::SFR_FR_CHNLI_DONE);
        alu_csr.rmwf(utra::alu::SFR_FR_CHNLI_DONE, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_FR_CHNLI_DONE, bar);
        baz |= alu_csr.ms(utra::alu::SFR_FR_CHNLI_DONE, 1);
        alu_csr.wfo(utra::alu::SFR_FR_CHNLI_DONE, baz);
        let bar = alu_csr.rf(utra::alu::SFR_FR_QS0ERR);
        alu_csr.rmwf(utra::alu::SFR_FR_QS0ERR, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_FR_QS0ERR, bar);
        baz |= alu_csr.ms(utra::alu::SFR_FR_QS0ERR, 1);
        alu_csr.wfo(utra::alu::SFR_FR_QS0ERR, baz);
        let bar = alu_csr.rf(utra::alu::SFR_FR_ALUINVLD);
        alu_csr.rmwf(utra::alu::SFR_FR_ALUINVLD, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_FR_ALUINVLD, bar);
        baz |= alu_csr.ms(utra::alu::SFR_FR_ALUINVLD, 1);
        alu_csr.wfo(utra::alu::SFR_FR_ALUINVLD, baz);

        let foo = alu_csr.r(utra::alu::SFR_CRDIVLEN);
        alu_csr.wo(utra::alu::SFR_CRDIVLEN, foo);
        let bar = alu_csr.rf(utra::alu::SFR_CRDIVLEN_SFR_CRDIVLEN);
        alu_csr.rmwf(utra::alu::SFR_CRDIVLEN_SFR_CRDIVLEN, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_CRDIVLEN_SFR_CRDIVLEN, bar);
        baz |= alu_csr.ms(utra::alu::SFR_CRDIVLEN_SFR_CRDIVLEN, 1);
        alu_csr.wfo(utra::alu::SFR_CRDIVLEN_SFR_CRDIVLEN, baz);

        let foo = alu_csr.r(utra::alu::SFR_SRDIVLEN);
        alu_csr.wo(utra::alu::SFR_SRDIVLEN, foo);
        let bar = alu_csr.rf(utra::alu::SFR_SRDIVLEN_SFR_SRDIVLEN);
        alu_csr.rmwf(utra::alu::SFR_SRDIVLEN_SFR_SRDIVLEN, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SRDIVLEN_SFR_SRDIVLEN, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SRDIVLEN_SFR_SRDIVLEN, 1);
        alu_csr.wfo(utra::alu::SFR_SRDIVLEN_SFR_SRDIVLEN, baz);

        let foo = alu_csr.r(utra::alu::SFR_OPT);
        alu_csr.wo(utra::alu::SFR_OPT, foo);
        let bar = alu_csr.rf(utra::alu::SFR_OPT_SFR_OPT);
        alu_csr.rmwf(utra::alu::SFR_OPT_SFR_OPT, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_OPT_SFR_OPT, bar);
        baz |= alu_csr.ms(utra::alu::SFR_OPT_SFR_OPT, 1);
        alu_csr.wfo(utra::alu::SFR_OPT_SFR_OPT, baz);

        let foo = alu_csr.r(utra::alu::SFR_OPTLTX);
        alu_csr.wo(utra::alu::SFR_OPTLTX, foo);
        let bar = alu_csr.rf(utra::alu::SFR_OPTLTX_SFR_OPTLTX);
        alu_csr.rmwf(utra::alu::SFR_OPTLTX_SFR_OPTLTX, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_OPTLTX_SFR_OPTLTX, bar);
        baz |= alu_csr.ms(utra::alu::SFR_OPTLTX_SFR_OPTLTX, 1);
        alu_csr.wfo(utra::alu::SFR_OPTLTX_SFR_OPTLTX, baz);

        let foo = alu_csr.r(utra::alu::SFR_SEGPTR_CR_SEGCFG0);
        alu_csr.wo(utra::alu::SFR_SEGPTR_CR_SEGCFG0, foo);
        let bar = alu_csr.rf(utra::alu::SFR_SEGPTR_CR_SEGCFG0_CR_SEGCFG0);
        alu_csr.rmwf(utra::alu::SFR_SEGPTR_CR_SEGCFG0_CR_SEGCFG0, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SEGPTR_CR_SEGCFG0_CR_SEGCFG0, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SEGPTR_CR_SEGCFG0_CR_SEGCFG0, 1);
        alu_csr.wfo(utra::alu::SFR_SEGPTR_CR_SEGCFG0_CR_SEGCFG0, baz);

        let foo = alu_csr.r(utra::alu::SFR_SEGPTR_CR_SEGCFG1);
        alu_csr.wo(utra::alu::SFR_SEGPTR_CR_SEGCFG1, foo);
        let bar = alu_csr.rf(utra::alu::SFR_SEGPTR_CR_SEGCFG1_CR_SEGCFG1);
        alu_csr.rmwf(utra::alu::SFR_SEGPTR_CR_SEGCFG1_CR_SEGCFG1, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SEGPTR_CR_SEGCFG1_CR_SEGCFG1, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SEGPTR_CR_SEGCFG1_CR_SEGCFG1, 1);
        alu_csr.wfo(utra::alu::SFR_SEGPTR_CR_SEGCFG1_CR_SEGCFG1, baz);

        let foo = alu_csr.r(utra::alu::SFR_SEGPTR_CR_SEGCFG2);
        alu_csr.wo(utra::alu::SFR_SEGPTR_CR_SEGCFG2, foo);
        let bar = alu_csr.rf(utra::alu::SFR_SEGPTR_CR_SEGCFG2_CR_SEGCFG2);
        alu_csr.rmwf(utra::alu::SFR_SEGPTR_CR_SEGCFG2_CR_SEGCFG2, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SEGPTR_CR_SEGCFG2_CR_SEGCFG2, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SEGPTR_CR_SEGCFG2_CR_SEGCFG2, 1);
        alu_csr.wfo(utra::alu::SFR_SEGPTR_CR_SEGCFG2_CR_SEGCFG2, baz);

        let foo = alu_csr.r(utra::alu::SFR_SEGPTR_CR_SEGCFG3);
        alu_csr.wo(utra::alu::SFR_SEGPTR_CR_SEGCFG3, foo);
        let bar = alu_csr.rf(utra::alu::SFR_SEGPTR_CR_SEGCFG3_CR_SEGCFG3);
        alu_csr.rmwf(utra::alu::SFR_SEGPTR_CR_SEGCFG3_CR_SEGCFG3, bar);
        let mut baz = alu_csr.zf(utra::alu::SFR_SEGPTR_CR_SEGCFG3_CR_SEGCFG3, bar);
        baz |= alu_csr.ms(utra::alu::SFR_SEGPTR_CR_SEGCFG3_CR_SEGCFG3, 1);
        alu_csr.wfo(utra::alu::SFR_SEGPTR_CR_SEGCFG3_CR_SEGCFG3, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_aes_csr() {
        use super::*;
        let mut aes_csr = CSR::new(HW_AES_BASE as *mut u32);

        let foo = aes_csr.r(utra::aes::SFR_CRFUNC);
        aes_csr.wo(utra::aes::SFR_CRFUNC, foo);
        let bar = aes_csr.rf(utra::aes::SFR_CRFUNC_SFR_CRFUNC);
        aes_csr.rmwf(utra::aes::SFR_CRFUNC_SFR_CRFUNC, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_CRFUNC_SFR_CRFUNC, bar);
        baz |= aes_csr.ms(utra::aes::SFR_CRFUNC_SFR_CRFUNC, 1);
        aes_csr.wfo(utra::aes::SFR_CRFUNC_SFR_CRFUNC, baz);

        let foo = aes_csr.r(utra::aes::SFR_AR);
        aes_csr.wo(utra::aes::SFR_AR, foo);
        let bar = aes_csr.rf(utra::aes::SFR_AR_SFR_AR);
        aes_csr.rmwf(utra::aes::SFR_AR_SFR_AR, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_AR_SFR_AR, bar);
        baz |= aes_csr.ms(utra::aes::SFR_AR_SFR_AR, 1);
        aes_csr.wfo(utra::aes::SFR_AR_SFR_AR, baz);

        let foo = aes_csr.r(utra::aes::SFR_SRMFSM);
        aes_csr.wo(utra::aes::SFR_SRMFSM, foo);
        let bar = aes_csr.rf(utra::aes::SFR_SRMFSM_SFR_SRMFSM);
        aes_csr.rmwf(utra::aes::SFR_SRMFSM_SFR_SRMFSM, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_SRMFSM_SFR_SRMFSM, bar);
        baz |= aes_csr.ms(utra::aes::SFR_SRMFSM_SFR_SRMFSM, 1);
        aes_csr.wfo(utra::aes::SFR_SRMFSM_SFR_SRMFSM, baz);

        let foo = aes_csr.r(utra::aes::SFR_FR);
        aes_csr.wo(utra::aes::SFR_FR, foo);
        let bar = aes_csr.rf(utra::aes::SFR_FR_MFSM_DONE);
        aes_csr.rmwf(utra::aes::SFR_FR_MFSM_DONE, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_FR_MFSM_DONE, bar);
        baz |= aes_csr.ms(utra::aes::SFR_FR_MFSM_DONE, 1);
        aes_csr.wfo(utra::aes::SFR_FR_MFSM_DONE, baz);
        let bar = aes_csr.rf(utra::aes::SFR_FR_ACORE_DONE);
        aes_csr.rmwf(utra::aes::SFR_FR_ACORE_DONE, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_FR_ACORE_DONE, bar);
        baz |= aes_csr.ms(utra::aes::SFR_FR_ACORE_DONE, 1);
        aes_csr.wfo(utra::aes::SFR_FR_ACORE_DONE, baz);
        let bar = aes_csr.rf(utra::aes::SFR_FR_CHNLO_DONE);
        aes_csr.rmwf(utra::aes::SFR_FR_CHNLO_DONE, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_FR_CHNLO_DONE, bar);
        baz |= aes_csr.ms(utra::aes::SFR_FR_CHNLO_DONE, 1);
        aes_csr.wfo(utra::aes::SFR_FR_CHNLO_DONE, baz);
        let bar = aes_csr.rf(utra::aes::SFR_FR_CHNLI_DONE);
        aes_csr.rmwf(utra::aes::SFR_FR_CHNLI_DONE, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_FR_CHNLI_DONE, bar);
        baz |= aes_csr.ms(utra::aes::SFR_FR_CHNLI_DONE, 1);
        aes_csr.wfo(utra::aes::SFR_FR_CHNLI_DONE, baz);

        let foo = aes_csr.r(utra::aes::SFR_OPT);
        aes_csr.wo(utra::aes::SFR_OPT, foo);
        let bar = aes_csr.rf(utra::aes::SFR_OPT_OPT_KLEN0);
        aes_csr.rmwf(utra::aes::SFR_OPT_OPT_KLEN0, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_OPT_OPT_KLEN0, bar);
        baz |= aes_csr.ms(utra::aes::SFR_OPT_OPT_KLEN0, 1);
        aes_csr.wfo(utra::aes::SFR_OPT_OPT_KLEN0, baz);
        let bar = aes_csr.rf(utra::aes::SFR_OPT_OPT_MODE0);
        aes_csr.rmwf(utra::aes::SFR_OPT_OPT_MODE0, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_OPT_OPT_MODE0, bar);
        baz |= aes_csr.ms(utra::aes::SFR_OPT_OPT_MODE0, 1);
        aes_csr.wfo(utra::aes::SFR_OPT_OPT_MODE0, baz);
        let bar = aes_csr.rf(utra::aes::SFR_OPT_OPT_IFSTART0);
        aes_csr.rmwf(utra::aes::SFR_OPT_OPT_IFSTART0, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_OPT_OPT_IFSTART0, bar);
        baz |= aes_csr.ms(utra::aes::SFR_OPT_OPT_IFSTART0, 1);
        aes_csr.wfo(utra::aes::SFR_OPT_OPT_IFSTART0, baz);

        let foo = aes_csr.r(utra::aes::SFR_OPT1);
        aes_csr.wo(utra::aes::SFR_OPT1, foo);
        let bar = aes_csr.rf(utra::aes::SFR_OPT1_SFR_OPT1);
        aes_csr.rmwf(utra::aes::SFR_OPT1_SFR_OPT1, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_OPT1_SFR_OPT1, bar);
        baz |= aes_csr.ms(utra::aes::SFR_OPT1_SFR_OPT1, 1);
        aes_csr.wfo(utra::aes::SFR_OPT1_SFR_OPT1, baz);

        let foo = aes_csr.r(utra::aes::SFR_OPTLTX);
        aes_csr.wo(utra::aes::SFR_OPTLTX, foo);
        let bar = aes_csr.rf(utra::aes::SFR_OPTLTX_SFR_OPTLTX);
        aes_csr.rmwf(utra::aes::SFR_OPTLTX_SFR_OPTLTX, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_OPTLTX_SFR_OPTLTX, bar);
        baz |= aes_csr.ms(utra::aes::SFR_OPTLTX_SFR_OPTLTX, 1);
        aes_csr.wfo(utra::aes::SFR_OPTLTX_SFR_OPTLTX, baz);

        let foo = aes_csr.r(utra::aes::SFR_MASKSEED);
        aes_csr.wo(utra::aes::SFR_MASKSEED, foo);
        let bar = aes_csr.rf(utra::aes::SFR_MASKSEED_SFR_MASKSEED);
        aes_csr.rmwf(utra::aes::SFR_MASKSEED_SFR_MASKSEED, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_MASKSEED_SFR_MASKSEED, bar);
        baz |= aes_csr.ms(utra::aes::SFR_MASKSEED_SFR_MASKSEED, 1);
        aes_csr.wfo(utra::aes::SFR_MASKSEED_SFR_MASKSEED, baz);

        let foo = aes_csr.r(utra::aes::SFR_MASKSEEDAR);
        aes_csr.wo(utra::aes::SFR_MASKSEEDAR, foo);
        let bar = aes_csr.rf(utra::aes::SFR_MASKSEEDAR_SFR_MASKSEEDAR);
        aes_csr.rmwf(utra::aes::SFR_MASKSEEDAR_SFR_MASKSEEDAR, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_MASKSEEDAR_SFR_MASKSEEDAR, bar);
        baz |= aes_csr.ms(utra::aes::SFR_MASKSEEDAR_SFR_MASKSEEDAR, 1);
        aes_csr.wfo(utra::aes::SFR_MASKSEEDAR_SFR_MASKSEEDAR, baz);

        let foo = aes_csr.r(utra::aes::SFR_SEGPTR_PTRID_IV);
        aes_csr.wo(utra::aes::SFR_SEGPTR_PTRID_IV, foo);
        let bar = aes_csr.rf(utra::aes::SFR_SEGPTR_PTRID_IV_PTRID_IV);
        aes_csr.rmwf(utra::aes::SFR_SEGPTR_PTRID_IV_PTRID_IV, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_SEGPTR_PTRID_IV_PTRID_IV, bar);
        baz |= aes_csr.ms(utra::aes::SFR_SEGPTR_PTRID_IV_PTRID_IV, 1);
        aes_csr.wfo(utra::aes::SFR_SEGPTR_PTRID_IV_PTRID_IV, baz);

        let foo = aes_csr.r(utra::aes::SFR_SEGPTR_PTRID_AKEY);
        aes_csr.wo(utra::aes::SFR_SEGPTR_PTRID_AKEY, foo);
        let bar = aes_csr.rf(utra::aes::SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY);
        aes_csr.rmwf(utra::aes::SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY, bar);
        baz |= aes_csr.ms(utra::aes::SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY, 1);
        aes_csr.wfo(utra::aes::SFR_SEGPTR_PTRID_AKEY_PTRID_AKEY, baz);

        let foo = aes_csr.r(utra::aes::SFR_SEGPTR_PTRID_AIB);
        aes_csr.wo(utra::aes::SFR_SEGPTR_PTRID_AIB, foo);
        let bar = aes_csr.rf(utra::aes::SFR_SEGPTR_PTRID_AIB_PTRID_AIB);
        aes_csr.rmwf(utra::aes::SFR_SEGPTR_PTRID_AIB_PTRID_AIB, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_SEGPTR_PTRID_AIB_PTRID_AIB, bar);
        baz |= aes_csr.ms(utra::aes::SFR_SEGPTR_PTRID_AIB_PTRID_AIB, 1);
        aes_csr.wfo(utra::aes::SFR_SEGPTR_PTRID_AIB_PTRID_AIB, baz);

        let foo = aes_csr.r(utra::aes::SFR_SEGPTR_PTRID_AOB);
        aes_csr.wo(utra::aes::SFR_SEGPTR_PTRID_AOB, foo);
        let bar = aes_csr.rf(utra::aes::SFR_SEGPTR_PTRID_AOB_PTRID_AOB);
        aes_csr.rmwf(utra::aes::SFR_SEGPTR_PTRID_AOB_PTRID_AOB, bar);
        let mut baz = aes_csr.zf(utra::aes::SFR_SEGPTR_PTRID_AOB_PTRID_AOB, bar);
        baz |= aes_csr.ms(utra::aes::SFR_SEGPTR_PTRID_AOB_PTRID_AOB, 1);
        aes_csr.wfo(utra::aes::SFR_SEGPTR_PTRID_AOB_PTRID_AOB, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_combohash_csr() {
        use super::*;
        let mut combohash_csr = CSR::new(HW_COMBOHASH_BASE as *mut u32);

        let foo = combohash_csr.r(utra::combohash::SFR_CRFUNC);
        combohash_csr.wo(utra::combohash::SFR_CRFUNC, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_CRFUNC_CR_FUNC);
        combohash_csr.rmwf(utra::combohash::SFR_CRFUNC_CR_FUNC, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_CRFUNC_CR_FUNC, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_CRFUNC_CR_FUNC, 1);
        combohash_csr.wfo(utra::combohash::SFR_CRFUNC_CR_FUNC, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_AR);
        combohash_csr.wo(utra::combohash::SFR_AR, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_AR_SFR_AR);
        combohash_csr.rmwf(utra::combohash::SFR_AR_SFR_AR, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_AR_SFR_AR, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_AR_SFR_AR, 1);
        combohash_csr.wfo(utra::combohash::SFR_AR_SFR_AR, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SRMFSM);
        combohash_csr.wo(utra::combohash::SFR_SRMFSM, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SRMFSM_MFSM);
        combohash_csr.rmwf(utra::combohash::SFR_SRMFSM_MFSM, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SRMFSM_MFSM, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SRMFSM_MFSM, 1);
        combohash_csr.wfo(utra::combohash::SFR_SRMFSM_MFSM, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_FR);
        combohash_csr.wo(utra::combohash::SFR_FR, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_MFSM_DONE);
        combohash_csr.rmwf(utra::combohash::SFR_FR_MFSM_DONE, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_MFSM_DONE, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_MFSM_DONE, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_MFSM_DONE, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_HASH_DONE);
        combohash_csr.rmwf(utra::combohash::SFR_FR_HASH_DONE, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_HASH_DONE, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_HASH_DONE, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_HASH_DONE, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_CHNLO_DONE);
        combohash_csr.rmwf(utra::combohash::SFR_FR_CHNLO_DONE, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_CHNLO_DONE, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_CHNLO_DONE, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_CHNLO_DONE, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_CHNLI_DONE);
        combohash_csr.rmwf(utra::combohash::SFR_FR_CHNLI_DONE, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_CHNLI_DONE, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_CHNLI_DONE, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_CHNLI_DONE, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_CHKDONE);
        combohash_csr.rmwf(utra::combohash::SFR_FR_CHKDONE, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_CHKDONE, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_CHKDONE, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_CHKDONE, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_CHKPASS);
        combohash_csr.rmwf(utra::combohash::SFR_FR_CHKPASS, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_CHKPASS, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_CHKPASS, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_CHKPASS, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_FR_CHKFAIL);
        combohash_csr.rmwf(utra::combohash::SFR_FR_CHKFAIL, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_FR_CHKFAIL, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_FR_CHKFAIL, 1);
        combohash_csr.wfo(utra::combohash::SFR_FR_CHKFAIL, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_OPT1);
        combohash_csr.wo(utra::combohash::SFR_OPT1, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT1_CR_OPT_HASHCNT);
        combohash_csr.rmwf(utra::combohash::SFR_OPT1_CR_OPT_HASHCNT, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT1_CR_OPT_HASHCNT, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT1_CR_OPT_HASHCNT, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT1_CR_OPT_HASHCNT, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_OPT2);
        combohash_csr.wo(utra::combohash::SFR_OPT2, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT2_CR_OPT_SCRTCHK);
        combohash_csr.rmwf(utra::combohash::SFR_OPT2_CR_OPT_SCRTCHK, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT2_CR_OPT_SCRTCHK, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT2_CR_OPT_SCRTCHK, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT2_CR_OPT_SCRTCHK, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT2_CR_OPT_IFSOB);
        combohash_csr.rmwf(utra::combohash::SFR_OPT2_CR_OPT_IFSOB, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT2_CR_OPT_IFSOB, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT2_CR_OPT_IFSOB, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT2_CR_OPT_IFSOB, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT2_CR_OPT_IFSTART);
        combohash_csr.rmwf(utra::combohash::SFR_OPT2_CR_OPT_IFSTART, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT2_CR_OPT_IFSTART, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT2_CR_OPT_IFSTART, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT2_CR_OPT_IFSTART, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT2_OPT_SCHNR1_0);
        combohash_csr.rmwf(utra::combohash::SFR_OPT2_OPT_SCHNR1_0, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT2_OPT_SCHNR1_0, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT2_OPT_SCHNR1_0, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT2_OPT_SCHNR1_0, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT2_TSMODE);
        combohash_csr.rmwf(utra::combohash::SFR_OPT2_TSMODE, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT2_TSMODE, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT2_TSMODE, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT2_TSMODE, baz);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT2_CR_OPT_IFSKEY);
        combohash_csr.rmwf(utra::combohash::SFR_OPT2_CR_OPT_IFSKEY, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT2_CR_OPT_IFSKEY, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT2_CR_OPT_IFSKEY, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT2_CR_OPT_IFSKEY, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_OPT3);
        combohash_csr.wo(utra::combohash::SFR_OPT3, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_OPT3_SFR_OPT3);
        combohash_csr.rmwf(utra::combohash::SFR_OPT3_SFR_OPT3, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_OPT3_SFR_OPT3, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_OPT3_SFR_OPT3, 1);
        combohash_csr.wfo(utra::combohash::SFR_OPT3_SFR_OPT3, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_BLKT0);
        combohash_csr.wo(utra::combohash::SFR_BLKT0, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_BLKT0_SFR_BLKT0);
        combohash_csr.rmwf(utra::combohash::SFR_BLKT0_SFR_BLKT0, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_BLKT0_SFR_BLKT0, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_BLKT0_SFR_BLKT0, 1);
        combohash_csr.wfo(utra::combohash::SFR_BLKT0_SFR_BLKT0, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SEGPTR_SEGID_LKEY);
        combohash_csr.wo(utra::combohash::SFR_SEGPTR_SEGID_LKEY, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY);
        combohash_csr.rmwf(utra::combohash::SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY, 1);
        combohash_csr.wfo(utra::combohash::SFR_SEGPTR_SEGID_LKEY_SEGID_LKEY, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SEGPTR_SEGID_KEY);
        combohash_csr.wo(utra::combohash::SFR_SEGPTR_SEGID_KEY, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SEGPTR_SEGID_KEY_SEGID_KEY);
        combohash_csr.rmwf(utra::combohash::SFR_SEGPTR_SEGID_KEY_SEGID_KEY, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SEGPTR_SEGID_KEY_SEGID_KEY, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SEGPTR_SEGID_KEY_SEGID_KEY, 1);
        combohash_csr.wfo(utra::combohash::SFR_SEGPTR_SEGID_KEY_SEGID_KEY, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SEGPTR_SEGID_SCRT);
        combohash_csr.wo(utra::combohash::SFR_SEGPTR_SEGID_SCRT, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT);
        combohash_csr.rmwf(utra::combohash::SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT, 1);
        combohash_csr.wfo(utra::combohash::SFR_SEGPTR_SEGID_SCRT_SEGID_SCRT, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SEGPTR_SEGID_MSG);
        combohash_csr.wo(utra::combohash::SFR_SEGPTR_SEGID_MSG, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SEGPTR_SEGID_MSG_SEGID_MSG);
        combohash_csr.rmwf(utra::combohash::SFR_SEGPTR_SEGID_MSG_SEGID_MSG, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SEGPTR_SEGID_MSG_SEGID_MSG, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SEGPTR_SEGID_MSG_SEGID_MSG, 1);
        combohash_csr.wfo(utra::combohash::SFR_SEGPTR_SEGID_MSG_SEGID_MSG, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SEGPTR_SEGID_HOUT);
        combohash_csr.wo(utra::combohash::SFR_SEGPTR_SEGID_HOUT, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT);
        combohash_csr.rmwf(utra::combohash::SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT, 1);
        combohash_csr.wfo(utra::combohash::SFR_SEGPTR_SEGID_HOUT_SEGID_HOUT, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_SEGPTR_SEGID_HOUT2);
        combohash_csr.wo(utra::combohash::SFR_SEGPTR_SEGID_HOUT2, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2);
        combohash_csr.rmwf(utra::combohash::SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2, 1);
        combohash_csr.wfo(utra::combohash::SFR_SEGPTR_SEGID_HOUT2_SEGID_HOUT2, baz);

        let foo = combohash_csr.r(utra::combohash::SFR_KEYIDX);
        combohash_csr.wo(utra::combohash::SFR_KEYIDX, foo);
        let bar = combohash_csr.rf(utra::combohash::SFR_KEYIDX_SFR_KEYIDX);
        combohash_csr.rmwf(utra::combohash::SFR_KEYIDX_SFR_KEYIDX, bar);
        let mut baz = combohash_csr.zf(utra::combohash::SFR_KEYIDX_SFR_KEYIDX, bar);
        baz |= combohash_csr.ms(utra::combohash::SFR_KEYIDX_SFR_KEYIDX, 1);
        combohash_csr.wfo(utra::combohash::SFR_KEYIDX_SFR_KEYIDX, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_pke_csr() {
        use super::*;
        let mut pke_csr = CSR::new(HW_PKE_BASE as *mut u32);

        let foo = pke_csr.r(utra::pke::SFR_CRFUNC);
        pke_csr.wo(utra::pke::SFR_CRFUNC, foo);
        let bar = pke_csr.rf(utra::pke::SFR_CRFUNC_CR_FUNC);
        pke_csr.rmwf(utra::pke::SFR_CRFUNC_CR_FUNC, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_CRFUNC_CR_FUNC, bar);
        baz |= pke_csr.ms(utra::pke::SFR_CRFUNC_CR_FUNC, 1);
        pke_csr.wfo(utra::pke::SFR_CRFUNC_CR_FUNC, baz);
        let bar = pke_csr.rf(utra::pke::SFR_CRFUNC_CR_PCOREIR);
        pke_csr.rmwf(utra::pke::SFR_CRFUNC_CR_PCOREIR, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_CRFUNC_CR_PCOREIR, bar);
        baz |= pke_csr.ms(utra::pke::SFR_CRFUNC_CR_PCOREIR, 1);
        pke_csr.wfo(utra::pke::SFR_CRFUNC_CR_PCOREIR, baz);

        let foo = pke_csr.r(utra::pke::SFR_AR2);
        pke_csr.wo(utra::pke::SFR_AR2, foo);
        let bar = pke_csr.rf(utra::pke::SFR_AR2_SFR_AR2);
        pke_csr.rmwf(utra::pke::SFR_AR2_SFR_AR2, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_AR2_SFR_AR2, bar);
        baz |= pke_csr.ms(utra::pke::SFR_AR2_SFR_AR2, 1);
        pke_csr.wfo(utra::pke::SFR_AR2_SFR_AR2, baz);

        let foo = pke_csr.r(utra::pke::SFR_SRMFSM);
        pke_csr.wo(utra::pke::SFR_SRMFSM, foo);
        let bar = pke_csr.rf(utra::pke::SFR_SRMFSM_MFSM);
        pke_csr.rmwf(utra::pke::SFR_SRMFSM_MFSM, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SRMFSM_MFSM, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SRMFSM_MFSM, 1);
        pke_csr.wfo(utra::pke::SFR_SRMFSM_MFSM, baz);
        let bar = pke_csr.rf(utra::pke::SFR_SRMFSM_MODINVREADY);
        pke_csr.rmwf(utra::pke::SFR_SRMFSM_MODINVREADY, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SRMFSM_MODINVREADY, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SRMFSM_MODINVREADY, 1);
        pke_csr.wfo(utra::pke::SFR_SRMFSM_MODINVREADY, baz);

        let foo = pke_csr.r(utra::pke::SFR_FR);
        pke_csr.wo(utra::pke::SFR_FR, foo);
        let bar = pke_csr.rf(utra::pke::SFR_FR_MFSM_DONE);
        pke_csr.rmwf(utra::pke::SFR_FR_MFSM_DONE, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_FR_MFSM_DONE, bar);
        baz |= pke_csr.ms(utra::pke::SFR_FR_MFSM_DONE, 1);
        pke_csr.wfo(utra::pke::SFR_FR_MFSM_DONE, baz);
        let bar = pke_csr.rf(utra::pke::SFR_FR_PCORE_DONE);
        pke_csr.rmwf(utra::pke::SFR_FR_PCORE_DONE, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_FR_PCORE_DONE, bar);
        baz |= pke_csr.ms(utra::pke::SFR_FR_PCORE_DONE, 1);
        pke_csr.wfo(utra::pke::SFR_FR_PCORE_DONE, baz);
        let bar = pke_csr.rf(utra::pke::SFR_FR_CHNLO_DONE);
        pke_csr.rmwf(utra::pke::SFR_FR_CHNLO_DONE, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_FR_CHNLO_DONE, bar);
        baz |= pke_csr.ms(utra::pke::SFR_FR_CHNLO_DONE, 1);
        pke_csr.wfo(utra::pke::SFR_FR_CHNLO_DONE, baz);
        let bar = pke_csr.rf(utra::pke::SFR_FR_CHNLI_DONE);
        pke_csr.rmwf(utra::pke::SFR_FR_CHNLI_DONE, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_FR_CHNLI_DONE, bar);
        baz |= pke_csr.ms(utra::pke::SFR_FR_CHNLI_DONE, 1);
        pke_csr.wfo(utra::pke::SFR_FR_CHNLI_DONE, baz);
        let bar = pke_csr.rf(utra::pke::SFR_FR_CHNLX_DONE);
        pke_csr.rmwf(utra::pke::SFR_FR_CHNLX_DONE, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_FR_CHNLX_DONE, bar);
        baz |= pke_csr.ms(utra::pke::SFR_FR_CHNLX_DONE, 1);
        pke_csr.wfo(utra::pke::SFR_FR_CHNLX_DONE, baz);

        let foo = pke_csr.r(utra::pke::SFR_OPTNW);
        pke_csr.wo(utra::pke::SFR_OPTNW, foo);
        let bar = pke_csr.rf(utra::pke::SFR_OPTNW_SFR_OPTNW);
        pke_csr.rmwf(utra::pke::SFR_OPTNW_SFR_OPTNW, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_OPTNW_SFR_OPTNW, bar);
        baz |= pke_csr.ms(utra::pke::SFR_OPTNW_SFR_OPTNW, 1);
        pke_csr.wfo(utra::pke::SFR_OPTNW_SFR_OPTNW, baz);

        let foo = pke_csr.r(utra::pke::SFR_OPTEW);
        pke_csr.wo(utra::pke::SFR_OPTEW, foo);
        let bar = pke_csr.rf(utra::pke::SFR_OPTEW_SFR_OPTEW);
        pke_csr.rmwf(utra::pke::SFR_OPTEW_SFR_OPTEW, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_OPTEW_SFR_OPTEW, bar);
        baz |= pke_csr.ms(utra::pke::SFR_OPTEW_SFR_OPTEW, 1);
        pke_csr.wfo(utra::pke::SFR_OPTEW_SFR_OPTEW, baz);

        let foo = pke_csr.r(utra::pke::SFR_OPTRW);
        pke_csr.wo(utra::pke::SFR_OPTRW, foo);
        let bar = pke_csr.rf(utra::pke::SFR_OPTRW_SFR_OPTRW);
        pke_csr.rmwf(utra::pke::SFR_OPTRW_SFR_OPTRW, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_OPTRW_SFR_OPTRW, bar);
        baz |= pke_csr.ms(utra::pke::SFR_OPTRW_SFR_OPTRW, 1);
        pke_csr.wfo(utra::pke::SFR_OPTRW_SFR_OPTRW, baz);

        let foo = pke_csr.r(utra::pke::SFR_OPTLTX);
        pke_csr.wo(utra::pke::SFR_OPTLTX, foo);
        let bar = pke_csr.rf(utra::pke::SFR_OPTLTX_SFR_OPTLTX);
        pke_csr.rmwf(utra::pke::SFR_OPTLTX_SFR_OPTLTX, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_OPTLTX_SFR_OPTLTX, bar);
        baz |= pke_csr.ms(utra::pke::SFR_OPTLTX_SFR_OPTLTX, 1);
        pke_csr.wfo(utra::pke::SFR_OPTLTX_SFR_OPTLTX, baz);

        let foo = pke_csr.r(utra::pke::SFR_OPTMASK);
        pke_csr.wo(utra::pke::SFR_OPTMASK, foo);
        let bar = pke_csr.rf(utra::pke::SFR_OPTMASK_SFR_OPTMASK);
        pke_csr.rmwf(utra::pke::SFR_OPTMASK_SFR_OPTMASK, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_OPTMASK_SFR_OPTMASK, bar);
        baz |= pke_csr.ms(utra::pke::SFR_OPTMASK_SFR_OPTMASK, 1);
        pke_csr.wfo(utra::pke::SFR_OPTMASK_SFR_OPTMASK, baz);

        let foo = pke_csr.r(utra::pke::SFR_MIMMCR);
        pke_csr.wo(utra::pke::SFR_MIMMCR, foo);
        let bar = pke_csr.rf(utra::pke::SFR_MIMMCR_SFR_MIMMCR);
        pke_csr.rmwf(utra::pke::SFR_MIMMCR_SFR_MIMMCR, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_MIMMCR_SFR_MIMMCR, bar);
        baz |= pke_csr.ms(utra::pke::SFR_MIMMCR_SFR_MIMMCR, 1);
        pke_csr.wfo(utra::pke::SFR_MIMMCR_SFR_MIMMCR, baz);

        let foo = pke_csr.r(utra::pke::SFR_SEGPTR_PTRID_PCON);
        pke_csr.wo(utra::pke::SFR_SEGPTR_PTRID_PCON, foo);
        let bar = pke_csr.rf(utra::pke::SFR_SEGPTR_PTRID_PCON_PTRID_PCON);
        pke_csr.rmwf(utra::pke::SFR_SEGPTR_PTRID_PCON_PTRID_PCON, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SEGPTR_PTRID_PCON_PTRID_PCON, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SEGPTR_PTRID_PCON_PTRID_PCON, 1);
        pke_csr.wfo(utra::pke::SFR_SEGPTR_PTRID_PCON_PTRID_PCON, baz);

        let foo = pke_csr.r(utra::pke::SFR_SEGPTR_PTRID_PIB0);
        pke_csr.wo(utra::pke::SFR_SEGPTR_PTRID_PIB0, foo);
        let bar = pke_csr.rf(utra::pke::SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0);
        pke_csr.rmwf(utra::pke::SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0, 1);
        pke_csr.wfo(utra::pke::SFR_SEGPTR_PTRID_PIB0_PTRID_PIB0, baz);

        let foo = pke_csr.r(utra::pke::SFR_SEGPTR_PTRID_PIB1);
        pke_csr.wo(utra::pke::SFR_SEGPTR_PTRID_PIB1, foo);
        let bar = pke_csr.rf(utra::pke::SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1);
        pke_csr.rmwf(utra::pke::SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1, 1);
        pke_csr.wfo(utra::pke::SFR_SEGPTR_PTRID_PIB1_PTRID_PIB1, baz);

        let foo = pke_csr.r(utra::pke::SFR_SEGPTR_PTRID_PKB);
        pke_csr.wo(utra::pke::SFR_SEGPTR_PTRID_PKB, foo);
        let bar = pke_csr.rf(utra::pke::SFR_SEGPTR_PTRID_PKB_PTRID_PKB);
        pke_csr.rmwf(utra::pke::SFR_SEGPTR_PTRID_PKB_PTRID_PKB, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SEGPTR_PTRID_PKB_PTRID_PKB, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SEGPTR_PTRID_PKB_PTRID_PKB, 1);
        pke_csr.wfo(utra::pke::SFR_SEGPTR_PTRID_PKB_PTRID_PKB, baz);

        let foo = pke_csr.r(utra::pke::SFR_SEGPTR_PTRID_POB);
        pke_csr.wo(utra::pke::SFR_SEGPTR_PTRID_POB, foo);
        let bar = pke_csr.rf(utra::pke::SFR_SEGPTR_PTRID_POB_PTRID_POB);
        pke_csr.rmwf(utra::pke::SFR_SEGPTR_PTRID_POB_PTRID_POB, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_SEGPTR_PTRID_POB_PTRID_POB, bar);
        baz |= pke_csr.ms(utra::pke::SFR_SEGPTR_PTRID_POB_PTRID_POB, 1);
        pke_csr.wfo(utra::pke::SFR_SEGPTR_PTRID_POB_PTRID_POB, baz);

        let foo = pke_csr.r(utra::pke::SFR_TICKCYC);
        pke_csr.wo(utra::pke::SFR_TICKCYC, foo);
        let bar = pke_csr.rf(utra::pke::SFR_TICKCYC_SFR_TICKCYC);
        pke_csr.rmwf(utra::pke::SFR_TICKCYC_SFR_TICKCYC, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_TICKCYC_SFR_TICKCYC, bar);
        baz |= pke_csr.ms(utra::pke::SFR_TICKCYC_SFR_TICKCYC, 1);
        pke_csr.wfo(utra::pke::SFR_TICKCYC_SFR_TICKCYC, baz);

        let foo = pke_csr.r(utra::pke::SFR_TICKCNT);
        pke_csr.wo(utra::pke::SFR_TICKCNT, foo);
        let bar = pke_csr.rf(utra::pke::SFR_TICKCNT_SFR_TICKCNT);
        pke_csr.rmwf(utra::pke::SFR_TICKCNT_SFR_TICKCNT, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_TICKCNT_SFR_TICKCNT, bar);
        baz |= pke_csr.ms(utra::pke::SFR_TICKCNT_SFR_TICKCNT, 1);
        pke_csr.wfo(utra::pke::SFR_TICKCNT_SFR_TICKCNT, baz);

        let foo = pke_csr.r(utra::pke::SFR_MASKSEED);
        pke_csr.wo(utra::pke::SFR_MASKSEED, foo);
        let bar = pke_csr.rf(utra::pke::SFR_MASKSEED_SFR_MASKSEED);
        pke_csr.rmwf(utra::pke::SFR_MASKSEED_SFR_MASKSEED, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_MASKSEED_SFR_MASKSEED, bar);
        baz |= pke_csr.ms(utra::pke::SFR_MASKSEED_SFR_MASKSEED, 1);
        pke_csr.wfo(utra::pke::SFR_MASKSEED_SFR_MASKSEED, baz);

        let foo = pke_csr.r(utra::pke::SFR_MASKSEEDAR);
        pke_csr.wo(utra::pke::SFR_MASKSEEDAR, foo);
        let bar = pke_csr.rf(utra::pke::SFR_MASKSEEDAR_SFR_MASKSEEDAR);
        pke_csr.rmwf(utra::pke::SFR_MASKSEEDAR_SFR_MASKSEEDAR, bar);
        let mut baz = pke_csr.zf(utra::pke::SFR_MASKSEEDAR_SFR_MASKSEEDAR, bar);
        baz |= pke_csr.ms(utra::pke::SFR_MASKSEEDAR_SFR_MASKSEEDAR, 1);
        pke_csr.wfo(utra::pke::SFR_MASKSEEDAR_SFR_MASKSEEDAR, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_trng_csr() {
        use super::*;
        let mut trng_csr = CSR::new(HW_TRNG_BASE as *mut u32);

        let foo = trng_csr.r(utra::trng::SFR_CRSRC);
        trng_csr.wo(utra::trng::SFR_CRSRC, foo);
        let bar = trng_csr.rf(utra::trng::SFR_CRSRC_SFR_CRSRC);
        trng_csr.rmwf(utra::trng::SFR_CRSRC_SFR_CRSRC, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_CRSRC_SFR_CRSRC, bar);
        baz |= trng_csr.ms(utra::trng::SFR_CRSRC_SFR_CRSRC, 1);
        trng_csr.wfo(utra::trng::SFR_CRSRC_SFR_CRSRC, baz);

        let foo = trng_csr.r(utra::trng::SFR_CRANA);
        trng_csr.wo(utra::trng::SFR_CRANA, foo);
        let bar = trng_csr.rf(utra::trng::SFR_CRANA_SFR_CRANA);
        trng_csr.rmwf(utra::trng::SFR_CRANA_SFR_CRANA, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_CRANA_SFR_CRANA, bar);
        baz |= trng_csr.ms(utra::trng::SFR_CRANA_SFR_CRANA, 1);
        trng_csr.wfo(utra::trng::SFR_CRANA_SFR_CRANA, baz);

        let foo = trng_csr.r(utra::trng::SFR_PP);
        trng_csr.wo(utra::trng::SFR_PP, foo);
        let bar = trng_csr.rf(utra::trng::SFR_PP_SFR_PP);
        trng_csr.rmwf(utra::trng::SFR_PP_SFR_PP, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_PP_SFR_PP, bar);
        baz |= trng_csr.ms(utra::trng::SFR_PP_SFR_PP, 1);
        trng_csr.wfo(utra::trng::SFR_PP_SFR_PP, baz);

        let foo = trng_csr.r(utra::trng::SFR_OPT);
        trng_csr.wo(utra::trng::SFR_OPT, foo);
        let bar = trng_csr.rf(utra::trng::SFR_OPT_SFR_OPT);
        trng_csr.rmwf(utra::trng::SFR_OPT_SFR_OPT, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_OPT_SFR_OPT, bar);
        baz |= trng_csr.ms(utra::trng::SFR_OPT_SFR_OPT, 1);
        trng_csr.wfo(utra::trng::SFR_OPT_SFR_OPT, baz);

        let foo = trng_csr.r(utra::trng::SFR_SR);
        trng_csr.wo(utra::trng::SFR_SR, foo);
        let bar = trng_csr.rf(utra::trng::SFR_SR_SR_RNG);
        trng_csr.rmwf(utra::trng::SFR_SR_SR_RNG, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_SR_SR_RNG, bar);
        baz |= trng_csr.ms(utra::trng::SFR_SR_SR_RNG, 1);
        trng_csr.wfo(utra::trng::SFR_SR_SR_RNG, baz);

        let foo = trng_csr.r(utra::trng::SFR_AR_GEN);
        trng_csr.wo(utra::trng::SFR_AR_GEN, foo);
        let bar = trng_csr.rf(utra::trng::SFR_AR_GEN_SFR_AR_GEN);
        trng_csr.rmwf(utra::trng::SFR_AR_GEN_SFR_AR_GEN, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_AR_GEN_SFR_AR_GEN, bar);
        baz |= trng_csr.ms(utra::trng::SFR_AR_GEN_SFR_AR_GEN, 1);
        trng_csr.wfo(utra::trng::SFR_AR_GEN_SFR_AR_GEN, baz);

        let foo = trng_csr.r(utra::trng::SFR_FR);
        trng_csr.wo(utra::trng::SFR_FR, foo);
        let bar = trng_csr.rf(utra::trng::SFR_FR_SFR_FR);
        trng_csr.rmwf(utra::trng::SFR_FR_SFR_FR, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_FR_SFR_FR, bar);
        baz |= trng_csr.ms(utra::trng::SFR_FR_SFR_FR, 1);
        trng_csr.wfo(utra::trng::SFR_FR_SFR_FR, baz);

        let foo = trng_csr.r(utra::trng::SFR_DRPSZ);
        trng_csr.wo(utra::trng::SFR_DRPSZ, foo);
        let bar = trng_csr.rf(utra::trng::SFR_DRPSZ_SFR_DRPSZ);
        trng_csr.rmwf(utra::trng::SFR_DRPSZ_SFR_DRPSZ, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_DRPSZ_SFR_DRPSZ, bar);
        baz |= trng_csr.ms(utra::trng::SFR_DRPSZ_SFR_DRPSZ, 1);
        trng_csr.wfo(utra::trng::SFR_DRPSZ_SFR_DRPSZ, baz);

        let foo = trng_csr.r(utra::trng::SFR_DRGEN);
        trng_csr.wo(utra::trng::SFR_DRGEN, foo);
        let bar = trng_csr.rf(utra::trng::SFR_DRGEN_SFR_DRGEN);
        trng_csr.rmwf(utra::trng::SFR_DRGEN_SFR_DRGEN, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_DRGEN_SFR_DRGEN, bar);
        baz |= trng_csr.ms(utra::trng::SFR_DRGEN_SFR_DRGEN, 1);
        trng_csr.wfo(utra::trng::SFR_DRGEN_SFR_DRGEN, baz);

        let foo = trng_csr.r(utra::trng::SFR_DRRESEED);
        trng_csr.wo(utra::trng::SFR_DRRESEED, foo);
        let bar = trng_csr.rf(utra::trng::SFR_DRRESEED_SFR_DRRESEED);
        trng_csr.rmwf(utra::trng::SFR_DRRESEED_SFR_DRRESEED, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_DRRESEED_SFR_DRRESEED, bar);
        baz |= trng_csr.ms(utra::trng::SFR_DRRESEED_SFR_DRRESEED, 1);
        trng_csr.wfo(utra::trng::SFR_DRRESEED_SFR_DRRESEED, baz);

        let foo = trng_csr.r(utra::trng::SFR_BUF);
        trng_csr.wo(utra::trng::SFR_BUF, foo);
        let bar = trng_csr.rf(utra::trng::SFR_BUF_SFR_BUF);
        trng_csr.rmwf(utra::trng::SFR_BUF_SFR_BUF, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_BUF_SFR_BUF, bar);
        baz |= trng_csr.ms(utra::trng::SFR_BUF_SFR_BUF, 1);
        trng_csr.wfo(utra::trng::SFR_BUF_SFR_BUF, baz);

        let foo = trng_csr.r(utra::trng::SFR_CHAIN_RNGCHAINEN0);
        trng_csr.wo(utra::trng::SFR_CHAIN_RNGCHAINEN0, foo);
        let bar = trng_csr.rf(utra::trng::SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0);
        trng_csr.rmwf(utra::trng::SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0, bar);
        baz |= trng_csr.ms(utra::trng::SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0, 1);
        trng_csr.wfo(utra::trng::SFR_CHAIN_RNGCHAINEN0_RNGCHAINEN0, baz);

        let foo = trng_csr.r(utra::trng::SFR_CHAIN_RNGCHAINEN1);
        trng_csr.wo(utra::trng::SFR_CHAIN_RNGCHAINEN1, foo);
        let bar = trng_csr.rf(utra::trng::SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1);
        trng_csr.rmwf(utra::trng::SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1, bar);
        baz |= trng_csr.ms(utra::trng::SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1, 1);
        trng_csr.wfo(utra::trng::SFR_CHAIN_RNGCHAINEN1_RNGCHAINEN1, baz);

        let foo = trng_csr.r(utra::trng::SFR_CHAIN_RNGCHAINEN2);
        trng_csr.wo(utra::trng::SFR_CHAIN_RNGCHAINEN2, foo);
        let bar = trng_csr.rf(utra::trng::SFR_CHAIN_RNGCHAINEN2_RNGCHAINEN2);
        trng_csr.rmwf(utra::trng::SFR_CHAIN_RNGCHAINEN2_RNGCHAINEN2, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_CHAIN_RNGCHAINEN2_RNGCHAINEN2, bar);
        baz |= trng_csr.ms(utra::trng::SFR_CHAIN_RNGCHAINEN2_RNGCHAINEN2, 1);
        trng_csr.wfo(utra::trng::SFR_CHAIN_RNGCHAINEN2_RNGCHAINEN2, baz);

        let foo = trng_csr.r(utra::trng::SFR_CHAIN_RNGCHAINEN3);
        trng_csr.wo(utra::trng::SFR_CHAIN_RNGCHAINEN3, foo);
        let bar = trng_csr.rf(utra::trng::SFR_CHAIN_RNGCHAINEN3_RNGCHAINEN3);
        trng_csr.rmwf(utra::trng::SFR_CHAIN_RNGCHAINEN3_RNGCHAINEN3, bar);
        let mut baz = trng_csr.zf(utra::trng::SFR_CHAIN_RNGCHAINEN3_RNGCHAINEN3, bar);
        baz |= trng_csr.ms(utra::trng::SFR_CHAIN_RNGCHAINEN3_RNGCHAINEN3, 1);
        trng_csr.wfo(utra::trng::SFR_CHAIN_RNGCHAINEN3_RNGCHAINEN3, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_scedma_csr() {
        use super::*;
        let mut scedma_csr = CSR::new(HW_SCEDMA_BASE as *mut u32);

        let foo = scedma_csr.r(utra::scedma::SFR_SCHSTART_AR);
        scedma_csr.wo(utra::scedma::SFR_SCHSTART_AR, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCHSTART_AR_SFR_SCHSTART_AR);
        scedma_csr.rmwf(utra::scedma::SFR_SCHSTART_AR_SFR_SCHSTART_AR, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCHSTART_AR_SFR_SCHSTART_AR, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCHSTART_AR_SFR_SCHSTART_AR, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCHSTART_AR_SFR_SCHSTART_AR, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_XCH_FUNC);
        scedma_csr.wo(utra::scedma::SFR_XCH_FUNC, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_XCH_FUNC_XCHCR_FUNC);
        scedma_csr.rmwf(utra::scedma::SFR_XCH_FUNC_XCHCR_FUNC, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_XCH_FUNC_XCHCR_FUNC, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_XCH_FUNC_XCHCR_FUNC, 1);
        scedma_csr.wfo(utra::scedma::SFR_XCH_FUNC_XCHCR_FUNC, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_XCH_OPT);
        scedma_csr.wo(utra::scedma::SFR_XCH_OPT, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_XCH_OPT_XCHCR_OPT);
        scedma_csr.rmwf(utra::scedma::SFR_XCH_OPT_XCHCR_OPT, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_XCH_OPT_XCHCR_OPT, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_XCH_OPT_XCHCR_OPT, 1);
        scedma_csr.wfo(utra::scedma::SFR_XCH_OPT_XCHCR_OPT, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_XCH_AXSTART);
        scedma_csr.wo(utra::scedma::SFR_XCH_AXSTART, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_XCH_AXSTART_XCHCR_AXSTART);
        scedma_csr.rmwf(utra::scedma::SFR_XCH_AXSTART_XCHCR_AXSTART, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_XCH_AXSTART_XCHCR_AXSTART, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_XCH_AXSTART_XCHCR_AXSTART, 1);
        scedma_csr.wfo(utra::scedma::SFR_XCH_AXSTART_XCHCR_AXSTART, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_XCH_SEGID);
        scedma_csr.wo(utra::scedma::SFR_XCH_SEGID, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_XCH_SEGID_XCHCR_SEGID);
        scedma_csr.rmwf(utra::scedma::SFR_XCH_SEGID_XCHCR_SEGID, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_XCH_SEGID_XCHCR_SEGID, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_XCH_SEGID_XCHCR_SEGID, 1);
        scedma_csr.wfo(utra::scedma::SFR_XCH_SEGID_XCHCR_SEGID, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_XCH_SEGSTART);
        scedma_csr.wo(utra::scedma::SFR_XCH_SEGSTART, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_XCH_SEGSTART_XCHCR_SEGSTART);
        scedma_csr.rmwf(utra::scedma::SFR_XCH_SEGSTART_XCHCR_SEGSTART, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_XCH_SEGSTART_XCHCR_SEGSTART, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_XCH_SEGSTART_XCHCR_SEGSTART, 1);
        scedma_csr.wfo(utra::scedma::SFR_XCH_SEGSTART_XCHCR_SEGSTART, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_XCH_TRANSIZE);
        scedma_csr.wo(utra::scedma::SFR_XCH_TRANSIZE, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_XCH_TRANSIZE_XCHCR_TRANSIZE);
        scedma_csr.rmwf(utra::scedma::SFR_XCH_TRANSIZE_XCHCR_TRANSIZE, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_XCH_TRANSIZE_XCHCR_TRANSIZE, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_XCH_TRANSIZE_XCHCR_TRANSIZE, 1);
        scedma_csr.wfo(utra::scedma::SFR_XCH_TRANSIZE_XCHCR_TRANSIZE, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_SCH_FUNC);
        scedma_csr.wo(utra::scedma::SFR_SCH_FUNC, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCH_FUNC_SCHCR_FUNC);
        scedma_csr.rmwf(utra::scedma::SFR_SCH_FUNC_SCHCR_FUNC, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCH_FUNC_SCHCR_FUNC, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCH_FUNC_SCHCR_FUNC, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCH_FUNC_SCHCR_FUNC, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_SCH_OPT);
        scedma_csr.wo(utra::scedma::SFR_SCH_OPT, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCH_OPT_SCHCR_OPT);
        scedma_csr.rmwf(utra::scedma::SFR_SCH_OPT_SCHCR_OPT, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCH_OPT_SCHCR_OPT, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCH_OPT_SCHCR_OPT, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCH_OPT_SCHCR_OPT, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_SCH_AXSTART);
        scedma_csr.wo(utra::scedma::SFR_SCH_AXSTART, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCH_AXSTART_SCHCR_AXSTART);
        scedma_csr.rmwf(utra::scedma::SFR_SCH_AXSTART_SCHCR_AXSTART, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCH_AXSTART_SCHCR_AXSTART, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCH_AXSTART_SCHCR_AXSTART, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCH_AXSTART_SCHCR_AXSTART, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_SCH_SEGID);
        scedma_csr.wo(utra::scedma::SFR_SCH_SEGID, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCH_SEGID_SCHCR_SEGID);
        scedma_csr.rmwf(utra::scedma::SFR_SCH_SEGID_SCHCR_SEGID, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCH_SEGID_SCHCR_SEGID, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCH_SEGID_SCHCR_SEGID, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCH_SEGID_SCHCR_SEGID, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_SCH_SEGSTART);
        scedma_csr.wo(utra::scedma::SFR_SCH_SEGSTART, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCH_SEGSTART_SCHCR_SEGSTART);
        scedma_csr.rmwf(utra::scedma::SFR_SCH_SEGSTART_SCHCR_SEGSTART, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCH_SEGSTART_SCHCR_SEGSTART, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCH_SEGSTART_SCHCR_SEGSTART, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCH_SEGSTART_SCHCR_SEGSTART, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_SCH_TRANSIZE);
        scedma_csr.wo(utra::scedma::SFR_SCH_TRANSIZE, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_SCH_TRANSIZE_SCHCR_TRANSIZE);
        scedma_csr.rmwf(utra::scedma::SFR_SCH_TRANSIZE_SCHCR_TRANSIZE, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_SCH_TRANSIZE_SCHCR_TRANSIZE, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_SCH_TRANSIZE_SCHCR_TRANSIZE, 1);
        scedma_csr.wfo(utra::scedma::SFR_SCH_TRANSIZE_SCHCR_TRANSIZE, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_ICH_OPT);
        scedma_csr.wo(utra::scedma::SFR_ICH_OPT, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_ICH_OPT_SFR_ICH_OPT);
        scedma_csr.rmwf(utra::scedma::SFR_ICH_OPT_SFR_ICH_OPT, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_ICH_OPT_SFR_ICH_OPT, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_ICH_OPT_SFR_ICH_OPT, 1);
        scedma_csr.wfo(utra::scedma::SFR_ICH_OPT_SFR_ICH_OPT, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_ICH_SEGID);
        scedma_csr.wo(utra::scedma::SFR_ICH_SEGID, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_ICH_SEGID_SFR_ICH_SEGID);
        scedma_csr.rmwf(utra::scedma::SFR_ICH_SEGID_SFR_ICH_SEGID, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_ICH_SEGID_SFR_ICH_SEGID, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_ICH_SEGID_SFR_ICH_SEGID, 1);
        scedma_csr.wfo(utra::scedma::SFR_ICH_SEGID_SFR_ICH_SEGID, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_ICH_RPSTART);
        scedma_csr.wo(utra::scedma::SFR_ICH_RPSTART, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_ICH_RPSTART_ICHCR_RPSTART);
        scedma_csr.rmwf(utra::scedma::SFR_ICH_RPSTART_ICHCR_RPSTART, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_ICH_RPSTART_ICHCR_RPSTART, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_ICH_RPSTART_ICHCR_RPSTART, 1);
        scedma_csr.wfo(utra::scedma::SFR_ICH_RPSTART_ICHCR_RPSTART, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_ICH_WPSTART);
        scedma_csr.wo(utra::scedma::SFR_ICH_WPSTART, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_ICH_WPSTART_ICHCR_WPSTART);
        scedma_csr.rmwf(utra::scedma::SFR_ICH_WPSTART_ICHCR_WPSTART, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_ICH_WPSTART_ICHCR_WPSTART, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_ICH_WPSTART_ICHCR_WPSTART, 1);
        scedma_csr.wfo(utra::scedma::SFR_ICH_WPSTART_ICHCR_WPSTART, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_ICH_TRANSIZE);
        scedma_csr.wo(utra::scedma::SFR_ICH_TRANSIZE, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_ICH_TRANSIZE_ICHCR_TRANSIZE);
        scedma_csr.rmwf(utra::scedma::SFR_ICH_TRANSIZE_ICHCR_TRANSIZE, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_ICH_TRANSIZE_ICHCR_TRANSIZE, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_ICH_TRANSIZE_ICHCR_TRANSIZE, 1);
        scedma_csr.wfo(utra::scedma::SFR_ICH_TRANSIZE_ICHCR_TRANSIZE, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_WDATABYPASS_MODE);
        scedma_csr.wo(utra::scedma::SFR_WDATABYPASS_MODE, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_WDATABYPASS_MODE_SFR_WDATABYPASS_MODE);
        scedma_csr.rmwf(utra::scedma::SFR_WDATABYPASS_MODE_SFR_WDATABYPASS_MODE, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_WDATABYPASS_MODE_SFR_WDATABYPASS_MODE, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_WDATABYPASS_MODE_SFR_WDATABYPASS_MODE, 1);
        scedma_csr.wfo(utra::scedma::SFR_WDATABYPASS_MODE_SFR_WDATABYPASS_MODE, baz);

        let foo = scedma_csr.r(utra::scedma::SFR_WDATABYPASS_DATA);
        scedma_csr.wo(utra::scedma::SFR_WDATABYPASS_DATA, foo);
        let bar = scedma_csr.rf(utra::scedma::SFR_WDATABYPASS_DATA_SFR_WDATABYPASS_DATA);
        scedma_csr.rmwf(utra::scedma::SFR_WDATABYPASS_DATA_SFR_WDATABYPASS_DATA, bar);
        let mut baz = scedma_csr.zf(utra::scedma::SFR_WDATABYPASS_DATA_SFR_WDATABYPASS_DATA, bar);
        baz |= scedma_csr.ms(utra::scedma::SFR_WDATABYPASS_DATA_SFR_WDATABYPASS_DATA, 1);
        scedma_csr.wfo(utra::scedma::SFR_WDATABYPASS_DATA_SFR_WDATABYPASS_DATA, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_sce_glbsfr_csr() {
        use super::*;
        let mut sce_glbsfr_csr = CSR::new(HW_SCE_GLBSFR_BASE as *mut u32);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_SUBEN);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_SUBEN, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_SUBEN_CR_SUBEN);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_SUBEN_CR_SUBEN, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_SUBEN_CR_SUBEN, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_SUBEN_CR_SUBEN, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_SUBEN_CR_SUBEN, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_APBS);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_APBS, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_APBS_CR_APBSOPT);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_APBS_CR_APBSOPT, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_APBS_CR_APBSOPT, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_APBS_CR_APBSOPT, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_APBS_CR_APBSOPT, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_SRBUSY);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_SRBUSY, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_SRBUSY_SR_BUSY);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_SRBUSY_SR_BUSY, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_SRBUSY_SR_BUSY, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_SRBUSY_SR_BUSY, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_SRBUSY_SR_BUSY, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FRDONE);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FRDONE, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FRDONE_FR_DONE);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FRDONE_FR_DONE, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FRDONE_FR_DONE, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FRDONE_FR_DONE, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FRDONE_FR_DONE, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FRERR);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FRERR, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FRERR_FR_ERR);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FRERR_FR_ERR, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FRERR_FR_ERR, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FRERR_FR_ERR, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FRERR_FR_ERR, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_ARCLR);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_ARCLR, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_ARCLR_AR_CLRRAM);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_ARCLR_AR_CLRRAM, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_ARCLR_AR_CLRRAM, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_ARCLR_AR_CLRRAM, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_ARCLR_AR_CLRRAM, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_TICKCYC);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_TICKCYC, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_TICKCYC_SFR_TICKCYC);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_TICKCYC_SFR_TICKCYC, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_TICKCYC_SFR_TICKCYC, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_TICKCYC_SFR_TICKCYC, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_TICKCYC_SFR_TICKCYC, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_TICKCNT);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_TICKCNT, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_TICKCNT_SFR_TICKCNT);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_TICKCNT_SFR_TICKCNT, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_TICKCNT_SFR_TICKCNT, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_TICKCNT_SFR_TICKCNT, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_TICKCNT_SFR_TICKCNT, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFEN);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFEN, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFEN_CR_FFEN);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFEN_CR_FFEN, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFEN_CR_FFEN, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFEN_CR_FFEN, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFEN_CR_FFEN, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCLR);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCLR, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCLR_AR_FFCLR);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCLR_AR_FFCLR, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCLR_AR_FFCLR, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCLR_AR_FFCLR, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCLR_AR_FFCLR, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCNT_SR_FF0);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCNT_SR_FF0, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCNT_SR_FF0_SR_FF0);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCNT_SR_FF0_SR_FF0, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCNT_SR_FF0_SR_FF0, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCNT_SR_FF0_SR_FF0, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCNT_SR_FF0_SR_FF0, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCNT_SR_FF1);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCNT_SR_FF1, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCNT_SR_FF1_SR_FF1);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCNT_SR_FF1_SR_FF1, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCNT_SR_FF1_SR_FF1, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCNT_SR_FF1_SR_FF1, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCNT_SR_FF1_SR_FF1, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCNT_SR_FF2);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCNT_SR_FF2, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCNT_SR_FF2_SR_FF2);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCNT_SR_FF2_SR_FF2, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCNT_SR_FF2_SR_FF2, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCNT_SR_FF2_SR_FF2, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCNT_SR_FF2_SR_FF2, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCNT_SR_FF3);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCNT_SR_FF3, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCNT_SR_FF3_SR_FF3);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCNT_SR_FF3_SR_FF3, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCNT_SR_FF3_SR_FF3, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCNT_SR_FF3_SR_FF3, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCNT_SR_FF3_SR_FF3, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCNT_SR_FF4);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCNT_SR_FF4, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCNT_SR_FF4_SR_FF4);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCNT_SR_FF4_SR_FF4, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCNT_SR_FF4_SR_FF4, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCNT_SR_FF4_SR_FF4, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCNT_SR_FF4_SR_FF4, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FFCNT_SR_FF5);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FFCNT_SR_FF5, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FFCNT_SR_FF5_SR_FF5);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FFCNT_SR_FF5_SR_FF5, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FFCNT_SR_FF5_SR_FF5, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FFCNT_SR_FF5_SR_FF5, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FFCNT_SR_FF5_SR_FF5, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_FRACERR);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_FRACERR, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_FRACERR_FR_ACERR);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_FRACERR_FR_ACERR, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_FRACERR_FR_ACERR, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_FRACERR_FR_ACERR, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_FRACERR_FR_ACERR, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_TS_SR_TS0);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_TS_SR_TS0, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_TS_SR_TS0_SR_TS0);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_TS_SR_TS0_SR_TS0, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_TS_SR_TS0_SR_TS0, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_TS_SR_TS0_SR_TS0, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_TS_SR_TS0_SR_TS0, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_TS_SR_TS1);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_TS_SR_TS1, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_TS_SR_TS1_SR_TS1);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_TS_SR_TS1_SR_TS1, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_TS_SR_TS1_SR_TS1, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_TS_SR_TS1_SR_TS1, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_TS_SR_TS1_SR_TS1, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_TS_SR_TS2);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_TS_SR_TS2, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_TS_SR_TS2_SR_TS2);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_TS_SR_TS2_SR_TS2, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_TS_SR_TS2_SR_TS2, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_TS_SR_TS2_SR_TS2, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_TS_SR_TS2_SR_TS2, baz);

        let foo = sce_glbsfr_csr.r(utra::sce_glbsfr::SFR_TS_SR_TS3);
        sce_glbsfr_csr.wo(utra::sce_glbsfr::SFR_TS_SR_TS3, foo);
        let bar = sce_glbsfr_csr.rf(utra::sce_glbsfr::SFR_TS_SR_TS3_SR_TS3);
        sce_glbsfr_csr.rmwf(utra::sce_glbsfr::SFR_TS_SR_TS3_SR_TS3, bar);
        let mut baz = sce_glbsfr_csr.zf(utra::sce_glbsfr::SFR_TS_SR_TS3_SR_TS3, bar);
        baz |= sce_glbsfr_csr.ms(utra::sce_glbsfr::SFR_TS_SR_TS3_SR_TS3, 1);
        sce_glbsfr_csr.wfo(utra::sce_glbsfr::SFR_TS_SR_TS3_SR_TS3, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_duart_csr() {
        use super::*;
        let mut duart_csr = CSR::new(HW_DUART_BASE as *mut u32);

        let foo = duart_csr.r(utra::duart::SFR_TXD);
        duart_csr.wo(utra::duart::SFR_TXD, foo);
        let bar = duart_csr.rf(utra::duart::SFR_TXD_SFR_TXD);
        duart_csr.rmwf(utra::duart::SFR_TXD_SFR_TXD, bar);
        let mut baz = duart_csr.zf(utra::duart::SFR_TXD_SFR_TXD, bar);
        baz |= duart_csr.ms(utra::duart::SFR_TXD_SFR_TXD, 1);
        duart_csr.wfo(utra::duart::SFR_TXD_SFR_TXD, baz);

        let foo = duart_csr.r(utra::duart::SFR_CR);
        duart_csr.wo(utra::duart::SFR_CR, foo);
        let bar = duart_csr.rf(utra::duart::SFR_CR_SFR_CR);
        duart_csr.rmwf(utra::duart::SFR_CR_SFR_CR, bar);
        let mut baz = duart_csr.zf(utra::duart::SFR_CR_SFR_CR, bar);
        baz |= duart_csr.ms(utra::duart::SFR_CR_SFR_CR, 1);
        duart_csr.wfo(utra::duart::SFR_CR_SFR_CR, baz);

        let foo = duart_csr.r(utra::duart::SFR_SR);
        duart_csr.wo(utra::duart::SFR_SR, foo);
        let bar = duart_csr.rf(utra::duart::SFR_SR_SFR_SR);
        duart_csr.rmwf(utra::duart::SFR_SR_SFR_SR, bar);
        let mut baz = duart_csr.zf(utra::duart::SFR_SR_SFR_SR, bar);
        baz |= duart_csr.ms(utra::duart::SFR_SR_SFR_SR, 1);
        duart_csr.wfo(utra::duart::SFR_SR_SFR_SR, baz);

        let foo = duart_csr.r(utra::duart::SFR_ETUC);
        duart_csr.wo(utra::duart::SFR_ETUC, foo);
        let bar = duart_csr.rf(utra::duart::SFR_ETUC_SFR_ETUC);
        duart_csr.rmwf(utra::duart::SFR_ETUC_SFR_ETUC, bar);
        let mut baz = duart_csr.zf(utra::duart::SFR_ETUC_SFR_ETUC, bar);
        baz |= duart_csr.ms(utra::duart::SFR_ETUC_SFR_ETUC, 1);
        duart_csr.wfo(utra::duart::SFR_ETUC_SFR_ETUC, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_rbist_wrp_csr() {
        use super::*;
        let mut rbist_wrp_csr = CSR::new(HW_RBIST_WRP_BASE as *mut u32);

        let foo = rbist_wrp_csr.r(utra::rbist_wrp::SFRCR_TRM);
        rbist_wrp_csr.wo(utra::rbist_wrp::SFRCR_TRM, foo);
        let bar = rbist_wrp_csr.rf(utra::rbist_wrp::SFRCR_TRM_SFRCR_TRM);
        rbist_wrp_csr.rmwf(utra::rbist_wrp::SFRCR_TRM_SFRCR_TRM, bar);
        let mut baz = rbist_wrp_csr.zf(utra::rbist_wrp::SFRCR_TRM_SFRCR_TRM, bar);
        baz |= rbist_wrp_csr.ms(utra::rbist_wrp::SFRCR_TRM_SFRCR_TRM, 1);
        rbist_wrp_csr.wfo(utra::rbist_wrp::SFRCR_TRM_SFRCR_TRM, baz);

        let foo = rbist_wrp_csr.r(utra::rbist_wrp::SFRSR_TRM);
        rbist_wrp_csr.wo(utra::rbist_wrp::SFRSR_TRM, foo);
        let bar = rbist_wrp_csr.rf(utra::rbist_wrp::SFRSR_TRM_SFRSR_TRM);
        rbist_wrp_csr.rmwf(utra::rbist_wrp::SFRSR_TRM_SFRSR_TRM, bar);
        let mut baz = rbist_wrp_csr.zf(utra::rbist_wrp::SFRSR_TRM_SFRSR_TRM, bar);
        baz |= rbist_wrp_csr.ms(utra::rbist_wrp::SFRSR_TRM_SFRSR_TRM, 1);
        rbist_wrp_csr.wfo(utra::rbist_wrp::SFRSR_TRM_SFRSR_TRM, baz);

        let foo = rbist_wrp_csr.r(utra::rbist_wrp::SFRAR_TRM);
        rbist_wrp_csr.wo(utra::rbist_wrp::SFRAR_TRM, foo);
        let bar = rbist_wrp_csr.rf(utra::rbist_wrp::SFRAR_TRM_SFRAR_TRM);
        rbist_wrp_csr.rmwf(utra::rbist_wrp::SFRAR_TRM_SFRAR_TRM, bar);
        let mut baz = rbist_wrp_csr.zf(utra::rbist_wrp::SFRAR_TRM_SFRAR_TRM, bar);
        baz |= rbist_wrp_csr.ms(utra::rbist_wrp::SFRAR_TRM_SFRAR_TRM, 1);
        rbist_wrp_csr.wfo(utra::rbist_wrp::SFRAR_TRM_SFRAR_TRM, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_wdg_intf_csr() {
        use super::*;
        let mut wdg_intf_csr = CSR::new(HW_WDG_INTF_BASE as *mut u32);
  }

    #[test]
    #[ignore]
    fn compile_check_timer_intf_csr() {
        use super::*;
        let mut timer_intf_csr = CSR::new(HW_TIMER_INTF_BASE as *mut u32);
  }

    #[test]
    #[ignore]
    fn compile_check_evc_csr() {
        use super::*;
        let mut evc_csr = CSR::new(HW_EVC_BASE as *mut u32);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL0);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL0, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL0_CM7EVSEL0, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL1);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL1, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL1_CM7EVSEL1, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL2);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL2, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL2_CM7EVSEL2, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL3);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL3, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL3_CM7EVSEL3, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL4);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL4, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL4_CM7EVSEL4, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL5);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL5, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL5_CM7EVSEL5, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL6);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL6, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL6_CM7EVSEL6, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVSEL_CM7EVSEL7);
        evc_csr.wo(utra::evc::SFR_CM7EVSEL_CM7EVSEL7, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7);
        evc_csr.rmwf(utra::evc::SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVSEL_CM7EVSEL7_CM7EVSEL7, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVEN);
        evc_csr.wo(utra::evc::SFR_CM7EVEN, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVEN_CM7EVEN);
        evc_csr.rmwf(utra::evc::SFR_CM7EVEN_CM7EVEN, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVEN_CM7EVEN, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVEN_CM7EVEN, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVEN_CM7EVEN, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7EVFR);
        evc_csr.wo(utra::evc::SFR_CM7EVFR, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7EVFR_CM7EVS);
        evc_csr.rmwf(utra::evc::SFR_CM7EVFR_CM7EVS, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7EVFR_CM7EVS, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7EVFR_CM7EVS, 1);
        evc_csr.wfo(utra::evc::SFR_CM7EVFR_CM7EVS, baz);

        let foo = evc_csr.r(utra::evc::SFR_TMREVSEL);
        evc_csr.wo(utra::evc::SFR_TMREVSEL, foo);
        let bar = evc_csr.rf(utra::evc::SFR_TMREVSEL_TMR_EVSEL);
        evc_csr.rmwf(utra::evc::SFR_TMREVSEL_TMR_EVSEL, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_TMREVSEL_TMR_EVSEL, bar);
        baz |= evc_csr.ms(utra::evc::SFR_TMREVSEL_TMR_EVSEL, 1);
        evc_csr.wfo(utra::evc::SFR_TMREVSEL_TMR_EVSEL, baz);

        let foo = evc_csr.r(utra::evc::SFR_TMREVEN);
        evc_csr.wo(utra::evc::SFR_TMREVEN, foo);
        let bar = evc_csr.rf(utra::evc::SFR_TMREVEN_SFR_TMREVEN);
        evc_csr.rmwf(utra::evc::SFR_TMREVEN_SFR_TMREVEN, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_TMREVEN_SFR_TMREVEN, bar);
        baz |= evc_csr.ms(utra::evc::SFR_TMREVEN_SFR_TMREVEN, 1);
        evc_csr.wfo(utra::evc::SFR_TMREVEN_SFR_TMREVEN, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN0);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN0, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN0_IFEVEN0);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN0_IFEVEN0, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN0_IFEVEN0, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN0_IFEVEN0, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN0_IFEVEN0, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN1);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN1, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN1_IFEVEN1);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN1_IFEVEN1, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN1_IFEVEN1, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN1_IFEVEN1, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN1_IFEVEN1, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN2);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN2, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN2_IFEVEN2);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN2_IFEVEN2, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN2_IFEVEN2, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN2_IFEVEN2, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN2_IFEVEN2, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN3);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN3, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN3_IFEVEN3);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN3_IFEVEN3, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN3_IFEVEN3, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN3_IFEVEN3, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN3_IFEVEN3, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN4);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN4, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN4_IFEVEN4);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN4_IFEVEN4, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN4_IFEVEN4, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN4_IFEVEN4, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN4_IFEVEN4, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN5);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN5, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN5_IFEVEN5);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN5_IFEVEN5, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN5_IFEVEN5, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN5_IFEVEN5, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN5_IFEVEN5, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN6);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN6, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN6_IFEVEN6);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN6_IFEVEN6, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN6_IFEVEN6, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN6_IFEVEN6, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN6_IFEVEN6, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVEN_IFEVEN7);
        evc_csr.wo(utra::evc::SFR_IFEVEN_IFEVEN7, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVEN_IFEVEN7_IFEVEN7);
        evc_csr.rmwf(utra::evc::SFR_IFEVEN_IFEVEN7_IFEVEN7, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVEN_IFEVEN7_IFEVEN7, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVEN_IFEVEN7_IFEVEN7, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVEN_IFEVEN7_IFEVEN7, baz);

        let foo = evc_csr.r(utra::evc::SFR_IFEVERRFR);
        evc_csr.wo(utra::evc::SFR_IFEVERRFR, foo);
        let bar = evc_csr.rf(utra::evc::SFR_IFEVERRFR_IFEV_ERRS);
        evc_csr.rmwf(utra::evc::SFR_IFEVERRFR_IFEV_ERRS, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_IFEVERRFR_IFEV_ERRS, bar);
        baz |= evc_csr.ms(utra::evc::SFR_IFEVERRFR_IFEV_ERRS, 1);
        evc_csr.wfo(utra::evc::SFR_IFEVERRFR_IFEV_ERRS, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7ERRFR);
        evc_csr.wo(utra::evc::SFR_CM7ERRFR, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7ERRFR_ERRIN);
        evc_csr.rmwf(utra::evc::SFR_CM7ERRFR_ERRIN, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7ERRFR_ERRIN, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7ERRFR_ERRIN, 1);
        evc_csr.wfo(utra::evc::SFR_CM7ERRFR_ERRIN, baz);

        let foo = evc_csr.r(utra::evc::SFR_CM7ERRCR);
        evc_csr.wo(utra::evc::SFR_CM7ERRCR, foo);
        let bar = evc_csr.rf(utra::evc::SFR_CM7ERRCR_ERREN);
        evc_csr.rmwf(utra::evc::SFR_CM7ERRCR_ERREN, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_CM7ERRCR_ERREN, bar);
        baz |= evc_csr.ms(utra::evc::SFR_CM7ERRCR_ERREN, 1);
        evc_csr.wfo(utra::evc::SFR_CM7ERRCR_ERREN, baz);

        let foo = evc_csr.r(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0);
        evc_csr.wo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0, foo);
        let bar = evc_csr.rf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0_RRC_EVSEL0);
        evc_csr.rmwf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0_RRC_EVSEL0, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0_RRC_EVSEL0, bar);
        baz |= evc_csr.ms(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0_RRC_EVSEL0, 1);
        evc_csr.wfo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL0_RRC_EVSEL0, baz);

        let foo = evc_csr.r(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1);
        evc_csr.wo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1, foo);
        let bar = evc_csr.rf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1_RRC_EVSEL1);
        evc_csr.rmwf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1_RRC_EVSEL1, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1_RRC_EVSEL1, bar);
        baz |= evc_csr.ms(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1_RRC_EVSEL1, 1);
        evc_csr.wfo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL1_RRC_EVSEL1, baz);

        let foo = evc_csr.r(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2);
        evc_csr.wo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2, foo);
        let bar = evc_csr.rf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2_RRC_EVSEL2);
        evc_csr.rmwf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2_RRC_EVSEL2, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2_RRC_EVSEL2, bar);
        baz |= evc_csr.ms(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2_RRC_EVSEL2, 1);
        evc_csr.wfo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL2_RRC_EVSEL2, baz);

        let foo = evc_csr.r(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3);
        evc_csr.wo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3, foo);
        let bar = evc_csr.rf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3_RRC_EVSEL3);
        evc_csr.rmwf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3_RRC_EVSEL3, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3_RRC_EVSEL3, bar);
        baz |= evc_csr.ms(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3_RRC_EVSEL3, 1);
        evc_csr.wfo(utra::evc::SFR_RRCEVSEL_RRC_EVSEL3_RRC_EVSEL3, baz);

        let foo = evc_csr.r(utra::evc::SFR_RRCEVEN);
        evc_csr.wo(utra::evc::SFR_RRCEVEN, foo);
        let bar = evc_csr.rf(utra::evc::SFR_RRCEVEN_RRC_EVEN);
        evc_csr.rmwf(utra::evc::SFR_RRCEVEN_RRC_EVEN, bar);
        let mut baz = evc_csr.zf(utra::evc::SFR_RRCEVEN_RRC_EVEN, bar);
        baz |= evc_csr.ms(utra::evc::SFR_RRCEVEN_RRC_EVEN, 1);
        evc_csr.wfo(utra::evc::SFR_RRCEVEN_RRC_EVEN, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_sysctrl_csr() {
        use super::*;
        let mut sysctrl_csr = CSR::new(HW_SYSCTRL_BASE as *mut u32);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUSEC);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUSEC, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUSEC_SFR_CGUSEC);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUSEC_SFR_CGUSEC, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUSEC_SFR_CGUSEC, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUSEC_SFR_CGUSEC, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUSEC_SFR_CGUSEC, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGULP);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGULP, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGULP_SFR_CGULP);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGULP_SFR_CGULP, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGULP_SFR_CGULP, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGULP_SFR_CGULP, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGULP_SFR_CGULP, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_SEED);
        sysctrl_csr.wo(utra::sysctrl::SFR_SEED, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_SEED_SFR_SEED);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_SEED_SFR_SEED, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_SEED_SFR_SEED, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_SEED_SFR_SEED, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_SEED_SFR_SEED, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_SEEDAR);
        sysctrl_csr.wo(utra::sysctrl::SFR_SEEDAR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_SEEDAR_SFR_SEEDAR);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_SEEDAR_SFR_SEEDAR, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_SEEDAR_SFR_SEEDAR, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_SEEDAR_SFR_SEEDAR, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_SEEDAR_SFR_SEEDAR, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUSEL0);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUSEL0, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUSEL0_SFR_CGUSEL0);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUSEL0_SFR_CGUSEL0, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUSEL0_SFR_CGUSEL0, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUSEL0_SFR_CGUSEL0, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUSEL0_SFR_CGUSEL0, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_0_CFGFDCR_0_4_0, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_1_CFGFDCR_0_4_1, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_2_CFGFDCR_0_4_2, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_3_CFGFDCR_0_4_3, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFD_CFGFDCR_0_4_4_CFGFDCR_0_4_4, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFDAO);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFDAO, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFDAO_CFGFDCR);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFDAO_CFGFDCR, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFDAO_CFGFDCR, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFDAO_CFGFDCR, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFDAO_CFGFDCR, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUSET);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUSET, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUSET_SFR_CGUSET);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUSET_SFR_CGUSET, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUSET_SFR_CGUSET, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUSET_SFR_CGUSET, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUSET_SFR_CGUSET, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUSEL1);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUSEL1, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUSEL1_SFR_CGUSEL1);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUSEL1_SFR_CGUSEL1, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUSEL1_SFR_CGUSEL1, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUSEL1_SFR_CGUSEL1, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUSEL1_SFR_CGUSEL1, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFDPKE);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFDPKE, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFDPKE_SFR_CGUFDPKE);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFDPKE_SFR_CGUFDPKE, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFDPKE_SFR_CGUFDPKE, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFDPKE_SFR_CGUFDPKE, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFDPKE_SFR_CGUFDPKE, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFDAORAM);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFDAORAM, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFDAORAM_SFR_CGUFDAORAM);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFDAORAM_SFR_CGUFDAORAM, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFDAORAM_SFR_CGUFDAORAM, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFDAORAM_SFR_CGUFDAORAM, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFDAORAM_SFR_CGUFDAORAM, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFDPER);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFDPER, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFDPER_SFR_CGUFDPER);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFDPER_SFR_CGUFDPER, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFDPER_SFR_CGUFDPER, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFDPER_SFR_CGUFDPER, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFDPER_SFR_CGUFDPER, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFSSR_FSFREQ0);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFSSR_FSFREQ0, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFSSR_FSFREQ0_FSFREQ0);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFSSR_FSFREQ0_FSFREQ0, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFSSR_FSFREQ0_FSFREQ0, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFSSR_FSFREQ0_FSFREQ0, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFSSR_FSFREQ0_FSFREQ0, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFSSR_FSFREQ1);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFSSR_FSFREQ1, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFSSR_FSFREQ1_FSFREQ1);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFSSR_FSFREQ1_FSFREQ1, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFSSR_FSFREQ1_FSFREQ1, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFSSR_FSFREQ1_FSFREQ1, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFSSR_FSFREQ1_FSFREQ1, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFSSR_FSFREQ2);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFSSR_FSFREQ2, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFSSR_FSFREQ2_FSFREQ2);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFSSR_FSFREQ2_FSFREQ2, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFSSR_FSFREQ2_FSFREQ2, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFSSR_FSFREQ2_FSFREQ2, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFSSR_FSFREQ2_FSFREQ2, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFSSR_FSFREQ3);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFSSR_FSFREQ3, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFSSR_FSFREQ3_FSFREQ3);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFSSR_FSFREQ3_FSFREQ3, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFSSR_FSFREQ3_FSFREQ3, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFSSR_FSFREQ3_FSFREQ3, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFSSR_FSFREQ3_FSFREQ3, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFSVLD);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFSVLD, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFSVLD_SFR_CGUFSVLD);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFSVLD_SFR_CGUFSVLD, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFSVLD_SFR_CGUFSVLD, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFSVLD_SFR_CGUFSVLD, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFSVLD_SFR_CGUFSVLD, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_CGUFSCR);
        sysctrl_csr.wo(utra::sysctrl::SFR_CGUFSCR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_CGUFSCR_SFR_CGUFSCR);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_CGUFSCR_SFR_CGUFSCR, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_CGUFSCR_SFR_CGUFSCR, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_CGUFSCR_SFR_CGUFSCR, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_CGUFSCR_SFR_CGUFSCR, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_ACLKGR);
        sysctrl_csr.wo(utra::sysctrl::SFR_ACLKGR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_ACLKGR_ACLKSUBGATE);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_ACLKGR_ACLKSUBGATE, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_ACLKGR_ACLKSUBGATE, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_ACLKGR_ACLKSUBGATE, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_ACLKGR_ACLKSUBGATE, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_HCLKGR);
        sysctrl_csr.wo(utra::sysctrl::SFR_HCLKGR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_HCLKGR_HCLKSUBGATE);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_HCLKGR_HCLKSUBGATE, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_HCLKGR_HCLKSUBGATE, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_HCLKGR_HCLKSUBGATE, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_HCLKGR_HCLKSUBGATE, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_ICLKGR);
        sysctrl_csr.wo(utra::sysctrl::SFR_ICLKGR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_ICLKGR_ICLKSUBGATE);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_ICLKGR_ICLKSUBGATE, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_ICLKGR_ICLKSUBGATE, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_ICLKGR_ICLKSUBGATE, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_ICLKGR_ICLKSUBGATE, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_PCLKGR);
        sysctrl_csr.wo(utra::sysctrl::SFR_PCLKGR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_PCLKGR_PCLKSUBGATE);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_PCLKGR_PCLKSUBGATE, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_PCLKGR_PCLKSUBGATE, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_PCLKGR_PCLKSUBGATE, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_PCLKGR_PCLKSUBGATE, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_RCURST0);
        sysctrl_csr.wo(utra::sysctrl::SFR_RCURST0, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_RCURST0_SFR_RCURST0);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_RCURST0_SFR_RCURST0, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_RCURST0_SFR_RCURST0, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_RCURST0_SFR_RCURST0, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_RCURST0_SFR_RCURST0, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_RCURST1);
        sysctrl_csr.wo(utra::sysctrl::SFR_RCURST1, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_RCURST1_SFR_RCURST1);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_RCURST1_SFR_RCURST1, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_RCURST1_SFR_RCURST1, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_RCURST1_SFR_RCURST1, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_RCURST1_SFR_RCURST1, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_RCUSRCFR);
        sysctrl_csr.wo(utra::sysctrl::SFR_RCUSRCFR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_RCUSRCFR_SFR_RCUSRCFR);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_RCUSRCFR_SFR_RCUSRCFR, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_RCUSRCFR_SFR_RCUSRCFR, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_RCUSRCFR_SFR_RCUSRCFR, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_RCUSRCFR_SFR_RCUSRCFR, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCARIPFLOW);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCARIPFLOW, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCARIPFLOW_SFR_IPCARIPFLOW);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCARIPFLOW_SFR_IPCARIPFLOW, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCARIPFLOW_SFR_IPCARIPFLOW, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCARIPFLOW_SFR_IPCARIPFLOW, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCARIPFLOW_SFR_IPCARIPFLOW, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCEN);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCEN, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCEN_SFR_IPCEN);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCEN_SFR_IPCEN, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCEN_SFR_IPCEN, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCEN_SFR_IPCEN, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCEN_SFR_IPCEN, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCLPEN);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCLPEN, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCLPEN_SFR_IPCLPEN);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCLPEN_SFR_IPCLPEN, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCLPEN_SFR_IPCLPEN, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCLPEN_SFR_IPCLPEN, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCLPEN_SFR_IPCLPEN, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCOSC);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCOSC, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCOSC_SFR_IPCOSC);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCOSC_SFR_IPCOSC, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCOSC_SFR_IPCOSC, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCOSC_SFR_IPCOSC, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCOSC_SFR_IPCOSC, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCPLLMN);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCPLLMN, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCPLLMN_SFR_IPCPLLMN);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCPLLMN_SFR_IPCPLLMN, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCPLLMN_SFR_IPCPLLMN, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCPLLMN_SFR_IPCPLLMN, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCPLLMN_SFR_IPCPLLMN, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCPLLF);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCPLLF, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCPLLF_SFR_IPCPLLF);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCPLLF_SFR_IPCPLLF, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCPLLF_SFR_IPCPLLF, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCPLLF_SFR_IPCPLLF, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCPLLF_SFR_IPCPLLF, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCPLLQ);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCPLLQ, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCPLLQ_SFR_IPCPLLQ);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCPLLQ_SFR_IPCPLLQ, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCPLLQ_SFR_IPCPLLQ, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCPLLQ_SFR_IPCPLLQ, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCPLLQ_SFR_IPCPLLQ, baz);

        let foo = sysctrl_csr.r(utra::sysctrl::SFR_IPCCR);
        sysctrl_csr.wo(utra::sysctrl::SFR_IPCCR, foo);
        let bar = sysctrl_csr.rf(utra::sysctrl::SFR_IPCCR_SFR_IPCCR);
        sysctrl_csr.rmwf(utra::sysctrl::SFR_IPCCR_SFR_IPCCR, bar);
        let mut baz = sysctrl_csr.zf(utra::sysctrl::SFR_IPCCR_SFR_IPCCR, bar);
        baz |= sysctrl_csr.ms(utra::sysctrl::SFR_IPCCR_SFR_IPCCR, 1);
        sysctrl_csr.wfo(utra::sysctrl::SFR_IPCCR_SFR_IPCCR, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_apb_thru_csr() {
        use super::*;
        let mut apb_thru_csr = CSR::new(HW_APB_THRU_BASE as *mut u32);
  }

    #[test]
    #[ignore]
    fn compile_check_bio_bdma_csr() {
        use super::*;
        let mut bio_bdma_csr = CSR::new(HW_BIO_BDMA_BASE as *mut u32);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_CTRL);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_CTRL, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CTRL_EN);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CTRL_EN, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CTRL_EN, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CTRL_EN, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CTRL_EN, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CTRL_RESTART);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CTRL_RESTART, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CTRL_RESTART, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CTRL_RESTART, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CTRL_RESTART, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CTRL_CLKDIV_RESTART);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CTRL_CLKDIV_RESTART, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CTRL_CLKDIV_RESTART, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CTRL_CLKDIV_RESTART, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CTRL_CLKDIV_RESTART, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_CFGINFO);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_CFGINFO, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CFGINFO_CONSTANT0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CFGINFO_CONSTANT0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CFGINFO_CONSTANT0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CFGINFO_CONSTANT0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CFGINFO_CONSTANT0, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CFGINFO_CONSTANT1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CFGINFO_CONSTANT1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CFGINFO_CONSTANT1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CFGINFO_CONSTANT1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CFGINFO_CONSTANT1, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CFGINFO_CONSTANT2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CFGINFO_CONSTANT2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CFGINFO_CONSTANT2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CFGINFO_CONSTANT2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CFGINFO_CONSTANT2, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_CONFIG);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_CONFIG, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_WHICH);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_WHICH, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_WHICH, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_WHICH, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_WHICH, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_QUANTUM);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_QUANTUM, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_QUANTUM, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_QUANTUM, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_SNAP_OUTPUT_TO_QUANTUM, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_WHICH);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_WHICH, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_WHICH, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_WHICH, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_WHICH, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_QUANTUM);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_QUANTUM, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_QUANTUM, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_QUANTUM, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_SNAP_INPUT_TO_QUANTUM, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_PERI);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_PERI, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_PERI, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_PERI, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_PERI, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_MEM);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_MEM, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_MEM, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_MEM, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_DISABLE_FILTER_MEM, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_CONFIG_CLOCKING_MODE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_CONFIG_CLOCKING_MODE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_CONFIG_CLOCKING_MODE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_CONFIG_CLOCKING_MODE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_CONFIG_CLOCKING_MODE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FLEVEL);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FLEVEL, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_TXF0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_TXF0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_TXF0_FDIN);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_TXF0_FDIN, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_TXF0_FDIN, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_TXF0_FDIN, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_TXF0_FDIN, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_TXF1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_TXF1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_TXF1_FDIN);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_TXF1_FDIN, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_TXF1_FDIN, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_TXF1_FDIN, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_TXF1_FDIN, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_TXF2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_TXF2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_TXF2_FDIN);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_TXF2_FDIN, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_TXF2_FDIN, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_TXF2_FDIN, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_TXF2_FDIN, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_TXF3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_TXF3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_TXF3_FDIN);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_TXF3_FDIN, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_TXF3_FDIN, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_TXF3_FDIN, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_TXF3_FDIN, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_RXF0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_RXF0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_RXF0_FDOUT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_RXF0_FDOUT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_RXF0_FDOUT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_RXF0_FDOUT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_RXF0_FDOUT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_RXF1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_RXF1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_RXF1_FDOUT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_RXF1_FDOUT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_RXF1_FDOUT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_RXF1_FDOUT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_RXF1_FDOUT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_RXF2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_RXF2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_RXF2_FDOUT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_RXF2_FDOUT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_RXF2_FDOUT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_RXF2_FDOUT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_RXF2_FDOUT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_RXF3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_RXF3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_RXF3_FDOUT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_RXF3_FDOUT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_RXF3_FDOUT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_RXF3_FDOUT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_RXF3_FDOUT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_ELEVEL);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_ELEVEL, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL0, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL1, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL2, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL3);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL3, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL3, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL3, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL3, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL4);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL4, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL4, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL4, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL4, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL5);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL5, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL5, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL5, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL5, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL6);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL6, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL6, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL6, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL6, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL7);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL7, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL7, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL7, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ELEVEL_FIFO_EVENT_LEVEL7, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_ETYPE);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_ETYPE, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_LT_MASK);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_LT_MASK, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_LT_MASK, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_LT_MASK, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_LT_MASK, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_EQ_MASK);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_EQ_MASK, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_EQ_MASK, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_EQ_MASK, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_EQ_MASK, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_GT_MASK);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_GT_MASK, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_GT_MASK, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_GT_MASK, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_ETYPE_FIFO_EVENT_GT_MASK, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_EVENT_SET);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_EVENT_SET, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EVENT_SET_SFR_EVENT_SET);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EVENT_SET_SFR_EVENT_SET, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EVENT_SET_SFR_EVENT_SET, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_EVENT_CLR);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_EVENT_CLR, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EVENT_CLR_SFR_EVENT_CLR);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EVENT_CLR_SFR_EVENT_CLR, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EVENT_CLR_SFR_EVENT_CLR, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_EVENT_STATUS);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_EVENT_STATUS, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EVENT_STATUS_SFR_EVENT_STATUS);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EVENT_STATUS_SFR_EVENT_STATUS, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EVENT_STATUS_SFR_EVENT_STATUS, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_EXTCLOCK);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_EXTCLOCK, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EXTCLOCK_USE_EXTCLK);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EXTCLOCK_USE_EXTCLK, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EXTCLOCK_USE_EXTCLK, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EXTCLOCK_USE_EXTCLK, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EXTCLOCK_USE_EXTCLK, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_0, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_1, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_2, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_3);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_3, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_3, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_3, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_EXTCLOCK_EXTCLK_GPIO_3, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FIFO_CLR);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FIFO_CLR, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FIFO_CLR_SFR_FIFO_CLR);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FIFO_CLR_SFR_FIFO_CLR, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FIFO_CLR_SFR_FIFO_CLR, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FIFO_CLR_SFR_FIFO_CLR, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FIFO_CLR_SFR_FIFO_CLR, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_QDIV0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_QDIV0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV0_UNUSED_DIV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV0_UNUSED_DIV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV0_UNUSED_DIV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV0_UNUSED_DIV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV0_UNUSED_DIV, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV0_DIV_FRAC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV0_DIV_FRAC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV0_DIV_FRAC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV0_DIV_FRAC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV0_DIV_FRAC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV0_DIV_INT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV0_DIV_INT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV0_DIV_INT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV0_DIV_INT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV0_DIV_INT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_QDIV1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_QDIV1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV1_UNUSED_DIV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV1_UNUSED_DIV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV1_UNUSED_DIV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV1_UNUSED_DIV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV1_UNUSED_DIV, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV1_DIV_FRAC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV1_DIV_FRAC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV1_DIV_FRAC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV1_DIV_FRAC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV1_DIV_FRAC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV1_DIV_INT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV1_DIV_INT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV1_DIV_INT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV1_DIV_INT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV1_DIV_INT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_QDIV2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_QDIV2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV2_UNUSED_DIV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV2_UNUSED_DIV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV2_UNUSED_DIV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV2_UNUSED_DIV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV2_UNUSED_DIV, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV2_DIV_FRAC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV2_DIV_FRAC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV2_DIV_FRAC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV2_DIV_FRAC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV2_DIV_FRAC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV2_DIV_INT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV2_DIV_INT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV2_DIV_INT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV2_DIV_INT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV2_DIV_INT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_QDIV3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_QDIV3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV3_UNUSED_DIV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV3_UNUSED_DIV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV3_UNUSED_DIV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV3_UNUSED_DIV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV3_UNUSED_DIV, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV3_DIV_FRAC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV3_DIV_FRAC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV3_DIV_FRAC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV3_DIV_FRAC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV3_DIV_FRAC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_QDIV3_DIV_INT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_QDIV3_DIV_INT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_QDIV3_DIV_INT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_QDIV3_DIV_INT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_QDIV3_DIV_INT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_SYNC_BYPASS);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_SYNC_BYPASS, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_SYNC_BYPASS_SFR_SYNC_BYPASS);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_SYNC_BYPASS_SFR_SYNC_BYPASS, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_SYNC_BYPASS_SFR_SYNC_BYPASS, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_SYNC_BYPASS_SFR_SYNC_BYPASS, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_SYNC_BYPASS_SFR_SYNC_BYPASS, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IO_OE_INV);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IO_OE_INV, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IO_OE_INV_SFR_IO_OE_INV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IO_OE_INV_SFR_IO_OE_INV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IO_OE_INV_SFR_IO_OE_INV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IO_OE_INV_SFR_IO_OE_INV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IO_OE_INV_SFR_IO_OE_INV, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IO_O_INV);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IO_O_INV, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IO_O_INV_SFR_IO_O_INV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IO_O_INV_SFR_IO_O_INV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IO_O_INV_SFR_IO_O_INV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IO_O_INV_SFR_IO_O_INV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IO_O_INV_SFR_IO_O_INV, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IO_I_INV);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IO_I_INV, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IO_I_INV_SFR_IO_I_INV);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IO_I_INV_SFR_IO_I_INV, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IO_I_INV_SFR_IO_I_INV, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IO_I_INV_SFR_IO_I_INV, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IO_I_INV_SFR_IO_I_INV, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IRQMASK_0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IRQMASK_0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IRQMASK_0_SFR_IRQMASK_0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IRQMASK_0_SFR_IRQMASK_0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IRQMASK_0_SFR_IRQMASK_0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IRQMASK_0_SFR_IRQMASK_0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IRQMASK_0_SFR_IRQMASK_0, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IRQMASK_1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IRQMASK_1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IRQMASK_1_SFR_IRQMASK_1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IRQMASK_1_SFR_IRQMASK_1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IRQMASK_1_SFR_IRQMASK_1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IRQMASK_1_SFR_IRQMASK_1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IRQMASK_1_SFR_IRQMASK_1, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IRQMASK_2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IRQMASK_2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IRQMASK_2_SFR_IRQMASK_2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IRQMASK_2_SFR_IRQMASK_2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IRQMASK_2_SFR_IRQMASK_2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IRQMASK_2_SFR_IRQMASK_2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IRQMASK_2_SFR_IRQMASK_2, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IRQMASK_3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IRQMASK_3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IRQMASK_3_SFR_IRQMASK_3);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IRQMASK_3_SFR_IRQMASK_3, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IRQMASK_3_SFR_IRQMASK_3, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IRQMASK_3_SFR_IRQMASK_3, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IRQMASK_3_SFR_IRQMASK_3, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_IRQ_EDGE);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_IRQ_EDGE, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_IRQ_EDGE_SFR_IRQ_EDGE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_IRQ_EDGE_SFR_IRQ_EDGE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_IRQ_EDGE_SFR_IRQ_EDGE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_IRQ_EDGE_SFR_IRQ_EDGE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_IRQ_EDGE_SFR_IRQ_EDGE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DBG_PADOUT);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DBG_PADOUT, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG_PADOUT_SFR_DBG_PADOUT);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG_PADOUT_SFR_DBG_PADOUT, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG_PADOUT_SFR_DBG_PADOUT, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG_PADOUT_SFR_DBG_PADOUT, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG_PADOUT_SFR_DBG_PADOUT, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DBG_PADOE);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DBG_PADOE, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG_PADOE_SFR_DBG_PADOE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG_PADOE_SFR_DBG_PADOE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG_PADOE_SFR_DBG_PADOE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG_PADOE_SFR_DBG_PADOE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG_PADOE_SFR_DBG_PADOE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DBG0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DBG0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG0_DBG_PC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG0_DBG_PC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG0_DBG_PC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG0_DBG_PC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG0_DBG_PC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG0_TRAP);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG0_TRAP, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG0_TRAP, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG0_TRAP, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG0_TRAP, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DBG1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DBG1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG1_DBG_PC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG1_DBG_PC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG1_DBG_PC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG1_DBG_PC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG1_DBG_PC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG1_TRAP);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG1_TRAP, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG1_TRAP, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG1_TRAP, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG1_TRAP, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DBG2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DBG2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG2_DBG_PC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG2_DBG_PC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG2_DBG_PC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG2_DBG_PC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG2_DBG_PC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG2_TRAP);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG2_TRAP, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG2_TRAP, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG2_TRAP, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG2_TRAP, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DBG3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DBG3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG3_DBG_PC);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG3_DBG_PC, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG3_DBG_PC, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG3_DBG_PC, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG3_DBG_PC, baz);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DBG3_TRAP);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DBG3_TRAP, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DBG3_TRAP, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DBG3_TRAP, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DBG3_TRAP, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_MEM_GUTTER);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_MEM_GUTTER, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_MEM_GUTTER_SFR_MEM_GUTTER);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_MEM_GUTTER_SFR_MEM_GUTTER, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_MEM_GUTTER_SFR_MEM_GUTTER, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_MEM_GUTTER_SFR_MEM_GUTTER, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_MEM_GUTTER_SFR_MEM_GUTTER, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_PERI_GUTTER);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_PERI_GUTTER, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_PERI_GUTTER_SFR_PERI_GUTTER);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_PERI_GUTTER_SFR_PERI_GUTTER, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_PERI_GUTTER_SFR_PERI_GUTTER, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_PERI_GUTTER_SFR_PERI_GUTTER, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_PERI_GUTTER_SFR_PERI_GUTTER, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0_CR_EVMAP0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0_CR_EVMAP0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0_CR_EVMAP0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0_CR_EVMAP0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP0_CR_EVMAP0, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1_CR_EVMAP1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1_CR_EVMAP1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1_CR_EVMAP1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1_CR_EVMAP1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP1_CR_EVMAP1, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2_CR_EVMAP2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2_CR_EVMAP2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2_CR_EVMAP2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2_CR_EVMAP2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP2_CR_EVMAP2, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3_CR_EVMAP3);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3_CR_EVMAP3, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3_CR_EVMAP3, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3_CR_EVMAP3, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP3_CR_EVMAP3, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4_CR_EVMAP4);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4_CR_EVMAP4, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4_CR_EVMAP4, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4_CR_EVMAP4, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP4_CR_EVMAP4, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5_CR_EVMAP5);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5_CR_EVMAP5, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5_CR_EVMAP5, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5_CR_EVMAP5, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_MAP_CR_EVMAP5_CR_EVMAP5, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0_SR_EVSTAT0);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0_SR_EVSTAT0, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0_SR_EVSTAT0, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0_SR_EVSTAT0, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT0_SR_EVSTAT0, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1_SR_EVSTAT1);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1_SR_EVSTAT1, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1_SR_EVSTAT1, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1_SR_EVSTAT1, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT1_SR_EVSTAT1, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2_SR_EVSTAT2);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2_SR_EVSTAT2, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2_SR_EVSTAT2, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2_SR_EVSTAT2, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT2_SR_EVSTAT2, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3_SR_EVSTAT3);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3_SR_EVSTAT3, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3_SR_EVSTAT3, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3_SR_EVSTAT3, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT3_SR_EVSTAT3, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4_SR_EVSTAT4);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4_SR_EVSTAT4, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4_SR_EVSTAT4, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4_SR_EVSTAT4, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT4_SR_EVSTAT4, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5_SR_EVSTAT5);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5_SR_EVSTAT5, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5_SR_EVSTAT5, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5_SR_EVSTAT5, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_DMAREQ_STAT_SR_EVSTAT5_SR_EVSTAT5, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BASE_0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BASE_0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BASE_0_FILTER_BASE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BASE_0_FILTER_BASE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BASE_0_FILTER_BASE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BASE_0_FILTER_BASE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BASE_0_FILTER_BASE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BOUNDS_0);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BOUNDS_0, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BOUNDS_0_FILTER_BOUNDS);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BOUNDS_0_FILTER_BOUNDS, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BOUNDS_0_FILTER_BOUNDS, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BOUNDS_0_FILTER_BOUNDS, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BOUNDS_0_FILTER_BOUNDS, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BASE_1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BASE_1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BASE_1_FILTER_BASE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BASE_1_FILTER_BASE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BASE_1_FILTER_BASE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BASE_1_FILTER_BASE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BASE_1_FILTER_BASE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BOUNDS_1);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BOUNDS_1, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BOUNDS_1_FILTER_BOUNDS);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BOUNDS_1_FILTER_BOUNDS, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BOUNDS_1_FILTER_BOUNDS, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BOUNDS_1_FILTER_BOUNDS, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BOUNDS_1_FILTER_BOUNDS, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BASE_2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BASE_2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BASE_2_FILTER_BASE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BASE_2_FILTER_BASE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BASE_2_FILTER_BASE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BASE_2_FILTER_BASE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BASE_2_FILTER_BASE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BOUNDS_2);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BOUNDS_2, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BOUNDS_2_FILTER_BOUNDS);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BOUNDS_2_FILTER_BOUNDS, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BOUNDS_2_FILTER_BOUNDS, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BOUNDS_2_FILTER_BOUNDS, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BOUNDS_2_FILTER_BOUNDS, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BASE_3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BASE_3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BASE_3_FILTER_BASE);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BASE_3_FILTER_BASE, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BASE_3_FILTER_BASE, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BASE_3_FILTER_BASE, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BASE_3_FILTER_BASE, baz);

        let foo = bio_bdma_csr.r(utra::bio_bdma::SFR_FILTER_BOUNDS_3);
        bio_bdma_csr.wo(utra::bio_bdma::SFR_FILTER_BOUNDS_3, foo);
        let bar = bio_bdma_csr.rf(utra::bio_bdma::SFR_FILTER_BOUNDS_3_FILTER_BOUNDS);
        bio_bdma_csr.rmwf(utra::bio_bdma::SFR_FILTER_BOUNDS_3_FILTER_BOUNDS, bar);
        let mut baz = bio_bdma_csr.zf(utra::bio_bdma::SFR_FILTER_BOUNDS_3_FILTER_BOUNDS, bar);
        baz |= bio_bdma_csr.ms(utra::bio_bdma::SFR_FILTER_BOUNDS_3_FILTER_BOUNDS, 1);
        bio_bdma_csr.wfo(utra::bio_bdma::SFR_FILTER_BOUNDS_3_FILTER_BOUNDS, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_iox_csr() {
        use super::*;
        let mut iox_csr = CSR::new(HW_IOX_BASE as *mut u32);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL0);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL0_CRAFSEL0);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL0_CRAFSEL0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL0_CRAFSEL0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL0_CRAFSEL0, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL0_CRAFSEL0, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL1);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL1_CRAFSEL1);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL1_CRAFSEL1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL1_CRAFSEL1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL1_CRAFSEL1, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL1_CRAFSEL1, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL2);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL2_CRAFSEL2);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL2_CRAFSEL2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL2_CRAFSEL2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL2_CRAFSEL2, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL2_CRAFSEL2, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL3);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL3_CRAFSEL3);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL3_CRAFSEL3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL3_CRAFSEL3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL3_CRAFSEL3, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL3_CRAFSEL3, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL4);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL4_CRAFSEL4);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL4_CRAFSEL4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL4_CRAFSEL4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL4_CRAFSEL4, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL4_CRAFSEL4, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL5);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL5_CRAFSEL5);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL5_CRAFSEL5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL5_CRAFSEL5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL5_CRAFSEL5, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL5_CRAFSEL5, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL6);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL6, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL6_CRAFSEL6);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL6_CRAFSEL6, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL6_CRAFSEL6, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL6_CRAFSEL6, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL6_CRAFSEL6, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL7);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL7, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL7_CRAFSEL7);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL7_CRAFSEL7, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL7_CRAFSEL7, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL7_CRAFSEL7, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL7_CRAFSEL7, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL8);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL8, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL8_CRAFSEL8);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL8_CRAFSEL8, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL8_CRAFSEL8, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL8_CRAFSEL8, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL8_CRAFSEL8, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL9);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL9, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL9_CRAFSEL9);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL9_CRAFSEL9, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL9_CRAFSEL9, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL9_CRAFSEL9, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL9_CRAFSEL9, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL10);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL10, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL10_CRAFSEL10);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL10_CRAFSEL10, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL10_CRAFSEL10, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL10_CRAFSEL10, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL10_CRAFSEL10, baz);

        let foo = iox_csr.r(utra::iox::SFR_AFSEL_CRAFSEL11);
        iox_csr.wo(utra::iox::SFR_AFSEL_CRAFSEL11, foo);
        let bar = iox_csr.rf(utra::iox::SFR_AFSEL_CRAFSEL11_CRAFSEL11);
        iox_csr.rmwf(utra::iox::SFR_AFSEL_CRAFSEL11_CRAFSEL11, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_AFSEL_CRAFSEL11_CRAFSEL11, bar);
        baz |= iox_csr.ms(utra::iox::SFR_AFSEL_CRAFSEL11_CRAFSEL11, 1);
        iox_csr.wfo(utra::iox::SFR_AFSEL_CRAFSEL11_CRAFSEL11, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT0);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT0_CRINT0);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT0_CRINT0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT0_CRINT0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT0_CRINT0, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT0_CRINT0, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT1);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT1_CRINT1);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT1_CRINT1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT1_CRINT1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT1_CRINT1, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT1_CRINT1, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT2);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT2_CRINT2);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT2_CRINT2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT2_CRINT2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT2_CRINT2, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT2_CRINT2, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT3);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT3_CRINT3);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT3_CRINT3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT3_CRINT3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT3_CRINT3, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT3_CRINT3, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT4);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT4_CRINT4);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT4_CRINT4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT4_CRINT4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT4_CRINT4, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT4_CRINT4, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT5);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT5_CRINT5);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT5_CRINT5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT5_CRINT5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT5_CRINT5, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT5_CRINT5, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT6);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT6, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT6_CRINT6);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT6_CRINT6, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT6_CRINT6, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT6_CRINT6, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT6_CRINT6, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTCR_CRINT7);
        iox_csr.wo(utra::iox::SFR_INTCR_CRINT7, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTCR_CRINT7_CRINT7);
        iox_csr.rmwf(utra::iox::SFR_INTCR_CRINT7_CRINT7, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTCR_CRINT7_CRINT7, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTCR_CRINT7_CRINT7, 1);
        iox_csr.wfo(utra::iox::SFR_INTCR_CRINT7_CRINT7, baz);

        let foo = iox_csr.r(utra::iox::SFR_INTFR);
        iox_csr.wo(utra::iox::SFR_INTFR, foo);
        let bar = iox_csr.rf(utra::iox::SFR_INTFR_FRINT);
        iox_csr.rmwf(utra::iox::SFR_INTFR_FRINT, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_INTFR_FRINT, bar);
        baz |= iox_csr.ms(utra::iox::SFR_INTFR_FRINT, 1);
        iox_csr.wfo(utra::iox::SFR_INTFR_FRINT, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOUT_CRGO0);
        iox_csr.wo(utra::iox::SFR_GPIOOUT_CRGO0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOUT_CRGO0_CRGO0);
        iox_csr.rmwf(utra::iox::SFR_GPIOOUT_CRGO0_CRGO0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOUT_CRGO0_CRGO0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOUT_CRGO0_CRGO0, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOUT_CRGO0_CRGO0, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOUT_CRGO1);
        iox_csr.wo(utra::iox::SFR_GPIOOUT_CRGO1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOUT_CRGO1_CRGO1);
        iox_csr.rmwf(utra::iox::SFR_GPIOOUT_CRGO1_CRGO1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOUT_CRGO1_CRGO1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOUT_CRGO1_CRGO1, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOUT_CRGO1_CRGO1, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOUT_CRGO2);
        iox_csr.wo(utra::iox::SFR_GPIOOUT_CRGO2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOUT_CRGO2_CRGO2);
        iox_csr.rmwf(utra::iox::SFR_GPIOOUT_CRGO2_CRGO2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOUT_CRGO2_CRGO2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOUT_CRGO2_CRGO2, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOUT_CRGO2_CRGO2, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOUT_CRGO3);
        iox_csr.wo(utra::iox::SFR_GPIOOUT_CRGO3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOUT_CRGO3_CRGO3);
        iox_csr.rmwf(utra::iox::SFR_GPIOOUT_CRGO3_CRGO3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOUT_CRGO3_CRGO3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOUT_CRGO3_CRGO3, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOUT_CRGO3_CRGO3, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOUT_CRGO4);
        iox_csr.wo(utra::iox::SFR_GPIOOUT_CRGO4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOUT_CRGO4_CRGO4);
        iox_csr.rmwf(utra::iox::SFR_GPIOOUT_CRGO4_CRGO4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOUT_CRGO4_CRGO4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOUT_CRGO4_CRGO4, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOUT_CRGO4_CRGO4, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOUT_CRGO5);
        iox_csr.wo(utra::iox::SFR_GPIOOUT_CRGO5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOUT_CRGO5_CRGO5);
        iox_csr.rmwf(utra::iox::SFR_GPIOOUT_CRGO5_CRGO5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOUT_CRGO5_CRGO5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOUT_CRGO5_CRGO5, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOUT_CRGO5_CRGO5, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOE_CRGOE0);
        iox_csr.wo(utra::iox::SFR_GPIOOE_CRGOE0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOE_CRGOE0_CRGOE0);
        iox_csr.rmwf(utra::iox::SFR_GPIOOE_CRGOE0_CRGOE0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOE_CRGOE0_CRGOE0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOE_CRGOE0_CRGOE0, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOE_CRGOE0_CRGOE0, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOE_CRGOE1);
        iox_csr.wo(utra::iox::SFR_GPIOOE_CRGOE1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOE_CRGOE1_CRGOE1);
        iox_csr.rmwf(utra::iox::SFR_GPIOOE_CRGOE1_CRGOE1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOE_CRGOE1_CRGOE1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOE_CRGOE1_CRGOE1, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOE_CRGOE1_CRGOE1, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOE_CRGOE2);
        iox_csr.wo(utra::iox::SFR_GPIOOE_CRGOE2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOE_CRGOE2_CRGOE2);
        iox_csr.rmwf(utra::iox::SFR_GPIOOE_CRGOE2_CRGOE2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOE_CRGOE2_CRGOE2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOE_CRGOE2_CRGOE2, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOE_CRGOE2_CRGOE2, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOE_CRGOE3);
        iox_csr.wo(utra::iox::SFR_GPIOOE_CRGOE3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOE_CRGOE3_CRGOE3);
        iox_csr.rmwf(utra::iox::SFR_GPIOOE_CRGOE3_CRGOE3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOE_CRGOE3_CRGOE3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOE_CRGOE3_CRGOE3, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOE_CRGOE3_CRGOE3, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOE_CRGOE4);
        iox_csr.wo(utra::iox::SFR_GPIOOE_CRGOE4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOE_CRGOE4_CRGOE4);
        iox_csr.rmwf(utra::iox::SFR_GPIOOE_CRGOE4_CRGOE4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOE_CRGOE4_CRGOE4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOE_CRGOE4_CRGOE4, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOE_CRGOE4_CRGOE4, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOOE_CRGOE5);
        iox_csr.wo(utra::iox::SFR_GPIOOE_CRGOE5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOOE_CRGOE5_CRGOE5);
        iox_csr.rmwf(utra::iox::SFR_GPIOOE_CRGOE5_CRGOE5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOOE_CRGOE5_CRGOE5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOOE_CRGOE5_CRGOE5, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOOE_CRGOE5_CRGOE5, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOPU_CRGPU0);
        iox_csr.wo(utra::iox::SFR_GPIOPU_CRGPU0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOPU_CRGPU0_CRGPU0);
        iox_csr.rmwf(utra::iox::SFR_GPIOPU_CRGPU0_CRGPU0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOPU_CRGPU0_CRGPU0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOPU_CRGPU0_CRGPU0, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOPU_CRGPU0_CRGPU0, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOPU_CRGPU1);
        iox_csr.wo(utra::iox::SFR_GPIOPU_CRGPU1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOPU_CRGPU1_CRGPU1);
        iox_csr.rmwf(utra::iox::SFR_GPIOPU_CRGPU1_CRGPU1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOPU_CRGPU1_CRGPU1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOPU_CRGPU1_CRGPU1, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOPU_CRGPU1_CRGPU1, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOPU_CRGPU2);
        iox_csr.wo(utra::iox::SFR_GPIOPU_CRGPU2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOPU_CRGPU2_CRGPU2);
        iox_csr.rmwf(utra::iox::SFR_GPIOPU_CRGPU2_CRGPU2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOPU_CRGPU2_CRGPU2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOPU_CRGPU2_CRGPU2, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOPU_CRGPU2_CRGPU2, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOPU_CRGPU3);
        iox_csr.wo(utra::iox::SFR_GPIOPU_CRGPU3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOPU_CRGPU3_CRGPU3);
        iox_csr.rmwf(utra::iox::SFR_GPIOPU_CRGPU3_CRGPU3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOPU_CRGPU3_CRGPU3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOPU_CRGPU3_CRGPU3, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOPU_CRGPU3_CRGPU3, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOPU_CRGPU4);
        iox_csr.wo(utra::iox::SFR_GPIOPU_CRGPU4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOPU_CRGPU4_CRGPU4);
        iox_csr.rmwf(utra::iox::SFR_GPIOPU_CRGPU4_CRGPU4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOPU_CRGPU4_CRGPU4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOPU_CRGPU4_CRGPU4, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOPU_CRGPU4_CRGPU4, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOPU_CRGPU5);
        iox_csr.wo(utra::iox::SFR_GPIOPU_CRGPU5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOPU_CRGPU5_CRGPU5);
        iox_csr.rmwf(utra::iox::SFR_GPIOPU_CRGPU5_CRGPU5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOPU_CRGPU5_CRGPU5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOPU_CRGPU5_CRGPU5, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOPU_CRGPU5_CRGPU5, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOIN_SRGI0);
        iox_csr.wo(utra::iox::SFR_GPIOIN_SRGI0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOIN_SRGI0_SRGI0);
        iox_csr.rmwf(utra::iox::SFR_GPIOIN_SRGI0_SRGI0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOIN_SRGI0_SRGI0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOIN_SRGI0_SRGI0, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOIN_SRGI0_SRGI0, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOIN_SRGI1);
        iox_csr.wo(utra::iox::SFR_GPIOIN_SRGI1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOIN_SRGI1_SRGI1);
        iox_csr.rmwf(utra::iox::SFR_GPIOIN_SRGI1_SRGI1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOIN_SRGI1_SRGI1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOIN_SRGI1_SRGI1, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOIN_SRGI1_SRGI1, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOIN_SRGI2);
        iox_csr.wo(utra::iox::SFR_GPIOIN_SRGI2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOIN_SRGI2_SRGI2);
        iox_csr.rmwf(utra::iox::SFR_GPIOIN_SRGI2_SRGI2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOIN_SRGI2_SRGI2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOIN_SRGI2_SRGI2, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOIN_SRGI2_SRGI2, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOIN_SRGI3);
        iox_csr.wo(utra::iox::SFR_GPIOIN_SRGI3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOIN_SRGI3_SRGI3);
        iox_csr.rmwf(utra::iox::SFR_GPIOIN_SRGI3_SRGI3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOIN_SRGI3_SRGI3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOIN_SRGI3_SRGI3, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOIN_SRGI3_SRGI3, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOIN_SRGI4);
        iox_csr.wo(utra::iox::SFR_GPIOIN_SRGI4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOIN_SRGI4_SRGI4);
        iox_csr.rmwf(utra::iox::SFR_GPIOIN_SRGI4_SRGI4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOIN_SRGI4_SRGI4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOIN_SRGI4_SRGI4, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOIN_SRGI4_SRGI4, baz);

        let foo = iox_csr.r(utra::iox::SFR_GPIOIN_SRGI5);
        iox_csr.wo(utra::iox::SFR_GPIOIN_SRGI5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_GPIOIN_SRGI5_SRGI5);
        iox_csr.rmwf(utra::iox::SFR_GPIOIN_SRGI5_SRGI5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_GPIOIN_SRGI5_SRGI5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_GPIOIN_SRGI5_SRGI5, 1);
        iox_csr.wfo(utra::iox::SFR_GPIOIN_SRGI5_SRGI5, baz);

        let foo = iox_csr.r(utra::iox::SFR_PIOSEL);
        iox_csr.wo(utra::iox::SFR_PIOSEL, foo);
        let bar = iox_csr.rf(utra::iox::SFR_PIOSEL_PIOSEL);
        iox_csr.rmwf(utra::iox::SFR_PIOSEL_PIOSEL, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_PIOSEL_PIOSEL, bar);
        baz |= iox_csr.ms(utra::iox::SFR_PIOSEL_PIOSEL, 1);
        iox_csr.wfo(utra::iox::SFR_PIOSEL_PIOSEL, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0);
        iox_csr.wo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0);
        iox_csr.rmwf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL0_CR_CFG_SCHMSEL0, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1);
        iox_csr.wo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1);
        iox_csr.rmwf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL1_CR_CFG_SCHMSEL1, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2);
        iox_csr.wo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2);
        iox_csr.rmwf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL2_CR_CFG_SCHMSEL2, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3);
        iox_csr.wo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3);
        iox_csr.rmwf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL3_CR_CFG_SCHMSEL3, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4);
        iox_csr.wo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4);
        iox_csr.rmwf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL4_CR_CFG_SCHMSEL4, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5);
        iox_csr.wo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5);
        iox_csr.rmwf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SCHM_CR_CFG_SCHMSEL5_CR_CFG_SCHMSEL5, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0);
        iox_csr.wo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0);
        iox_csr.rmwf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW0_CR_CFG_SLEWSLOW0, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1);
        iox_csr.wo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1);
        iox_csr.rmwf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW1_CR_CFG_SLEWSLOW1, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2);
        iox_csr.wo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2);
        iox_csr.rmwf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW2_CR_CFG_SLEWSLOW2, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3);
        iox_csr.wo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3);
        iox_csr.rmwf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW3_CR_CFG_SLEWSLOW3, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4);
        iox_csr.wo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4);
        iox_csr.rmwf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW4_CR_CFG_SLEWSLOW4, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5);
        iox_csr.wo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5);
        iox_csr.rmwf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_SLEW_CR_CFG_SLEWSLOW5_CR_CFG_SLEWSLOW5, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0);
        iox_csr.wo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0);
        iox_csr.rmwf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL0_CR_CFG_DRVSEL0, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1);
        iox_csr.wo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1);
        iox_csr.rmwf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL1_CR_CFG_DRVSEL1, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2);
        iox_csr.wo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2);
        iox_csr.rmwf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL2_CR_CFG_DRVSEL2, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3);
        iox_csr.wo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3);
        iox_csr.rmwf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL3_CR_CFG_DRVSEL3, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4);
        iox_csr.wo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4);
        iox_csr.rmwf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL4_CR_CFG_DRVSEL4, baz);

        let foo = iox_csr.r(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5);
        iox_csr.wo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5, foo);
        let bar = iox_csr.rf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5);
        iox_csr.rmwf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5, bar);
        let mut baz = iox_csr.zf(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5, bar);
        baz |= iox_csr.ms(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5, 1);
        iox_csr.wfo(utra::iox::SFR_CFG_DRVSEL_CR_CFG_DRVSEL5_CR_CFG_DRVSEL5, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_pwm_csr() {
        use super::*;
        let mut pwm_csr = CSR::new(HW_PWM_BASE as *mut u32);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CMD);
        pwm_csr.wo(utra::pwm::REG_TIM0_CMD, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CMD_R_TIMER0_START);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CMD_R_TIMER0_START, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CMD_R_TIMER0_START, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CMD_R_TIMER0_START, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CMD_R_TIMER0_START, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CMD_R_TIMER0_STOP);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CMD_R_TIMER0_STOP, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CMD_R_TIMER0_STOP, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CMD_R_TIMER0_STOP, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CMD_R_TIMER0_STOP, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CMD_R_TIMER0_UPDATE);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CMD_R_TIMER0_UPDATE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CMD_R_TIMER0_UPDATE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CMD_R_TIMER0_UPDATE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CMD_R_TIMER0_UPDATE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CMD_R_TIMER0_RST);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CMD_R_TIMER0_RST, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CMD_R_TIMER0_RST, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CMD_R_TIMER0_RST, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CMD_R_TIMER0_RST, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CMD_R_TIMER0_ARM);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CMD_R_TIMER0_ARM, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CMD_R_TIMER0_ARM, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CMD_R_TIMER0_ARM, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CMD_R_TIMER0_ARM, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CFG);
        pwm_csr.wo(utra::pwm::REG_TIM0_CFG, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_SEL);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_SEL, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_SEL, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_SEL, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_SEL, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_MODE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_CLK);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_CLK, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_CLK, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_CLK, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CFG_R_TIMER0_IN_CLK, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CFG_R_TIMER0_SAW);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CFG_R_TIMER0_SAW, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CFG_R_TIMER0_SAW, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CFG_R_TIMER0_SAW, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CFG_R_TIMER0_SAW, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CFG_R_TIMER0_PRESC);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CFG_R_TIMER0_PRESC, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CFG_R_TIMER0_PRESC, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CFG_R_TIMER0_PRESC, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CFG_R_TIMER0_PRESC, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH0_TH);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH0_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH0_TH_R_TIMER0_CH0_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH1_TH);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH1_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH1_TH_R_TIMER0_CH1_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH2_TH);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH2_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH2_TH_R_TIMER0_CH2_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH3_TH);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH3_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH3_TH_R_TIMER0_CH3_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH0_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH0_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH0_LUT_R_TIMER0_CH0_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH1_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH1_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH1_LUT_R_TIMER0_CH1_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH2_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH2_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH2_LUT_R_TIMER0_CH2_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM0_CH3_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM0_CH3_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM0_CH3_LUT_R_TIMER0_CH3_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CMD);
        pwm_csr.wo(utra::pwm::REG_TIM1_CMD, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CMD_R_TIMER1_START);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CMD_R_TIMER1_START, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CMD_R_TIMER1_START, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CMD_R_TIMER1_START, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CMD_R_TIMER1_START, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CMD_R_TIMER1_STOP);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CMD_R_TIMER1_STOP, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CMD_R_TIMER1_STOP, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CMD_R_TIMER1_STOP, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CMD_R_TIMER1_STOP, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CMD_R_TIMER1_UPDATE);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CMD_R_TIMER1_UPDATE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CMD_R_TIMER1_UPDATE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CMD_R_TIMER1_UPDATE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CMD_R_TIMER1_UPDATE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CMD_R_TIMER1_RST);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CMD_R_TIMER1_RST, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CMD_R_TIMER1_RST, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CMD_R_TIMER1_RST, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CMD_R_TIMER1_RST, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CMD_R_TIMER1_ARM);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CMD_R_TIMER1_ARM, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CMD_R_TIMER1_ARM, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CMD_R_TIMER1_ARM, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CMD_R_TIMER1_ARM, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CFG);
        pwm_csr.wo(utra::pwm::REG_TIM1_CFG, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_SEL);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_SEL, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_SEL, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_SEL, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_SEL, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_MODE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_CLK);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_CLK, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_CLK, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_CLK, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CFG_R_TIMER1_IN_CLK, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CFG_R_TIMER1_SAW);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CFG_R_TIMER1_SAW, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CFG_R_TIMER1_SAW, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CFG_R_TIMER1_SAW, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CFG_R_TIMER1_SAW, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CFG_R_TIMER1_PRESC);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CFG_R_TIMER1_PRESC, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CFG_R_TIMER1_PRESC, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CFG_R_TIMER1_PRESC, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CFG_R_TIMER1_PRESC, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH0_TH);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH0_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH0_TH_R_TIMER1_CH0_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH1_TH);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH1_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH1_TH_R_TIMER1_CH1_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH2_TH);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH2_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH2_TH_R_TIMER1_CH2_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH3_TH);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH3_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH3_TH_R_TIMER1_CH3_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH0_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH0_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH0_LUT_R_TIMER1_CH0_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH1_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH1_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH1_LUT_R_TIMER1_CH1_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH2_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH2_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH2_LUT_R_TIMER1_CH2_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM1_CH3_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM1_CH3_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM1_CH3_LUT_R_TIMER1_CH3_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CMD);
        pwm_csr.wo(utra::pwm::REG_TIM2_CMD, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CMD_R_TIMER2_START);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CMD_R_TIMER2_START, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CMD_R_TIMER2_START, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CMD_R_TIMER2_START, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CMD_R_TIMER2_START, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CMD_R_TIMER2_STOP);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CMD_R_TIMER2_STOP, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CMD_R_TIMER2_STOP, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CMD_R_TIMER2_STOP, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CMD_R_TIMER2_STOP, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CMD_R_TIMER2_UPDATE);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CMD_R_TIMER2_UPDATE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CMD_R_TIMER2_UPDATE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CMD_R_TIMER2_UPDATE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CMD_R_TIMER2_UPDATE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CMD_R_TIMER2_RST);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CMD_R_TIMER2_RST, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CMD_R_TIMER2_RST, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CMD_R_TIMER2_RST, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CMD_R_TIMER2_RST, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CMD_R_TIMER2_ARM);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CMD_R_TIMER2_ARM, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CMD_R_TIMER2_ARM, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CMD_R_TIMER2_ARM, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CMD_R_TIMER2_ARM, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CFG);
        pwm_csr.wo(utra::pwm::REG_TIM2_CFG, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_SEL);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_SEL, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_SEL, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_SEL, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_SEL, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_MODE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_CLK);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_CLK, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_CLK, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_CLK, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CFG_R_TIMER2_IN_CLK, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CFG_R_TIMER2_SAW);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CFG_R_TIMER2_SAW, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CFG_R_TIMER2_SAW, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CFG_R_TIMER2_SAW, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CFG_R_TIMER2_SAW, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CFG_R_TIMER2_PRESC);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CFG_R_TIMER2_PRESC, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CFG_R_TIMER2_PRESC, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CFG_R_TIMER2_PRESC, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CFG_R_TIMER2_PRESC, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH0_TH);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH0_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH0_TH_R_TIMER2_CH0_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH1_TH);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH1_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH1_TH_R_TIMER2_CH1_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH2_TH);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH2_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH2_TH_R_TIMER2_CH2_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH3_TH);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH3_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH3_TH_R_TIMER2_CH3_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH0_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH0_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH0_LUT_R_TIMER2_CH0_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH1_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH1_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH1_LUT_R_TIMER2_CH1_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH2_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH2_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH2_LUT_R_TIMER2_CH2_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM2_CH3_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM2_CH3_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM2_CH3_LUT_R_TIMER2_CH3_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CMD);
        pwm_csr.wo(utra::pwm::REG_TIM3_CMD, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CMD_R_TIMER3_START);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CMD_R_TIMER3_START, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CMD_R_TIMER3_START, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CMD_R_TIMER3_START, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CMD_R_TIMER3_START, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CMD_R_TIMER3_STOP);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CMD_R_TIMER3_STOP, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CMD_R_TIMER3_STOP, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CMD_R_TIMER3_STOP, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CMD_R_TIMER3_STOP, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CMD_R_TIMER3_UPDATE);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CMD_R_TIMER3_UPDATE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CMD_R_TIMER3_UPDATE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CMD_R_TIMER3_UPDATE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CMD_R_TIMER3_UPDATE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CMD_R_TIMER3_RST);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CMD_R_TIMER3_RST, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CMD_R_TIMER3_RST, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CMD_R_TIMER3_RST, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CMD_R_TIMER3_RST, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CMD_R_TIMER3_ARM);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CMD_R_TIMER3_ARM, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CMD_R_TIMER3_ARM, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CMD_R_TIMER3_ARM, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CMD_R_TIMER3_ARM, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CFG);
        pwm_csr.wo(utra::pwm::REG_TIM3_CFG, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_SEL);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_SEL, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_SEL, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_SEL, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_SEL, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_MODE, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_CLK);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_CLK, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_CLK, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_CLK, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CFG_R_TIMER3_IN_CLK, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CFG_R_TIMER3_SAW);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CFG_R_TIMER3_SAW, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CFG_R_TIMER3_SAW, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CFG_R_TIMER3_SAW, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CFG_R_TIMER3_SAW, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CFG_R_TIMER3_PRESC);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CFG_R_TIMER3_PRESC, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CFG_R_TIMER3_PRESC, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CFG_R_TIMER3_PRESC, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CFG_R_TIMER3_PRESC, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH0_TH);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH0_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH0_TH_R_TIMER3_CH0_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH1_TH);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH1_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH1_TH_R_TIMER3_CH1_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH2_TH);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH2_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH2_TH_R_TIMER3_CH2_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH3_TH);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH3_TH, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_TH);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_TH, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_TH, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_TH, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_TH, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_MODE);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_MODE, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_MODE, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_MODE, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH3_TH_R_TIMER3_CH3_MODE, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH0_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH0_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH0_LUT_R_TIMER3_CH0_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH1_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH1_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH1_LUT_R_TIMER3_CH1_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH2_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH2_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH2_LUT_R_TIMER3_CH2_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_TIM3_CH3_LUT);
        pwm_csr.wo(utra::pwm::REG_TIM3_CH3_LUT, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_LUT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_LUT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_LUT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_LUT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_LUT, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_FLT);
        pwm_csr.rmwf(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_FLT, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_FLT, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_FLT, 1);
        pwm_csr.wfo(utra::pwm::REG_TIM3_CH3_LUT_R_TIMER3_CH3_FLT, baz);

        let foo = pwm_csr.r(utra::pwm::REG_EVENT_CFG);
        pwm_csr.wo(utra::pwm::REG_EVENT_CFG, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_0);
        pwm_csr.rmwf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_0, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_0, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_0, 1);
        pwm_csr.wfo(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_0, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_1);
        pwm_csr.rmwf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_1, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_1, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_1, 1);
        pwm_csr.wfo(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_1, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_2);
        pwm_csr.rmwf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_2, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_2, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_2, 1);
        pwm_csr.wfo(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_2, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_3);
        pwm_csr.rmwf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_3, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_3, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_3, 1);
        pwm_csr.wfo(utra::pwm::REG_EVENT_CFG_R_EVENT_SEL_3, baz);
        let bar = pwm_csr.rf(utra::pwm::REG_EVENT_CFG_R_EVENT_EN);
        pwm_csr.rmwf(utra::pwm::REG_EVENT_CFG_R_EVENT_EN, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_EVENT_CFG_R_EVENT_EN, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_EVENT_CFG_R_EVENT_EN, 1);
        pwm_csr.wfo(utra::pwm::REG_EVENT_CFG_R_EVENT_EN, baz);

        let foo = pwm_csr.r(utra::pwm::REG_CH_EN);
        pwm_csr.wo(utra::pwm::REG_CH_EN, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_CH_EN_R_CLK_EN);
        pwm_csr.rmwf(utra::pwm::REG_CH_EN_R_CLK_EN, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_CH_EN_R_CLK_EN, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_CH_EN_R_CLK_EN, 1);
        pwm_csr.wfo(utra::pwm::REG_CH_EN_R_CLK_EN, baz);

        let foo = pwm_csr.r(utra::pwm::REG_PREFD0);
        pwm_csr.wo(utra::pwm::REG_PREFD0, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_PREFD0_LSCLK_PREFD_0);
        pwm_csr.rmwf(utra::pwm::REG_PREFD0_LSCLK_PREFD_0, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_PREFD0_LSCLK_PREFD_0, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_PREFD0_LSCLK_PREFD_0, 1);
        pwm_csr.wfo(utra::pwm::REG_PREFD0_LSCLK_PREFD_0, baz);

        let foo = pwm_csr.r(utra::pwm::REG_PREFD1);
        pwm_csr.wo(utra::pwm::REG_PREFD1, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_PREFD1_LSCLK_PREFD_1);
        pwm_csr.rmwf(utra::pwm::REG_PREFD1_LSCLK_PREFD_1, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_PREFD1_LSCLK_PREFD_1, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_PREFD1_LSCLK_PREFD_1, 1);
        pwm_csr.wfo(utra::pwm::REG_PREFD1_LSCLK_PREFD_1, baz);

        let foo = pwm_csr.r(utra::pwm::REG_PREFD2);
        pwm_csr.wo(utra::pwm::REG_PREFD2, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_PREFD2_LSCLK_PREFD_2);
        pwm_csr.rmwf(utra::pwm::REG_PREFD2_LSCLK_PREFD_2, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_PREFD2_LSCLK_PREFD_2, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_PREFD2_LSCLK_PREFD_2, 1);
        pwm_csr.wfo(utra::pwm::REG_PREFD2_LSCLK_PREFD_2, baz);

        let foo = pwm_csr.r(utra::pwm::REG_PREFD3);
        pwm_csr.wo(utra::pwm::REG_PREFD3, foo);
        let bar = pwm_csr.rf(utra::pwm::REG_PREFD3_LSCLK_PREFD_3);
        pwm_csr.rmwf(utra::pwm::REG_PREFD3_LSCLK_PREFD_3, bar);
        let mut baz = pwm_csr.zf(utra::pwm::REG_PREFD3_LSCLK_PREFD_3, bar);
        baz |= pwm_csr.ms(utra::pwm::REG_PREFD3_LSCLK_PREFD_3, 1);
        pwm_csr.wfo(utra::pwm::REG_PREFD3_LSCLK_PREFD_3, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_sddc_csr() {
        use super::*;
        let mut sddc_csr = CSR::new(HW_SDDC_BASE as *mut u32);

        let foo = sddc_csr.r(utra::sddc::SFR_IO);
        sddc_csr.wo(utra::sddc::SFR_IO, foo);
        let bar = sddc_csr.rf(utra::sddc::SFR_IO_SFR_IO);
        sddc_csr.rmwf(utra::sddc::SFR_IO_SFR_IO, bar);
        let mut baz = sddc_csr.zf(utra::sddc::SFR_IO_SFR_IO, bar);
        baz |= sddc_csr.ms(utra::sddc::SFR_IO_SFR_IO, 1);
        sddc_csr.wfo(utra::sddc::SFR_IO_SFR_IO, baz);

        let foo = sddc_csr.r(utra::sddc::SFR_AR);
        sddc_csr.wo(utra::sddc::SFR_AR, foo);
        let bar = sddc_csr.rf(utra::sddc::SFR_AR_SFR_AR);
        sddc_csr.rmwf(utra::sddc::SFR_AR_SFR_AR, bar);
        let mut baz = sddc_csr.zf(utra::sddc::SFR_AR_SFR_AR, bar);
        baz |= sddc_csr.ms(utra::sddc::SFR_AR_SFR_AR, 1);
        sddc_csr.wfo(utra::sddc::SFR_AR_SFR_AR, baz);

        let foo = sddc_csr.r(utra::sddc::CR_OCR);
        sddc_csr.wo(utra::sddc::CR_OCR, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_OCR_CR_OCR);
        sddc_csr.rmwf(utra::sddc::CR_OCR_CR_OCR, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_OCR_CR_OCR, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_OCR_CR_OCR, 1);
        sddc_csr.wfo(utra::sddc::CR_OCR_CR_OCR, baz);

        let foo = sddc_csr.r(utra::sddc::CR_RDFFTHRES);
        sddc_csr.wo(utra::sddc::CR_RDFFTHRES, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_RDFFTHRES_CR_RDFFTHRES);
        sddc_csr.rmwf(utra::sddc::CR_RDFFTHRES_CR_RDFFTHRES, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_RDFFTHRES_CR_RDFFTHRES, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_RDFFTHRES_CR_RDFFTHRES, 1);
        sddc_csr.wfo(utra::sddc::CR_RDFFTHRES_CR_RDFFTHRES, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REV);
        sddc_csr.wo(utra::sddc::CR_REV, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REV_CFG_REG_SD_SPEC_REVISION);
        sddc_csr.rmwf(utra::sddc::CR_REV_CFG_REG_SD_SPEC_REVISION, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REV_CFG_REG_SD_SPEC_REVISION, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REV_CFG_REG_SD_SPEC_REVISION, 1);
        sddc_csr.wfo(utra::sddc::CR_REV_CFG_REG_SD_SPEC_REVISION, baz);
        let bar = sddc_csr.rf(utra::sddc::CR_REV_CFG_REG_CCCR_SDIO_REVISION);
        sddc_csr.rmwf(utra::sddc::CR_REV_CFG_REG_CCCR_SDIO_REVISION, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REV_CFG_REG_CCCR_SDIO_REVISION, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REV_CFG_REG_CCCR_SDIO_REVISION, 1);
        sddc_csr.wfo(utra::sddc::CR_REV_CFG_REG_CCCR_SDIO_REVISION, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BACSA);
        sddc_csr.wo(utra::sddc::CR_BACSA, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BACSA_CFG_BASE_ADDR_CSA);
        sddc_csr.rmwf(utra::sddc::CR_BACSA_CFG_BASE_ADDR_CSA, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BACSA_CFG_BASE_ADDR_CSA, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BACSA_CFG_BASE_ADDR_CSA, 1);
        sddc_csr.wfo(utra::sddc::CR_BACSA_CFG_BASE_ADDR_CSA, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC0_CFG_BASE_ADDR_IO_FUNC0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC1_CFG_BASE_ADDR_IO_FUNC1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC2_CFG_BASE_ADDR_IO_FUNC2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC3_CFG_BASE_ADDR_IO_FUNC3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC4_CFG_BASE_ADDR_IO_FUNC4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC5_CFG_BASE_ADDR_IO_FUNC5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC6_CFG_BASE_ADDR_IO_FUNC6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7);
        sddc_csr.wo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7);
        sddc_csr.rmwf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7, 1);
        sddc_csr.wfo(utra::sddc::CR_BAIOFN_CFG_BASE_ADDR_IO_FUNC7_CFG_BASE_ADDR_IO_FUNC7, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR0_CFG_REG_FUNC_CIS_PTR0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR1_CFG_REG_FUNC_CIS_PTR1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR2_CFG_REG_FUNC_CIS_PTR2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR3_CFG_REG_FUNC_CIS_PTR3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR4_CFG_REG_FUNC_CIS_PTR4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR5_CFG_REG_FUNC_CIS_PTR5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR6_CFG_REG_FUNC_CIS_PTR6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7);
        sddc_csr.wo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7);
        sddc_csr.rmwf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7, 1);
        sddc_csr.wfo(utra::sddc::CR_FNCISPTR_CFG_REG_FUNC_CIS_PTR7_CFG_REG_FUNC_CIS_PTR7, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE0_CFG_REG_FUNC_EXT_STD_CODE0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE1_CFG_REG_FUNC_EXT_STD_CODE1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE2_CFG_REG_FUNC_EXT_STD_CODE2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE3_CFG_REG_FUNC_EXT_STD_CODE3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE4_CFG_REG_FUNC_EXT_STD_CODE4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE5_CFG_REG_FUNC_EXT_STD_CODE5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE6_CFG_REG_FUNC_EXT_STD_CODE6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7);
        sddc_csr.wo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7);
        sddc_csr.rmwf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7, 1);
        sddc_csr.wfo(utra::sddc::CR_FNEXTSTDCODE_CFG_REG_FUNC_EXT_STD_CODE7_CFG_REG_FUNC_EXT_STD_CODE7, baz);

        let foo = sddc_csr.r(utra::sddc::CR_WRITE_PROTECT);
        sddc_csr.wo(utra::sddc::CR_WRITE_PROTECT, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_WRITE_PROTECT_CR_WRITE_PROTECT);
        sddc_csr.rmwf(utra::sddc::CR_WRITE_PROTECT_CR_WRITE_PROTECT, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_WRITE_PROTECT_CR_WRITE_PROTECT, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_WRITE_PROTECT_CR_WRITE_PROTECT, 1);
        sddc_csr.wfo(utra::sddc::CR_WRITE_PROTECT_CR_WRITE_PROTECT, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_DSR);
        sddc_csr.wo(utra::sddc::CR_REG_DSR, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_DSR_CR_REG_DSR);
        sddc_csr.rmwf(utra::sddc::CR_REG_DSR_CR_REG_DSR, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_DSR_CR_REG_DSR, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_DSR_CR_REG_DSR, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_DSR_CR_REG_DSR, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CID_CFG_REG_CID0);
        sddc_csr.wo(utra::sddc::CR_REG_CID_CFG_REG_CID0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0);
        sddc_csr.rmwf(utra::sddc::CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CID_CFG_REG_CID0_CFG_REG_CID0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CID_CFG_REG_CID1);
        sddc_csr.wo(utra::sddc::CR_REG_CID_CFG_REG_CID1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1);
        sddc_csr.rmwf(utra::sddc::CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CID_CFG_REG_CID1_CFG_REG_CID1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CID_CFG_REG_CID2);
        sddc_csr.wo(utra::sddc::CR_REG_CID_CFG_REG_CID2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2);
        sddc_csr.rmwf(utra::sddc::CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CID_CFG_REG_CID2_CFG_REG_CID2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CID_CFG_REG_CID3);
        sddc_csr.wo(utra::sddc::CR_REG_CID_CFG_REG_CID3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3);
        sddc_csr.rmwf(utra::sddc::CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CID_CFG_REG_CID3_CFG_REG_CID3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CSD_CFG_REG_CSD0);
        sddc_csr.wo(utra::sddc::CR_REG_CSD_CFG_REG_CSD0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0);
        sddc_csr.rmwf(utra::sddc::CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CSD_CFG_REG_CSD0_CFG_REG_CSD0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CSD_CFG_REG_CSD1);
        sddc_csr.wo(utra::sddc::CR_REG_CSD_CFG_REG_CSD1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1);
        sddc_csr.rmwf(utra::sddc::CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CSD_CFG_REG_CSD1_CFG_REG_CSD1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CSD_CFG_REG_CSD2);
        sddc_csr.wo(utra::sddc::CR_REG_CSD_CFG_REG_CSD2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2);
        sddc_csr.rmwf(utra::sddc::CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CSD_CFG_REG_CSD2_CFG_REG_CSD2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_CSD_CFG_REG_CSD3);
        sddc_csr.wo(utra::sddc::CR_REG_CSD_CFG_REG_CSD3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3);
        sddc_csr.rmwf(utra::sddc::CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_CSD_CFG_REG_CSD3_CFG_REG_CSD3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SCR_CFG_REG_SCR0);
        sddc_csr.wo(utra::sddc::CR_REG_SCR_CFG_REG_SCR0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0);
        sddc_csr.rmwf(utra::sddc::CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SCR_CFG_REG_SCR0_CFG_REG_SCR0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SCR_CFG_REG_SCR1);
        sddc_csr.wo(utra::sddc::CR_REG_SCR_CFG_REG_SCR1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1);
        sddc_csr.rmwf(utra::sddc::CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SCR_CFG_REG_SCR1_CFG_REG_SCR1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS0_CFG_REG_SD_STATUS0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS1_CFG_REG_SD_STATUS1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS2_CFG_REG_SD_STATUS2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS3_CFG_REG_SD_STATUS3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS4_CFG_REG_SD_STATUS4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS5_CFG_REG_SD_STATUS5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS6_CFG_REG_SD_STATUS6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS7_CFG_REG_SD_STATUS7, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS8_CFG_REG_SD_STATUS8, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS9_CFG_REG_SD_STATUS9, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS10_CFG_REG_SD_STATUS10, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS11_CFG_REG_SD_STATUS11, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS12_CFG_REG_SD_STATUS12, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS13_CFG_REG_SD_STATUS13, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS14_CFG_REG_SD_STATUS14, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15);
        sddc_csr.wo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15);
        sddc_csr.rmwf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_SD_STATUS_CFG_REG_SD_STATUS15_CFG_REG_SD_STATUS15, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC0_CFG_BASE_ADDR_MEM_FUNC0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC1_CFG_BASE_ADDR_MEM_FUNC1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC2_CFG_BASE_ADDR_MEM_FUNC2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC3_CFG_BASE_ADDR_MEM_FUNC3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC4_CFG_BASE_ADDR_MEM_FUNC4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC5_CFG_BASE_ADDR_MEM_FUNC5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC6_CFG_BASE_ADDR_MEM_FUNC6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC7_CFG_BASE_ADDR_MEM_FUNC7, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC8_CFG_BASE_ADDR_MEM_FUNC8, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC9_CFG_BASE_ADDR_MEM_FUNC9, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC10_CFG_BASE_ADDR_MEM_FUNC10, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC11_CFG_BASE_ADDR_MEM_FUNC11, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC12_CFG_BASE_ADDR_MEM_FUNC12, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC13_CFG_BASE_ADDR_MEM_FUNC13, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC14_CFG_BASE_ADDR_MEM_FUNC14, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC15_CFG_BASE_ADDR_MEM_FUNC15, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC16_CFG_BASE_ADDR_MEM_FUNC16, baz);

        let foo = sddc_csr.r(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17);
        sddc_csr.wo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17);
        sddc_csr.rmwf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17, 1);
        sddc_csr.wfo(utra::sddc::CR_BASE_ADDR_MEM_FUNC_CFG_BASE_ADDR_MEM_FUNC17_CFG_BASE_ADDR_MEM_FUNC17, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0_CFG_REG_FUNC_ISDIO_INTERFACE_CODE0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1_CFG_REG_FUNC_ISDIO_INTERFACE_CODE1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2_CFG_REG_FUNC_ISDIO_INTERFACE_CODE2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3_CFG_REG_FUNC_ISDIO_INTERFACE_CODE3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4_CFG_REG_FUNC_ISDIO_INTERFACE_CODE4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5_CFG_REG_FUNC_ISDIO_INTERFACE_CODE5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_INTERFACE_CODE_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6_CFG_REG_FUNC_ISDIO_INTERFACE_CODE6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE0_CFG_REG_FUNC_MANUFACT_CODE0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE1_CFG_REG_FUNC_MANUFACT_CODE1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE2_CFG_REG_FUNC_MANUFACT_CODE2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE3_CFG_REG_FUNC_MANUFACT_CODE3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE4_CFG_REG_FUNC_MANUFACT_CODE4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE5_CFG_REG_FUNC_MANUFACT_CODE5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_CODE_CFG_REG_FUNC_MANUFACT_CODE6_CFG_REG_FUNC_MANUFACT_CODE6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO0_CFG_REG_FUNC_MANUFACT_INFO0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO1_CFG_REG_FUNC_MANUFACT_INFO1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO2_CFG_REG_FUNC_MANUFACT_INFO2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO3_CFG_REG_FUNC_MANUFACT_INFO3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO4_CFG_REG_FUNC_MANUFACT_INFO4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO5_CFG_REG_FUNC_MANUFACT_INFO5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_MANUFACT_INFO_CFG_REG_FUNC_MANUFACT_INFO6_CFG_REG_FUNC_MANUFACT_INFO6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_ISDIO_TYPE_SUP_CODE_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6_CFG_REG_FUNC_ISDIO_TYPE_SUP_CODE6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO0_CFG_REG_FUNC_INFO0, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO1_CFG_REG_FUNC_INFO1, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO2_CFG_REG_FUNC_INFO2, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO3_CFG_REG_FUNC_INFO3, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO4_CFG_REG_FUNC_INFO4, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO5_CFG_REG_FUNC_INFO5, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6);
        sddc_csr.wo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6);
        sddc_csr.rmwf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_FUNC_INFO_CFG_REG_FUNC_INFO6_CFG_REG_FUNC_INFO6, baz);

        let foo = sddc_csr.r(utra::sddc::CR_REG_UHS_1_SUPPORT);
        sddc_csr.wo(utra::sddc::CR_REG_UHS_1_SUPPORT, foo);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT);
        sddc_csr.rmwf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_MAX_CURRENT, baz);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION);
        sddc_csr.rmwf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_DATA_STRC_VERSION, baz);
        let bar = sddc_csr.rf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT);
        sddc_csr.rmwf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT, bar);
        let mut baz = sddc_csr.zf(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT, bar);
        baz |= sddc_csr.ms(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT, 1);
        sddc_csr.wfo(utra::sddc::CR_REG_UHS_1_SUPPORT_CFG_REG_UHS_1_SUPPORT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_coresub_sramtrm_csr() {
        use super::*;
        let mut coresub_sramtrm_csr = CSR::new(HW_CORESUB_SRAMTRM_BASE as *mut u32);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_CACHE);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_CACHE, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_CACHE_SFR_CACHE);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_CACHE_SFR_CACHE, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_CACHE_SFR_CACHE, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_CACHE_SFR_CACHE, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_CACHE_SFR_CACHE, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_ITCM);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_ITCM, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_ITCM_SFR_ITCM);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_ITCM_SFR_ITCM, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_ITCM_SFR_ITCM, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_ITCM_SFR_ITCM, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_ITCM_SFR_ITCM, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_DTCM);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_DTCM, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_DTCM_SFR_DTCM);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_DTCM_SFR_DTCM, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_DTCM_SFR_DTCM, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_DTCM_SFR_DTCM, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_DTCM_SFR_DTCM, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_SRAM0);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_SRAM0, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_SRAM0_SFR_SRAM0);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_SRAM0_SFR_SRAM0, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_SRAM0_SFR_SRAM0, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_SRAM0_SFR_SRAM0, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_SRAM0_SFR_SRAM0, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_SRAM1);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_SRAM1, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_SRAM1_SFR_SRAM1);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_SRAM1_SFR_SRAM1, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_SRAM1_SFR_SRAM1, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_SRAM1_SFR_SRAM1, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_SRAM1_SFR_SRAM1, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_VEXRAM);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_VEXRAM, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_VEXRAM_SFR_VEXRAM);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_VEXRAM_SFR_VEXRAM, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_VEXRAM_SFR_VEXRAM, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_VEXRAM_SFR_VEXRAM, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_VEXRAM_SFR_VEXRAM, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_SRAMERR);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_SRAMERR, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_SRAMERR_SRAMBANKERR);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_SRAMERR_SRAMBANKERR, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_SRAMERR_SRAMBANKERR, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_SRAMERR_SRAMBANKERR, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_SRAMERR_SRAMBANKERR, baz);

        let foo = coresub_sramtrm_csr.r(utra::coresub_sramtrm::SFR_RAMSEC);
        coresub_sramtrm_csr.wo(utra::coresub_sramtrm::SFR_RAMSEC, foo);
        let bar = coresub_sramtrm_csr.rf(utra::coresub_sramtrm::SFR_RAMSEC_RAMSEC);
        coresub_sramtrm_csr.rmwf(utra::coresub_sramtrm::SFR_RAMSEC_RAMSEC, bar);
        let mut baz = coresub_sramtrm_csr.zf(utra::coresub_sramtrm::SFR_RAMSEC_RAMSEC, bar);
        baz |= coresub_sramtrm_csr.ms(utra::coresub_sramtrm::SFR_RAMSEC_RAMSEC, 1);
        coresub_sramtrm_csr.wfo(utra::coresub_sramtrm::SFR_RAMSEC_RAMSEC, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_mdma_csr() {
        use super::*;
        let mut mdma_csr = CSR::new(HW_MDMA_BASE as *mut u32);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL0);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL0, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL0_CR_EVSEL0);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL0_CR_EVSEL0, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL0_CR_EVSEL0, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL0_CR_EVSEL0, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL0_CR_EVSEL0, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL1);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL1, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL1_CR_EVSEL1);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL1_CR_EVSEL1, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL1_CR_EVSEL1, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL1_CR_EVSEL1, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL1_CR_EVSEL1, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL2);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL2, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL2_CR_EVSEL2);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL2_CR_EVSEL2, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL2_CR_EVSEL2, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL2_CR_EVSEL2, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL2_CR_EVSEL2, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL3);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL3, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL3_CR_EVSEL3);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL3_CR_EVSEL3, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL3_CR_EVSEL3, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL3_CR_EVSEL3, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL3_CR_EVSEL3, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL4);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL4, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL4_CR_EVSEL4);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL4_CR_EVSEL4, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL4_CR_EVSEL4, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL4_CR_EVSEL4, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL4_CR_EVSEL4, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL5);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL5, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL5_CR_EVSEL5);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL5_CR_EVSEL5, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL5_CR_EVSEL5, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL5_CR_EVSEL5, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL5_CR_EVSEL5, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL6);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL6, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL6_CR_EVSEL6);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL6_CR_EVSEL6, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL6_CR_EVSEL6, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL6_CR_EVSEL6, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL6_CR_EVSEL6, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_EVSEL_CR_EVSEL7);
        mdma_csr.wo(utra::mdma::SFR_EVSEL_CR_EVSEL7, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_EVSEL_CR_EVSEL7_CR_EVSEL7);
        mdma_csr.rmwf(utra::mdma::SFR_EVSEL_CR_EVSEL7_CR_EVSEL7, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_EVSEL_CR_EVSEL7_CR_EVSEL7, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_EVSEL_CR_EVSEL7_CR_EVSEL7, 1);
        mdma_csr.wfo(utra::mdma::SFR_EVSEL_CR_EVSEL7_CR_EVSEL7, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ0);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ0, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ0_CR_MDMAREQ0, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ1);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ1, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ1_CR_MDMAREQ1, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ2);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ2, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ2_CR_MDMAREQ2, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ3);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ3, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ3_CR_MDMAREQ3, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ4);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ4, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ4_CR_MDMAREQ4, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ5);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ5, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ5_CR_MDMAREQ5, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ6);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ6, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ6_CR_MDMAREQ6, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_CR_CR_MDMAREQ7);
        mdma_csr.wo(utra::mdma::SFR_CR_CR_MDMAREQ7, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7);
        mdma_csr.rmwf(utra::mdma::SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7, 1);
        mdma_csr.wfo(utra::mdma::SFR_CR_CR_MDMAREQ7_CR_MDMAREQ7, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ0);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ0, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ0_SR_MDMAREQ0, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ1);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ1, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ1_SR_MDMAREQ1, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ2);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ2, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ2_SR_MDMAREQ2, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ3);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ3, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ3_SR_MDMAREQ3, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ4);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ4, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ4_SR_MDMAREQ4, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ5);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ5, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ5_SR_MDMAREQ5, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ6);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ6, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ6_SR_MDMAREQ6, baz);

        let foo = mdma_csr.r(utra::mdma::SFR_SR_SR_MDMAREQ7);
        mdma_csr.wo(utra::mdma::SFR_SR_SR_MDMAREQ7, foo);
        let bar = mdma_csr.rf(utra::mdma::SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7);
        mdma_csr.rmwf(utra::mdma::SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7, bar);
        let mut baz = mdma_csr.zf(utra::mdma::SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7, bar);
        baz |= mdma_csr.ms(utra::mdma::SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7, 1);
        mdma_csr.wfo(utra::mdma::SFR_SR_SR_MDMAREQ7_SR_MDMAREQ7, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_qfc_csr() {
        use super::*;
        let mut qfc_csr = CSR::new(HW_QFC_BASE as *mut u32);

        let foo = qfc_csr.r(utra::qfc::SFR_IO);
        qfc_csr.wo(utra::qfc::SFR_IO, foo);
        let bar = qfc_csr.rf(utra::qfc::SFR_IO_SFR_IO);
        qfc_csr.rmwf(utra::qfc::SFR_IO_SFR_IO, bar);
        let mut baz = qfc_csr.zf(utra::qfc::SFR_IO_SFR_IO, bar);
        baz |= qfc_csr.ms(utra::qfc::SFR_IO_SFR_IO, 1);
        qfc_csr.wfo(utra::qfc::SFR_IO_SFR_IO, baz);

        let foo = qfc_csr.r(utra::qfc::SFR_AR);
        qfc_csr.wo(utra::qfc::SFR_AR, foo);
        let bar = qfc_csr.rf(utra::qfc::SFR_AR_SFR_AR);
        qfc_csr.rmwf(utra::qfc::SFR_AR_SFR_AR, bar);
        let mut baz = qfc_csr.zf(utra::qfc::SFR_AR_SFR_AR, bar);
        baz |= qfc_csr.ms(utra::qfc::SFR_AR_SFR_AR, 1);
        qfc_csr.wfo(utra::qfc::SFR_AR_SFR_AR, baz);

        let foo = qfc_csr.r(utra::qfc::SFR_IODRV);
        qfc_csr.wo(utra::qfc::SFR_IODRV, foo);
        let bar = qfc_csr.rf(utra::qfc::SFR_IODRV_PADDRVSEL);
        qfc_csr.rmwf(utra::qfc::SFR_IODRV_PADDRVSEL, bar);
        let mut baz = qfc_csr.zf(utra::qfc::SFR_IODRV_PADDRVSEL, bar);
        baz |= qfc_csr.ms(utra::qfc::SFR_IODRV_PADDRVSEL, 1);
        qfc_csr.wfo(utra::qfc::SFR_IODRV_PADDRVSEL, baz);

        let foo = qfc_csr.r(utra::qfc::CR_XIP_ADDRMODE);
        qfc_csr.wo(utra::qfc::CR_XIP_ADDRMODE, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_XIP_ADDRMODE_CR_XIP_ADDRMODE);
        qfc_csr.rmwf(utra::qfc::CR_XIP_ADDRMODE_CR_XIP_ADDRMODE, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_XIP_ADDRMODE_CR_XIP_ADDRMODE, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_XIP_ADDRMODE_CR_XIP_ADDRMODE, 1);
        qfc_csr.wfo(utra::qfc::CR_XIP_ADDRMODE_CR_XIP_ADDRMODE, baz);

        let foo = qfc_csr.r(utra::qfc::CR_XIP_OPCODE);
        qfc_csr.wo(utra::qfc::CR_XIP_OPCODE, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_XIP_OPCODE_CR_XIP_OPCODE);
        qfc_csr.rmwf(utra::qfc::CR_XIP_OPCODE_CR_XIP_OPCODE, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_XIP_OPCODE_CR_XIP_OPCODE, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_XIP_OPCODE_CR_XIP_OPCODE, 1);
        qfc_csr.wfo(utra::qfc::CR_XIP_OPCODE_CR_XIP_OPCODE, baz);

        let foo = qfc_csr.r(utra::qfc::CR_XIP_WIDTH);
        qfc_csr.wo(utra::qfc::CR_XIP_WIDTH, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_XIP_WIDTH_CR_XIP_WIDTH);
        qfc_csr.rmwf(utra::qfc::CR_XIP_WIDTH_CR_XIP_WIDTH, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_XIP_WIDTH_CR_XIP_WIDTH, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_XIP_WIDTH_CR_XIP_WIDTH, 1);
        qfc_csr.wfo(utra::qfc::CR_XIP_WIDTH_CR_XIP_WIDTH, baz);

        let foo = qfc_csr.r(utra::qfc::CR_XIP_SSEL);
        qfc_csr.wo(utra::qfc::CR_XIP_SSEL, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_XIP_SSEL_CR_XIP_SSEL);
        qfc_csr.rmwf(utra::qfc::CR_XIP_SSEL_CR_XIP_SSEL, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_XIP_SSEL_CR_XIP_SSEL, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_XIP_SSEL_CR_XIP_SSEL, 1);
        qfc_csr.wfo(utra::qfc::CR_XIP_SSEL_CR_XIP_SSEL, baz);

        let foo = qfc_csr.r(utra::qfc::CR_XIP_DUMCYC);
        qfc_csr.wo(utra::qfc::CR_XIP_DUMCYC, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_XIP_DUMCYC_CR_XIP_DUMCYC);
        qfc_csr.rmwf(utra::qfc::CR_XIP_DUMCYC_CR_XIP_DUMCYC, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_XIP_DUMCYC_CR_XIP_DUMCYC, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_XIP_DUMCYC_CR_XIP_DUMCYC, 1);
        qfc_csr.wfo(utra::qfc::CR_XIP_DUMCYC_CR_XIP_DUMCYC, baz);

        let foo = qfc_csr.r(utra::qfc::CR_XIP_CFG);
        qfc_csr.wo(utra::qfc::CR_XIP_CFG, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_XIP_CFG_CR_XIP_CFG);
        qfc_csr.rmwf(utra::qfc::CR_XIP_CFG_CR_XIP_CFG, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_XIP_CFG_CR_XIP_CFG, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_XIP_CFG_CR_XIP_CFG, 1);
        qfc_csr.wfo(utra::qfc::CR_XIP_CFG_CR_XIP_CFG, baz);

        let foo = qfc_csr.r(utra::qfc::CR_AESKEY_AESKEYIN0);
        qfc_csr.wo(utra::qfc::CR_AESKEY_AESKEYIN0, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_AESKEY_AESKEYIN0_AESKEYIN0);
        qfc_csr.rmwf(utra::qfc::CR_AESKEY_AESKEYIN0_AESKEYIN0, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_AESKEY_AESKEYIN0_AESKEYIN0, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_AESKEY_AESKEYIN0_AESKEYIN0, 1);
        qfc_csr.wfo(utra::qfc::CR_AESKEY_AESKEYIN0_AESKEYIN0, baz);

        let foo = qfc_csr.r(utra::qfc::CR_AESKEY_AESKEYIN1);
        qfc_csr.wo(utra::qfc::CR_AESKEY_AESKEYIN1, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_AESKEY_AESKEYIN1_AESKEYIN1);
        qfc_csr.rmwf(utra::qfc::CR_AESKEY_AESKEYIN1_AESKEYIN1, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_AESKEY_AESKEYIN1_AESKEYIN1, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_AESKEY_AESKEYIN1_AESKEYIN1, 1);
        qfc_csr.wfo(utra::qfc::CR_AESKEY_AESKEYIN1_AESKEYIN1, baz);

        let foo = qfc_csr.r(utra::qfc::CR_AESKEY_AESKEYIN2);
        qfc_csr.wo(utra::qfc::CR_AESKEY_AESKEYIN2, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_AESKEY_AESKEYIN2_AESKEYIN2);
        qfc_csr.rmwf(utra::qfc::CR_AESKEY_AESKEYIN2_AESKEYIN2, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_AESKEY_AESKEYIN2_AESKEYIN2, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_AESKEY_AESKEYIN2_AESKEYIN2, 1);
        qfc_csr.wfo(utra::qfc::CR_AESKEY_AESKEYIN2_AESKEYIN2, baz);

        let foo = qfc_csr.r(utra::qfc::CR_AESKEY_AESKEYIN3);
        qfc_csr.wo(utra::qfc::CR_AESKEY_AESKEYIN3, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_AESKEY_AESKEYIN3_AESKEYIN3);
        qfc_csr.rmwf(utra::qfc::CR_AESKEY_AESKEYIN3_AESKEYIN3, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_AESKEY_AESKEYIN3_AESKEYIN3, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_AESKEY_AESKEYIN3_AESKEYIN3, 1);
        qfc_csr.wfo(utra::qfc::CR_AESKEY_AESKEYIN3_AESKEYIN3, baz);

        let foo = qfc_csr.r(utra::qfc::CR_AESENA);
        qfc_csr.wo(utra::qfc::CR_AESENA, foo);
        let bar = qfc_csr.rf(utra::qfc::CR_AESENA_CR_AESENA);
        qfc_csr.rmwf(utra::qfc::CR_AESENA_CR_AESENA, bar);
        let mut baz = qfc_csr.zf(utra::qfc::CR_AESENA_CR_AESENA, bar);
        baz |= qfc_csr.ms(utra::qfc::CR_AESENA_CR_AESENA, 1);
        qfc_csr.wfo(utra::qfc::CR_AESENA_CR_AESENA, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_mbox_apb_csr() {
        use super::*;
        let mut mbox_apb_csr = CSR::new(HW_MBOX_APB_BASE as *mut u32);

        let foo = mbox_apb_csr.r(utra::mbox_apb::SFR_WDATA);
        mbox_apb_csr.wo(utra::mbox_apb::SFR_WDATA, foo);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_WDATA_SFR_WDATA);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_WDATA_SFR_WDATA, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_WDATA_SFR_WDATA, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_WDATA_SFR_WDATA, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_WDATA_SFR_WDATA, baz);

        let foo = mbox_apb_csr.r(utra::mbox_apb::SFR_RDATA);
        mbox_apb_csr.wo(utra::mbox_apb::SFR_RDATA, foo);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_RDATA_SFR_RDATA);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_RDATA_SFR_RDATA, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_RDATA_SFR_RDATA, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_RDATA_SFR_RDATA, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_RDATA_SFR_RDATA, baz);

        let foo = mbox_apb_csr.r(utra::mbox_apb::SFR_STATUS);
        mbox_apb_csr.wo(utra::mbox_apb::SFR_STATUS, foo);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_STATUS_RX_AVAIL);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_STATUS_RX_AVAIL, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_STATUS_RX_AVAIL, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_STATUS_RX_AVAIL, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_STATUS_RX_AVAIL, baz);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_STATUS_TX_FREE);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_STATUS_TX_FREE, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_STATUS_TX_FREE, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_STATUS_TX_FREE, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_STATUS_TX_FREE, baz);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_STATUS_ABORT_IN_PROGRESS);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_STATUS_ABORT_IN_PROGRESS, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_STATUS_ABORT_IN_PROGRESS, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_STATUS_ABORT_IN_PROGRESS, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_STATUS_ABORT_IN_PROGRESS, baz);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_STATUS_ABORT_ACK);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_STATUS_ABORT_ACK, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_STATUS_ABORT_ACK, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_STATUS_ABORT_ACK, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_STATUS_ABORT_ACK, baz);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_STATUS_TX_ERR);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_STATUS_TX_ERR, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_STATUS_TX_ERR, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_STATUS_TX_ERR, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_STATUS_TX_ERR, baz);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_STATUS_RX_ERR);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_STATUS_RX_ERR, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_STATUS_RX_ERR, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_STATUS_RX_ERR, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_STATUS_RX_ERR, baz);

        let foo = mbox_apb_csr.r(utra::mbox_apb::SFR_ABORT);
        mbox_apb_csr.wo(utra::mbox_apb::SFR_ABORT, foo);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_ABORT_SFR_ABORT);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_ABORT_SFR_ABORT, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_ABORT_SFR_ABORT, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_ABORT_SFR_ABORT, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_ABORT_SFR_ABORT, baz);

        let foo = mbox_apb_csr.r(utra::mbox_apb::SFR_DONE);
        mbox_apb_csr.wo(utra::mbox_apb::SFR_DONE, foo);
        let bar = mbox_apb_csr.rf(utra::mbox_apb::SFR_DONE_SFR_DONE);
        mbox_apb_csr.rmwf(utra::mbox_apb::SFR_DONE_SFR_DONE, bar);
        let mut baz = mbox_apb_csr.zf(utra::mbox_apb::SFR_DONE_SFR_DONE, bar);
        baz |= mbox_apb_csr.ms(utra::mbox_apb::SFR_DONE_SFR_DONE, 1);
        mbox_apb_csr.wfo(utra::mbox_apb::SFR_DONE_SFR_DONE, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_rrc_csr() {
        use super::*;
        let mut rrc_csr = CSR::new(HW_RRC_BASE as *mut u32);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCCR);
        rrc_csr.wo(utra::rrc::SFR_RRCCR, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCCR_SFR_RRCCR);
        rrc_csr.rmwf(utra::rrc::SFR_RRCCR_SFR_RRCCR, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCCR_SFR_RRCCR, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCCR_SFR_RRCCR, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCCR_SFR_RRCCR, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCFD);
        rrc_csr.wo(utra::rrc::SFR_RRCFD, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCFD_SFR_RRCFD);
        rrc_csr.rmwf(utra::rrc::SFR_RRCFD_SFR_RRCFD, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCFD_SFR_RRCFD, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCFD_SFR_RRCFD, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCFD_SFR_RRCFD, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR);
        rrc_csr.wo(utra::rrc::SFR_RRCSR, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_SFR_RRCSR);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_SFR_RRCSR, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_SFR_RRCSR, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_SFR_RRCSR, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_SFR_RRCSR, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCFR);
        rrc_csr.wo(utra::rrc::SFR_RRCFR, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCFR_SFR_RRCFR);
        rrc_csr.rmwf(utra::rrc::SFR_RRCFR_SFR_RRCFR, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCFR_SFR_RRCFR, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCFR_SFR_RRCFR, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCFR_SFR_RRCFR, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR_SET0);
        rrc_csr.wo(utra::rrc::SFR_RRCSR_SET0, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_SET0_TRC_SET_FAILURE);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_SET0_TRC_SET_FAILURE, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_SET0_TRC_SET_FAILURE, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_SET0_TRC_SET_FAILURE, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_SET0_TRC_SET_FAILURE, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR_SET1);
        rrc_csr.wo(utra::rrc::SFR_RRCSR_SET1, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_SET1_TRC_SET_FAILURE);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_SET1_TRC_SET_FAILURE, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_SET1_TRC_SET_FAILURE, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_SET1_TRC_SET_FAILURE, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_SET1_TRC_SET_FAILURE, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR_RST0);
        rrc_csr.wo(utra::rrc::SFR_RRCSR_RST0, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_RST0_TRC_RESET_FAILURE);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_RST0_TRC_RESET_FAILURE, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_RST0_TRC_RESET_FAILURE, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_RST0_TRC_RESET_FAILURE, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_RST0_TRC_RESET_FAILURE, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR_RST1);
        rrc_csr.wo(utra::rrc::SFR_RRCSR_RST1, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_RST1_TRC_RESET_FAILURE);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_RST1_TRC_RESET_FAILURE, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_RST1_TRC_RESET_FAILURE, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_RST1_TRC_RESET_FAILURE, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_RST1_TRC_RESET_FAILURE, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR_RD0);
        rrc_csr.wo(utra::rrc::SFR_RRCSR_RD0, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_RD0_TRC_FOURTH_READ_FAILURE);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_RD0_TRC_FOURTH_READ_FAILURE, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_RD0_TRC_FOURTH_READ_FAILURE, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_RD0_TRC_FOURTH_READ_FAILURE, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_RD0_TRC_FOURTH_READ_FAILURE, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCSR_RD1);
        rrc_csr.wo(utra::rrc::SFR_RRCSR_RD1, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCSR_RD1_TRC_FOURTH_READ_FAILURE);
        rrc_csr.rmwf(utra::rrc::SFR_RRCSR_RD1_TRC_FOURTH_READ_FAILURE, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCSR_RD1_TRC_FOURTH_READ_FAILURE, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCSR_RD1_TRC_FOURTH_READ_FAILURE, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCSR_RD1_TRC_FOURTH_READ_FAILURE, baz);

        let foo = rrc_csr.r(utra::rrc::SFR_RRCAR);
        rrc_csr.wo(utra::rrc::SFR_RRCAR, foo);
        let bar = rrc_csr.rf(utra::rrc::SFR_RRCAR_SFR_RRCAR);
        rrc_csr.rmwf(utra::rrc::SFR_RRCAR_SFR_RRCAR, bar);
        let mut baz = rrc_csr.zf(utra::rrc::SFR_RRCAR_SFR_RRCAR, bar);
        baz |= rrc_csr.ms(utra::rrc::SFR_RRCAR_SFR_RRCAR, 1);
        rrc_csr.wfo(utra::rrc::SFR_RRCAR_SFR_RRCAR, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_gluechain_csr() {
        use super::*;
        let mut gluechain_csr = CSR::new(HW_GLUECHAIN_BASE as *mut u32);

        let foo = gluechain_csr.r(utra::gluechain::SFR_GCMASK_CR_GCMASK0);
        gluechain_csr.wo(utra::gluechain::SFR_GCMASK_CR_GCMASK0, foo);
        let bar = gluechain_csr.rf(utra::gluechain::SFR_GCMASK_CR_GCMASK0_CR_GCMASK0);
        gluechain_csr.rmwf(utra::gluechain::SFR_GCMASK_CR_GCMASK0_CR_GCMASK0, bar);
        let mut baz = gluechain_csr.zf(utra::gluechain::SFR_GCMASK_CR_GCMASK0_CR_GCMASK0, bar);
        baz |= gluechain_csr.ms(utra::gluechain::SFR_GCMASK_CR_GCMASK0_CR_GCMASK0, 1);
        gluechain_csr.wfo(utra::gluechain::SFR_GCMASK_CR_GCMASK0_CR_GCMASK0, baz);

        let foo = gluechain_csr.r(utra::gluechain::SFR_GCSR_GLUEREG0);
        gluechain_csr.wo(utra::gluechain::SFR_GCSR_GLUEREG0, foo);
        let bar = gluechain_csr.rf(utra::gluechain::SFR_GCSR_GLUEREG0_GLUEREG0);
        gluechain_csr.rmwf(utra::gluechain::SFR_GCSR_GLUEREG0_GLUEREG0, bar);
        let mut baz = gluechain_csr.zf(utra::gluechain::SFR_GCSR_GLUEREG0_GLUEREG0, bar);
        baz |= gluechain_csr.ms(utra::gluechain::SFR_GCSR_GLUEREG0_GLUEREG0, 1);
        gluechain_csr.wfo(utra::gluechain::SFR_GCSR_GLUEREG0_GLUEREG0, baz);

        let foo = gluechain_csr.r(utra::gluechain::SFR_GCRST_GLUERST0);
        gluechain_csr.wo(utra::gluechain::SFR_GCRST_GLUERST0, foo);
        let bar = gluechain_csr.rf(utra::gluechain::SFR_GCRST_GLUERST0_GLUERST0);
        gluechain_csr.rmwf(utra::gluechain::SFR_GCRST_GLUERST0_GLUERST0, bar);
        let mut baz = gluechain_csr.zf(utra::gluechain::SFR_GCRST_GLUERST0_GLUERST0, bar);
        baz |= gluechain_csr.ms(utra::gluechain::SFR_GCRST_GLUERST0_GLUERST0, 1);
        gluechain_csr.wfo(utra::gluechain::SFR_GCRST_GLUERST0_GLUERST0, baz);

        let foo = gluechain_csr.r(utra::gluechain::SFR_GCTEST_GLUETEST0);
        gluechain_csr.wo(utra::gluechain::SFR_GCTEST_GLUETEST0, foo);
        let bar = gluechain_csr.rf(utra::gluechain::SFR_GCTEST_GLUETEST0_GLUETEST0);
        gluechain_csr.rmwf(utra::gluechain::SFR_GCTEST_GLUETEST0_GLUETEST0, bar);
        let mut baz = gluechain_csr.zf(utra::gluechain::SFR_GCTEST_GLUETEST0_GLUETEST0, bar);
        baz |= gluechain_csr.ms(utra::gluechain::SFR_GCTEST_GLUETEST0_GLUETEST0, 1);
        gluechain_csr.wfo(utra::gluechain::SFR_GCTEST_GLUETEST0_GLUETEST0, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_mesh_csr() {
        use super::*;
        let mut mesh_csr = CSR::new(HW_MESH_BASE as *mut u32);

        let foo = mesh_csr.r(utra::mesh::SFR_MLDRV_CR_MLDRV0);
        mesh_csr.wo(utra::mesh::SFR_MLDRV_CR_MLDRV0, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLDRV_CR_MLDRV0_CR_MLDRV0);
        mesh_csr.rmwf(utra::mesh::SFR_MLDRV_CR_MLDRV0_CR_MLDRV0, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLDRV_CR_MLDRV0_CR_MLDRV0, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLDRV_CR_MLDRV0_CR_MLDRV0, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLDRV_CR_MLDRV0_CR_MLDRV0, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLDRV_CR_MLDRV1);
        mesh_csr.wo(utra::mesh::SFR_MLDRV_CR_MLDRV1, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLDRV_CR_MLDRV1_CR_MLDRV1);
        mesh_csr.rmwf(utra::mesh::SFR_MLDRV_CR_MLDRV1_CR_MLDRV1, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLDRV_CR_MLDRV1_CR_MLDRV1, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLDRV_CR_MLDRV1_CR_MLDRV1, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLDRV_CR_MLDRV1_CR_MLDRV1, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLIE_CR_MLIE0);
        mesh_csr.wo(utra::mesh::SFR_MLIE_CR_MLIE0, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLIE_CR_MLIE0_CR_MLIE0);
        mesh_csr.rmwf(utra::mesh::SFR_MLIE_CR_MLIE0_CR_MLIE0, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLIE_CR_MLIE0_CR_MLIE0, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLIE_CR_MLIE0_CR_MLIE0, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLIE_CR_MLIE0_CR_MLIE0, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLIE_CR_MLIE1);
        mesh_csr.wo(utra::mesh::SFR_MLIE_CR_MLIE1, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLIE_CR_MLIE1_CR_MLIE1);
        mesh_csr.rmwf(utra::mesh::SFR_MLIE_CR_MLIE1_CR_MLIE1, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLIE_CR_MLIE1_CR_MLIE1, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLIE_CR_MLIE1_CR_MLIE1, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLIE_CR_MLIE1_CR_MLIE1, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR0);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR0, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR0_SR_MLSR0);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR0_SR_MLSR0, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR0_SR_MLSR0, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR0_SR_MLSR0, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR0_SR_MLSR0, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR1);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR1, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR1_SR_MLSR1);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR1_SR_MLSR1, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR1_SR_MLSR1, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR1_SR_MLSR1, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR1_SR_MLSR1, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR2);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR2, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR2_SR_MLSR2);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR2_SR_MLSR2, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR2_SR_MLSR2, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR2_SR_MLSR2, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR2_SR_MLSR2, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR3);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR3, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR3_SR_MLSR3);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR3_SR_MLSR3, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR3_SR_MLSR3, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR3_SR_MLSR3, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR3_SR_MLSR3, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR4);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR4, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR4_SR_MLSR4);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR4_SR_MLSR4, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR4_SR_MLSR4, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR4_SR_MLSR4, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR4_SR_MLSR4, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR5);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR5, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR5_SR_MLSR5);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR5_SR_MLSR5, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR5_SR_MLSR5, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR5_SR_MLSR5, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR5_SR_MLSR5, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR6);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR6, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR6_SR_MLSR6);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR6_SR_MLSR6, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR6_SR_MLSR6, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR6_SR_MLSR6, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR6_SR_MLSR6, baz);

        let foo = mesh_csr.r(utra::mesh::SFR_MLSR_SR_MLSR7);
        mesh_csr.wo(utra::mesh::SFR_MLSR_SR_MLSR7, foo);
        let bar = mesh_csr.rf(utra::mesh::SFR_MLSR_SR_MLSR7_SR_MLSR7);
        mesh_csr.rmwf(utra::mesh::SFR_MLSR_SR_MLSR7_SR_MLSR7, bar);
        let mut baz = mesh_csr.zf(utra::mesh::SFR_MLSR_SR_MLSR7_SR_MLSR7, bar);
        baz |= mesh_csr.ms(utra::mesh::SFR_MLSR_SR_MLSR7_SR_MLSR7, 1);
        mesh_csr.wfo(utra::mesh::SFR_MLSR_SR_MLSR7_SR_MLSR7, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_sensorc_csr() {
        use super::*;
        let mut sensorc_csr = CSR::new(HW_SENSORC_BASE as *mut u32);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDMASK0);
        sensorc_csr.wo(utra::sensorc::SFR_VDMASK0, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDMASK0_CR_VDMASK0);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDMASK0_CR_VDMASK0, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDMASK0_CR_VDMASK0, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDMASK0_CR_VDMASK0, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDMASK0_CR_VDMASK0, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDMASK1);
        sensorc_csr.wo(utra::sensorc::SFR_VDMASK1, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDMASK1_CR_VDMASK1);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDMASK1_CR_VDMASK1, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDMASK1_CR_VDMASK1, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDMASK1_CR_VDMASK1, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDMASK1_CR_VDMASK1, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDSR);
        sensorc_csr.wo(utra::sensorc::SFR_VDSR, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDSR_VDFLAG);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDSR_VDFLAG, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDSR_VDFLAG, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDSR_VDFLAG, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDSR_VDFLAG, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDFR);
        sensorc_csr.wo(utra::sensorc::SFR_VDFR, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDFR_VDFLAG);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDFR_VDFLAG, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDFR_VDFLAG, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDFR_VDFLAG, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDFR_VDFLAG, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_LDMASK);
        sensorc_csr.wo(utra::sensorc::SFR_LDMASK, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_LDMASK_CR_LDMASK);
        sensorc_csr.rmwf(utra::sensorc::SFR_LDMASK_CR_LDMASK, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_LDMASK_CR_LDMASK, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_LDMASK_CR_LDMASK, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_LDMASK_CR_LDMASK, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_LDSR);
        sensorc_csr.wo(utra::sensorc::SFR_LDSR, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_LDSR_SR_LDSR);
        sensorc_csr.rmwf(utra::sensorc::SFR_LDSR_SR_LDSR, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_LDSR_SR_LDSR, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_LDSR_SR_LDSR, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_LDSR_SR_LDSR, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_LDCFG);
        sensorc_csr.wo(utra::sensorc::SFR_LDCFG, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_LDCFG_SFR_LDCFG);
        sensorc_csr.rmwf(utra::sensorc::SFR_LDCFG_SFR_LDCFG, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_LDCFG_SFR_LDCFG, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_LDCFG_SFR_LDCFG, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_LDCFG_SFR_LDCFG, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG0);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG0, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG0_CR_VDCFG0);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG0_CR_VDCFG0, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG0_CR_VDCFG0, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG0_CR_VDCFG0, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG0_CR_VDCFG0, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG1);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG1, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG1_CR_VDCFG1);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG1_CR_VDCFG1, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG1_CR_VDCFG1, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG1_CR_VDCFG1, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG1_CR_VDCFG1, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG2);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG2, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG2_CR_VDCFG2);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG2_CR_VDCFG2, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG2_CR_VDCFG2, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG2_CR_VDCFG2, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG2_CR_VDCFG2, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG3);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG3, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG3_CR_VDCFG3);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG3_CR_VDCFG3, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG3_CR_VDCFG3, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG3_CR_VDCFG3, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG3_CR_VDCFG3, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG4);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG4, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG4_CR_VDCFG4);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG4_CR_VDCFG4, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG4_CR_VDCFG4, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG4_CR_VDCFG4, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG4_CR_VDCFG4, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG5);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG5, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG5_CR_VDCFG5);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG5_CR_VDCFG5, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG5_CR_VDCFG5, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG5_CR_VDCFG5, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG5_CR_VDCFG5, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG6);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG6, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG6_CR_VDCFG6);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG6_CR_VDCFG6, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG6_CR_VDCFG6, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG6_CR_VDCFG6, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG6_CR_VDCFG6, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDCFG_CR_VDCFG7);
        sensorc_csr.wo(utra::sensorc::SFR_VDCFG_CR_VDCFG7, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDCFG_CR_VDCFG7_CR_VDCFG7);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDCFG_CR_VDCFG7_CR_VDCFG7, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDCFG_CR_VDCFG7_CR_VDCFG7, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDCFG_CR_VDCFG7_CR_VDCFG7, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDCFG_CR_VDCFG7_CR_VDCFG7, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDIP_ENA);
        sensorc_csr.wo(utra::sensorc::SFR_VDIP_ENA, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDIP_ENA_VDENA);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDIP_ENA_VDENA, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDIP_ENA_VDENA, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDIP_ENA_VDENA, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDIP_ENA_VDENA, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_VDIP_TEST);
        sensorc_csr.wo(utra::sensorc::SFR_VDIP_TEST, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_VDIP_TEST_VDTST);
        sensorc_csr.rmwf(utra::sensorc::SFR_VDIP_TEST_VDTST, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_VDIP_TEST_VDTST, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_VDIP_TEST_VDTST, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_VDIP_TEST_VDTST, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_LDIP_TEST);
        sensorc_csr.wo(utra::sensorc::SFR_LDIP_TEST, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_LDIP_TEST_LDTST);
        sensorc_csr.rmwf(utra::sensorc::SFR_LDIP_TEST_LDTST, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_LDIP_TEST_LDTST, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_LDIP_TEST_LDTST, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_LDIP_TEST_LDTST, baz);

        let foo = sensorc_csr.r(utra::sensorc::SFR_LDIP_FD);
        sensorc_csr.wo(utra::sensorc::SFR_LDIP_FD, foo);
        let bar = sensorc_csr.rf(utra::sensorc::SFR_LDIP_FD_SFR_LDIP_FD);
        sensorc_csr.rmwf(utra::sensorc::SFR_LDIP_FD_SFR_LDIP_FD, bar);
        let mut baz = sensorc_csr.zf(utra::sensorc::SFR_LDIP_FD_SFR_LDIP_FD, bar);
        baz |= sensorc_csr.ms(utra::sensorc::SFR_LDIP_FD_SFR_LDIP_FD, 1);
        sensorc_csr.wfo(utra::sensorc::SFR_LDIP_FD_SFR_LDIP_FD, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_aobureg_csr() {
        use super::*;
        let mut aobureg_csr = CSR::new(HW_AOBUREG_BASE as *mut u32);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS0);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS0, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS0_CR_BUREGS0);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS0_CR_BUREGS0, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS0_CR_BUREGS0, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS0_CR_BUREGS0, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS0_CR_BUREGS0, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS1);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS1, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS1_CR_BUREGS1);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS1_CR_BUREGS1, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS1_CR_BUREGS1, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS1_CR_BUREGS1, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS1_CR_BUREGS1, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS2);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS2, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS2_CR_BUREGS2);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS2_CR_BUREGS2, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS2_CR_BUREGS2, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS2_CR_BUREGS2, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS2_CR_BUREGS2, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS3);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS3, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS3_CR_BUREGS3);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS3_CR_BUREGS3, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS3_CR_BUREGS3, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS3_CR_BUREGS3, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS3_CR_BUREGS3, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS4);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS4, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS4_CR_BUREGS4);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS4_CR_BUREGS4, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS4_CR_BUREGS4, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS4_CR_BUREGS4, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS4_CR_BUREGS4, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS5);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS5, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS5_CR_BUREGS5);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS5_CR_BUREGS5, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS5_CR_BUREGS5, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS5_CR_BUREGS5, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS5_CR_BUREGS5, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS6);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS6, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS6_CR_BUREGS6);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS6_CR_BUREGS6, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS6_CR_BUREGS6, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS6_CR_BUREGS6, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS6_CR_BUREGS6, baz);

        let foo = aobureg_csr.r(utra::aobureg::SFR_BUREG_CR_BUREGS7);
        aobureg_csr.wo(utra::aobureg::SFR_BUREG_CR_BUREGS7, foo);
        let bar = aobureg_csr.rf(utra::aobureg::SFR_BUREG_CR_BUREGS7_CR_BUREGS7);
        aobureg_csr.rmwf(utra::aobureg::SFR_BUREG_CR_BUREGS7_CR_BUREGS7, bar);
        let mut baz = aobureg_csr.zf(utra::aobureg::SFR_BUREG_CR_BUREGS7_CR_BUREGS7, bar);
        baz |= aobureg_csr.ms(utra::aobureg::SFR_BUREG_CR_BUREGS7_CR_BUREGS7, 1);
        aobureg_csr.wfo(utra::aobureg::SFR_BUREG_CR_BUREGS7_CR_BUREGS7, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_ao_sysctrl_csr() {
        use super::*;
        let mut ao_sysctrl_csr = CSR::new(HW_AO_SYSCTRL_BASE as *mut u32);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::CR_CR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::CR_CR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_CR_CLK32KSELREG);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_CR_CLK32KSELREG, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_CR_CLK32KSELREG, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_CR_CLK32KSELREG, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_CR_CLK32KSELREG, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_CR_PDISOEN);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_CR_PDISOEN, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_CR_PDISOEN, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_CR_PDISOEN, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_CR_PDISOEN, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_CR_PCLKICG);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_CR_PCLKICG, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_CR_PCLKICG, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_CR_PCLKICG, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_CR_PCLKICG, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::CR_CLK1HZFD);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::CR_CLK1HZFD, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_CLK1HZFD_CR_CLK1HZFD);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_CLK1HZFD_CR_CLK1HZFD, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_CLK1HZFD_CR_CLK1HZFD, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_CLK1HZFD_CR_CLK1HZFD, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_CLK1HZFD_CR_CLK1HZFD, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::CR_WKUPMASK);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::CR_WKUPMASK, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_WKUPMASK_INTEN);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_WKUPMASK_INTEN, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_WKUPMASK_INTEN, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_WKUPMASK_INTEN, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_WKUPMASK_INTEN, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_WKUPMASK_WKUPMASK);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_WKUPMASK_WKUPMASK, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_WKUPMASK_WKUPMASK, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_WKUPMASK_WKUPMASK, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_WKUPMASK_WKUPMASK, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::CR_RSTCRMASK);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::CR_RSTCRMASK, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::CR_RSTCRMASK_CR_RSTCRMASK);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::CR_RSTCRMASK_CR_RSTCRMASK, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::CR_RSTCRMASK_CR_RSTCRMASK, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::CR_RSTCRMASK_CR_RSTCRMASK, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::CR_RSTCRMASK_CR_RSTCRMASK, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUCSR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUCSR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUCSR_PMUCRREG);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUCSR_PMUCRREG, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUCSR_PMUCRREG, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUCSR_PMUCRREG, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUCSR_PMUCRREG, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUCRLP);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUCRLP, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUCRLP_SFRPMUCRLP);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUCRLP_SFRPMUCRLP, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUCRLP_SFRPMUCRLP, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUCRLP_SFRPMUCRLP, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUCRLP_SFRPMUCRLP, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUCRPD);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUCRPD, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUCRPD_SFRPMUCRPD);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUCRPD_SFRPMUCRPD, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUCRPD_SFRPMUCRPD, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUCRPD_SFRPMUCRPD, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUCRPD_SFRPMUCRPD, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUDFTSR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUDFTSR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUDFTSR_PMUDFTREG);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUDFTSR_PMUDFTREG, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUDFTSR_PMUDFTREG, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUDFTSR_PMUDFTREG, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUDFTSR_PMUDFTREG, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUTRM0CSR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUTRM0CSR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUTRM0CSR_PMUTRMREG);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUTRM0CSR_PMUTRMREG, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUTRM0CSR_PMUTRMREG, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUTRM0CSR_PMUTRMREG, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUTRM0CSR_PMUTRMREG, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUTRM1CSR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUTRM1CSR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUTRM1CSR_PMUTRMREG);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUTRM1CSR_PMUTRMREG, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUTRM1CSR_PMUTRMREG, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUTRM1CSR_PMUTRMREG, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUTRM1CSR_PMUTRMREG, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUTRMLP0);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUTRMLP0, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUTRMLP0_SFRPMUTRMLP);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUTRMLP0_SFRPMUTRMLP, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUTRMLP0_SFRPMUTRMLP, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUTRMLP0_SFRPMUTRMLP, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUTRMLP0_SFRPMUTRMLP, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUTRMLP1);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUTRMLP1, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUTRMLP1_SFRPMUTRMLP);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUTRMLP1_SFRPMUTRMLP, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUTRMLP1_SFRPMUTRMLP, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUTRMLP1_SFRPMUTRMLP, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUTRMLP1_SFRPMUTRMLP, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_OSCCR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_OSCCR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCR);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCR, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCR, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_OSCCR_SFROSCCR, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_OSCCR_SFROSCCR, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRM);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRM, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRM, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRM, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRM, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRLP);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRLP, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRLP, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRLP, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRLP, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRMLP);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRMLP, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRMLP, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRMLP, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_OSCCR_SFROSCTRMLP, baz);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRPD);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRPD, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRPD, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRPD, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_OSCCR_SFROSCCRPD, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUSR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUSR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUSR_SFR_PMUSR);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUSR_SFR_PMUSR, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUSR_SFR_PMUSR, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUSR_SFR_PMUSR, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUSR_SFR_PMUSR, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUFR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUFR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUFR_SFR_PMUFR);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUFR_SFR_PMUFR, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUFR_SFR_PMUFR, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUFR_SFR_PMUFR, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUFR_SFR_PMUFR, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_AOFR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_AOFR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_AOFR_SFR_AOFR);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_AOFR_SFR_AOFR, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_AOFR_SFR_AOFR, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_AOFR_SFR_AOFR, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_AOFR_SFR_AOFR, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_PMUPDAR);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_PMUPDAR, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_PMUPDAR_SFR_PMUPDAR);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_PMUPDAR_SFR_PMUPDAR, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_PMUPDAR_SFR_PMUPDAR, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_PMUPDAR_SFR_PMUPDAR, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_PMUPDAR_SFR_PMUPDAR, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::AR_AOPERI_CLRINT);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::AR_AOPERI_CLRINT, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::AR_AOPERI_CLRINT_AR_AOPERI_CLRINT);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::AR_AOPERI_CLRINT_AR_AOPERI_CLRINT, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::AR_AOPERI_CLRINT_AR_AOPERI_CLRINT, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::AR_AOPERI_CLRINT_AR_AOPERI_CLRINT, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::AR_AOPERI_CLRINT_AR_AOPERI_CLRINT, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_IOX);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_IOX, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_IOX_SFR_IOX);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_IOX_SFR_IOX, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_IOX_SFR_IOX, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_IOX_SFR_IOX, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_IOX_SFR_IOX, baz);

        let foo = ao_sysctrl_csr.r(utra::ao_sysctrl::SFR_AOPADPU);
        ao_sysctrl_csr.wo(utra::ao_sysctrl::SFR_AOPADPU, foo);
        let bar = ao_sysctrl_csr.rf(utra::ao_sysctrl::SFR_AOPADPU_SFR_AOPADPU);
        ao_sysctrl_csr.rmwf(utra::ao_sysctrl::SFR_AOPADPU_SFR_AOPADPU, bar);
        let mut baz = ao_sysctrl_csr.zf(utra::ao_sysctrl::SFR_AOPADPU_SFR_AOPADPU, bar);
        baz |= ao_sysctrl_csr.ms(utra::ao_sysctrl::SFR_AOPADPU_SFR_AOPADPU, 1);
        ao_sysctrl_csr.wfo(utra::ao_sysctrl::SFR_AOPADPU_SFR_AOPADPU, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_dkpc_csr() {
        use super::*;
        let mut dkpc_csr = CSR::new(HW_DKPC_BASE as *mut u32);

        let foo = dkpc_csr.r(utra::dkpc::SFR_CFG0);
        dkpc_csr.wo(utra::dkpc::SFR_CFG0, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG0_KPOPO0);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG0_KPOPO0, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG0_KPOPO0, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG0_KPOPO0, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG0_KPOPO0, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG0_KPOPO1);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG0_KPOPO1, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG0_KPOPO1, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG0_KPOPO1, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG0_KPOPO1, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG0_KPOOE0);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG0_KPOOE0, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG0_KPOOE0, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG0_KPOOE0, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG0_KPOOE0, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG0_KPOOE1);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG0_KPOOE1, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG0_KPOOE1, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG0_KPOOE1, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG0_KPOOE1, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG0_DKPCEN);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG0_DKPCEN, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG0_DKPCEN, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG0_DKPCEN, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG0_DKPCEN, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG0_AUTOSLEEPEN);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG0_AUTOSLEEPEN, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG0_AUTOSLEEPEN, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG0_AUTOSLEEPEN, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG0_AUTOSLEEPEN, baz);

        let foo = dkpc_csr.r(utra::dkpc::SFR_CFG1);
        dkpc_csr.wo(utra::dkpc::SFR_CFG1, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG1_CFG_STEP);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG1_CFG_STEP, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG1_CFG_STEP, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG1_CFG_STEP, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG1_CFG_STEP, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG1_CFG_FILTER);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG1_CFG_FILTER, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG1_CFG_FILTER, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG1_CFG_FILTER, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG1_CFG_FILTER, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG1_CFG_CNT1MS);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG1_CFG_CNT1MS, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG1_CFG_CNT1MS, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG1_CFG_CNT1MS, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG1_CFG_CNT1MS, baz);

        let foo = dkpc_csr.r(utra::dkpc::SFR_CFG2);
        dkpc_csr.wo(utra::dkpc::SFR_CFG2, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG2_CFG_CNT);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG2_CFG_CNT, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG2_CFG_CNT, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG2_CFG_CNT, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG2_CFG_CNT, baz);

        let foo = dkpc_csr.r(utra::dkpc::SFR_CFG3);
        dkpc_csr.wo(utra::dkpc::SFR_CFG3, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG3_KPNODERISEEN);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG3_KPNODERISEEN, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG3_KPNODERISEEN, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG3_KPNODERISEEN, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG3_KPNODERISEEN, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG3_KPNODEFALLEN);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG3_KPNODEFALLEN, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG3_KPNODEFALLEN, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG3_KPNODEFALLEN, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG3_KPNODEFALLEN, baz);

        let foo = dkpc_csr.r(utra::dkpc::SFR_SR0);
        dkpc_csr.wo(utra::dkpc::SFR_SR0, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_SR0_KPNODEREG);
        dkpc_csr.rmwf(utra::dkpc::SFR_SR0_KPNODEREG, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_SR0_KPNODEREG, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_SR0_KPNODEREG, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_SR0_KPNODEREG, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_SR0_KPI0_PI);
        dkpc_csr.rmwf(utra::dkpc::SFR_SR0_KPI0_PI, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_SR0_KPI0_PI, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_SR0_KPI0_PI, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_SR0_KPI0_PI, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_SR0_KPI1_PI);
        dkpc_csr.rmwf(utra::dkpc::SFR_SR0_KPI1_PI, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_SR0_KPI1_PI, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_SR0_KPI1_PI, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_SR0_KPI1_PI, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_SR0_KPI2_PI);
        dkpc_csr.rmwf(utra::dkpc::SFR_SR0_KPI2_PI, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_SR0_KPI2_PI, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_SR0_KPI2_PI, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_SR0_KPI2_PI, baz);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_SR0_KPI3_PI);
        dkpc_csr.rmwf(utra::dkpc::SFR_SR0_KPI3_PI, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_SR0_KPI3_PI, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_SR0_KPI3_PI, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_SR0_KPI3_PI, baz);

        let foo = dkpc_csr.r(utra::dkpc::SFR_SR1);
        dkpc_csr.wo(utra::dkpc::SFR_SR1, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_SR1_SFR_SR1);
        dkpc_csr.rmwf(utra::dkpc::SFR_SR1_SFR_SR1, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_SR1_SFR_SR1, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_SR1_SFR_SR1, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_SR1_SFR_SR1, baz);

        let foo = dkpc_csr.r(utra::dkpc::SFR_CFG4);
        dkpc_csr.wo(utra::dkpc::SFR_CFG4, foo);
        let bar = dkpc_csr.rf(utra::dkpc::SFR_CFG4_SFR_CFG4);
        dkpc_csr.rmwf(utra::dkpc::SFR_CFG4_SFR_CFG4, bar);
        let mut baz = dkpc_csr.zf(utra::dkpc::SFR_CFG4_SFR_CFG4, bar);
        baz |= dkpc_csr.ms(utra::dkpc::SFR_CFG4_SFR_CFG4, 1);
        dkpc_csr.wfo(utra::dkpc::SFR_CFG4_SFR_CFG4, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_ctrl_csr() {
        use super::*;
        let mut udma_ctrl_csr = CSR::new(HW_UDMA_CTRL_BASE as *mut u32);

        let foo = udma_ctrl_csr.r(utra::udma_ctrl::REG_CG);
        udma_ctrl_csr.wo(utra::udma_ctrl::REG_CG, foo);
        let bar = udma_ctrl_csr.rf(utra::udma_ctrl::REG_CG_R_CG);
        udma_ctrl_csr.rmwf(utra::udma_ctrl::REG_CG_R_CG, bar);
        let mut baz = udma_ctrl_csr.zf(utra::udma_ctrl::REG_CG_R_CG, bar);
        baz |= udma_ctrl_csr.ms(utra::udma_ctrl::REG_CG_R_CG, 1);
        udma_ctrl_csr.wfo(utra::udma_ctrl::REG_CG_R_CG, baz);

        let foo = udma_ctrl_csr.r(utra::udma_ctrl::REG_CFG_EVT);
        udma_ctrl_csr.wo(utra::udma_ctrl::REG_CFG_EVT, foo);
        let bar = udma_ctrl_csr.rf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_0);
        udma_ctrl_csr.rmwf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_0, bar);
        let mut baz = udma_ctrl_csr.zf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_0, bar);
        baz |= udma_ctrl_csr.ms(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_0, 1);
        udma_ctrl_csr.wfo(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_0, baz);
        let bar = udma_ctrl_csr.rf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_1);
        udma_ctrl_csr.rmwf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_1, bar);
        let mut baz = udma_ctrl_csr.zf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_1, bar);
        baz |= udma_ctrl_csr.ms(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_1, 1);
        udma_ctrl_csr.wfo(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_1, baz);
        let bar = udma_ctrl_csr.rf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_2);
        udma_ctrl_csr.rmwf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_2, bar);
        let mut baz = udma_ctrl_csr.zf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_2, bar);
        baz |= udma_ctrl_csr.ms(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_2, 1);
        udma_ctrl_csr.wfo(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_2, baz);
        let bar = udma_ctrl_csr.rf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_3);
        udma_ctrl_csr.rmwf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_3, bar);
        let mut baz = udma_ctrl_csr.zf(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_3, bar);
        baz |= udma_ctrl_csr.ms(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_3, 1);
        udma_ctrl_csr.wfo(utra::udma_ctrl::REG_CFG_EVT_R_CMP_EVT_3, baz);

        let foo = udma_ctrl_csr.r(utra::udma_ctrl::REG_RST);
        udma_ctrl_csr.wo(utra::udma_ctrl::REG_RST, foo);
        let bar = udma_ctrl_csr.rf(utra::udma_ctrl::REG_RST_R_RST);
        udma_ctrl_csr.rmwf(utra::udma_ctrl::REG_RST_R_RST, bar);
        let mut baz = udma_ctrl_csr.zf(utra::udma_ctrl::REG_RST_R_RST, bar);
        baz |= udma_ctrl_csr.ms(utra::udma_ctrl::REG_RST_R_RST, 1);
        udma_ctrl_csr.wfo(utra::udma_ctrl::REG_RST_R_RST, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_uart_0_csr() {
        use super::*;
        let mut udma_uart_0_csr = CSR::new(HW_UDMA_UART_0_BASE as *mut u32);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_RX_SADDR);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_RX_SADDR, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_RX_SADDR_R_RX_STARTADDR);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_RX_SIZE);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_RX_SIZE, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_RX_SIZE_R_RX_SIZE);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_RX_CFG);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_RX_CFG, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_RX_CFG_R_RX_EN);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_RX_CFG_R_RX_EN, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_RX_CFG_R_RX_CLR);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_RX_CFG_R_RX_CLR, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_TX_SADDR);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_TX_SADDR, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_TX_SADDR_R_TX_STARTADDR);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_TX_SIZE);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_TX_SIZE, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_TX_SIZE_R_TX_SIZE);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_TX_CFG);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_TX_CFG, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_TX_CFG_R_TX_EN);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_TX_CFG_R_TX_EN, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_TX_CFG_R_TX_CLR);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_TX_CFG_R_TX_CLR, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_STATUS);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_STATUS, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_STATUS_STATUS_I);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_STATUS_STATUS_I, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_STATUS_STATUS_I, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_STATUS_STATUS_I, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_UART_SETUP);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_UART_SETUP, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_PARITY_EN);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_PARITY_EN, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_PARITY_EN, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_BITS);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_BITS, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_BITS, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_BITS, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_BITS, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_STOP_BITS);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_STOP_BITS, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_STOP_BITS, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_POLLING_EN);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_POLLING_EN, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_POLLING_EN, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_TX);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_TX, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_TX, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_TX, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_TX, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_RX);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_RX, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_RX, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_RX, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_EN_RX, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_UART_SETUP_R_UART_DIV);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_UART_SETUP_R_UART_DIV, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_UART_SETUP_R_UART_DIV, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_UART_SETUP_R_UART_DIV, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_UART_SETUP_R_UART_DIV, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_ERROR);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_ERROR, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_ERROR_R_ERR_OVERFLOW);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_ERROR_R_ERR_OVERFLOW, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_ERROR_R_ERR_OVERFLOW, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_ERROR_R_ERR_OVERFLOW, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_ERROR_R_ERR_OVERFLOW, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_ERROR_R_ERR_PARITY);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_ERROR_R_ERR_PARITY, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_ERROR_R_ERR_PARITY, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_ERROR_R_ERR_PARITY, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_ERROR_R_ERR_PARITY, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_IRQ_EN);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_IRQ_EN, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_IRQ_EN_R_UART_RX_IRQ_EN);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_IRQ_EN_R_UART_RX_IRQ_EN, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_IRQ_EN_R_UART_RX_IRQ_EN, baz);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_IRQ_EN_R_UART_ERR_IRQ_EN);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_IRQ_EN_R_UART_ERR_IRQ_EN, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_IRQ_EN_R_UART_ERR_IRQ_EN, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_VALID);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_VALID, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_VALID_R_UART_RX_DATA_VALID);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_VALID_R_UART_RX_DATA_VALID, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_VALID_R_UART_RX_DATA_VALID, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_VALID_R_UART_RX_DATA_VALID, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_VALID_R_UART_RX_DATA_VALID, baz);

        let foo = udma_uart_0_csr.r(utra::udma_uart_0::REG_DATA);
        udma_uart_0_csr.wo(utra::udma_uart_0::REG_DATA, foo);
        let bar = udma_uart_0_csr.rf(utra::udma_uart_0::REG_DATA_R_UART_RX_DATA);
        udma_uart_0_csr.rmwf(utra::udma_uart_0::REG_DATA_R_UART_RX_DATA, bar);
        let mut baz = udma_uart_0_csr.zf(utra::udma_uart_0::REG_DATA_R_UART_RX_DATA, bar);
        baz |= udma_uart_0_csr.ms(utra::udma_uart_0::REG_DATA_R_UART_RX_DATA, 1);
        udma_uart_0_csr.wfo(utra::udma_uart_0::REG_DATA_R_UART_RX_DATA, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_uart_1_csr() {
        use super::*;
        let mut udma_uart_1_csr = CSR::new(HW_UDMA_UART_1_BASE as *mut u32);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_RX_SADDR);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_RX_SADDR, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_RX_SADDR_R_RX_STARTADDR);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_RX_SIZE);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_RX_SIZE, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_RX_SIZE_R_RX_SIZE);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_RX_CFG);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_RX_CFG, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_RX_CFG_R_RX_EN);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_RX_CFG_R_RX_EN, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_RX_CFG_R_RX_CLR);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_RX_CFG_R_RX_CLR, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_TX_SADDR);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_TX_SADDR, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_TX_SADDR_R_TX_STARTADDR);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_TX_SIZE);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_TX_SIZE, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_TX_SIZE_R_TX_SIZE);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_TX_CFG);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_TX_CFG, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_TX_CFG_R_TX_EN);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_TX_CFG_R_TX_EN, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_TX_CFG_R_TX_CLR);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_TX_CFG_R_TX_CLR, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_STATUS);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_STATUS, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_STATUS_STATUS_I);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_STATUS_STATUS_I, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_STATUS_STATUS_I, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_STATUS_STATUS_I, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_UART_SETUP);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_UART_SETUP, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_PARITY_EN);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_PARITY_EN, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_PARITY_EN, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_BITS);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_BITS, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_BITS, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_BITS, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_BITS, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_STOP_BITS);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_STOP_BITS, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_STOP_BITS, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_POLLING_EN);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_POLLING_EN, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_POLLING_EN, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_TX);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_TX, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_TX, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_TX, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_TX, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_RX);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_RX, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_RX, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_RX, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_EN_RX, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_UART_SETUP_R_UART_DIV);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_UART_SETUP_R_UART_DIV, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_UART_SETUP_R_UART_DIV, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_UART_SETUP_R_UART_DIV, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_UART_SETUP_R_UART_DIV, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_ERROR);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_ERROR, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_ERROR_R_ERR_OVERFLOW);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_ERROR_R_ERR_OVERFLOW, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_ERROR_R_ERR_OVERFLOW, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_ERROR_R_ERR_OVERFLOW, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_ERROR_R_ERR_OVERFLOW, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_ERROR_R_ERR_PARITY);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_ERROR_R_ERR_PARITY, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_ERROR_R_ERR_PARITY, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_ERROR_R_ERR_PARITY, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_ERROR_R_ERR_PARITY, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_IRQ_EN);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_IRQ_EN, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_IRQ_EN_R_UART_RX_IRQ_EN);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_IRQ_EN_R_UART_RX_IRQ_EN, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_IRQ_EN_R_UART_RX_IRQ_EN, baz);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_IRQ_EN_R_UART_ERR_IRQ_EN);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_IRQ_EN_R_UART_ERR_IRQ_EN, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_IRQ_EN_R_UART_ERR_IRQ_EN, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_VALID);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_VALID, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_VALID_R_UART_RX_DATA_VALID);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_VALID_R_UART_RX_DATA_VALID, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_VALID_R_UART_RX_DATA_VALID, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_VALID_R_UART_RX_DATA_VALID, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_VALID_R_UART_RX_DATA_VALID, baz);

        let foo = udma_uart_1_csr.r(utra::udma_uart_1::REG_DATA);
        udma_uart_1_csr.wo(utra::udma_uart_1::REG_DATA, foo);
        let bar = udma_uart_1_csr.rf(utra::udma_uart_1::REG_DATA_R_UART_RX_DATA);
        udma_uart_1_csr.rmwf(utra::udma_uart_1::REG_DATA_R_UART_RX_DATA, bar);
        let mut baz = udma_uart_1_csr.zf(utra::udma_uart_1::REG_DATA_R_UART_RX_DATA, bar);
        baz |= udma_uart_1_csr.ms(utra::udma_uart_1::REG_DATA_R_UART_RX_DATA, 1);
        udma_uart_1_csr.wfo(utra::udma_uart_1::REG_DATA_R_UART_RX_DATA, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_uart_2_csr() {
        use super::*;
        let mut udma_uart_2_csr = CSR::new(HW_UDMA_UART_2_BASE as *mut u32);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_RX_SADDR);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_RX_SADDR, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_RX_SADDR_R_RX_STARTADDR);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_RX_SIZE);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_RX_SIZE, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_RX_SIZE_R_RX_SIZE);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_RX_CFG);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_RX_CFG, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_RX_CFG_R_RX_EN);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_RX_CFG_R_RX_EN, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_RX_CFG_R_RX_CLR);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_RX_CFG_R_RX_CLR, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_TX_SADDR);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_TX_SADDR, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_TX_SADDR_R_TX_STARTADDR);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_TX_SIZE);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_TX_SIZE, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_TX_SIZE_R_TX_SIZE);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_TX_CFG);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_TX_CFG, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_TX_CFG_R_TX_EN);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_TX_CFG_R_TX_EN, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_TX_CFG_R_TX_CLR);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_TX_CFG_R_TX_CLR, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_STATUS);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_STATUS, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_STATUS_STATUS_I);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_STATUS_STATUS_I, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_STATUS_STATUS_I, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_STATUS_STATUS_I, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_UART_SETUP);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_UART_SETUP, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_PARITY_EN);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_PARITY_EN, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_PARITY_EN, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_BITS);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_BITS, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_BITS, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_BITS, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_BITS, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_STOP_BITS);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_STOP_BITS, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_STOP_BITS, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_POLLING_EN);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_POLLING_EN, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_POLLING_EN, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_TX);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_TX, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_TX, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_TX, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_TX, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_RX);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_RX, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_RX, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_RX, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_EN_RX, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_UART_SETUP_R_UART_DIV);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_UART_SETUP_R_UART_DIV, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_UART_SETUP_R_UART_DIV, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_UART_SETUP_R_UART_DIV, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_UART_SETUP_R_UART_DIV, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_ERROR);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_ERROR, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_ERROR_R_ERR_OVERFLOW);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_ERROR_R_ERR_OVERFLOW, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_ERROR_R_ERR_OVERFLOW, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_ERROR_R_ERR_OVERFLOW, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_ERROR_R_ERR_OVERFLOW, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_ERROR_R_ERR_PARITY);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_ERROR_R_ERR_PARITY, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_ERROR_R_ERR_PARITY, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_ERROR_R_ERR_PARITY, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_ERROR_R_ERR_PARITY, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_IRQ_EN);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_IRQ_EN, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_IRQ_EN_R_UART_RX_IRQ_EN);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_IRQ_EN_R_UART_RX_IRQ_EN, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_IRQ_EN_R_UART_RX_IRQ_EN, baz);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_IRQ_EN_R_UART_ERR_IRQ_EN);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_IRQ_EN_R_UART_ERR_IRQ_EN, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_IRQ_EN_R_UART_ERR_IRQ_EN, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_VALID);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_VALID, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_VALID_R_UART_RX_DATA_VALID);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_VALID_R_UART_RX_DATA_VALID, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_VALID_R_UART_RX_DATA_VALID, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_VALID_R_UART_RX_DATA_VALID, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_VALID_R_UART_RX_DATA_VALID, baz);

        let foo = udma_uart_2_csr.r(utra::udma_uart_2::REG_DATA);
        udma_uart_2_csr.wo(utra::udma_uart_2::REG_DATA, foo);
        let bar = udma_uart_2_csr.rf(utra::udma_uart_2::REG_DATA_R_UART_RX_DATA);
        udma_uart_2_csr.rmwf(utra::udma_uart_2::REG_DATA_R_UART_RX_DATA, bar);
        let mut baz = udma_uart_2_csr.zf(utra::udma_uart_2::REG_DATA_R_UART_RX_DATA, bar);
        baz |= udma_uart_2_csr.ms(utra::udma_uart_2::REG_DATA_R_UART_RX_DATA, 1);
        udma_uart_2_csr.wfo(utra::udma_uart_2::REG_DATA_R_UART_RX_DATA, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_uart_3_csr() {
        use super::*;
        let mut udma_uart_3_csr = CSR::new(HW_UDMA_UART_3_BASE as *mut u32);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_RX_SADDR);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_RX_SADDR, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_RX_SADDR_R_RX_STARTADDR);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_RX_SIZE);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_RX_SIZE, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_RX_SIZE_R_RX_SIZE);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_RX_CFG);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_RX_CFG, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_RX_CFG_R_RX_EN);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_RX_CFG_R_RX_EN, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_RX_CFG_R_RX_CLR);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_RX_CFG_R_RX_CLR, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_TX_SADDR);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_TX_SADDR, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_TX_SADDR_R_TX_STARTADDR);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_TX_SIZE);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_TX_SIZE, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_TX_SIZE_R_TX_SIZE);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_TX_CFG);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_TX_CFG, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_TX_CFG_R_TX_EN);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_TX_CFG_R_TX_EN, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_TX_CFG_R_TX_CLR);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_TX_CFG_R_TX_CLR, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_STATUS);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_STATUS, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_STATUS_STATUS_I);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_STATUS_STATUS_I, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_STATUS_STATUS_I, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_STATUS_STATUS_I, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_UART_SETUP);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_UART_SETUP, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_PARITY_EN);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_PARITY_EN, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_PARITY_EN, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_PARITY_EN, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_BITS);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_BITS, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_BITS, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_BITS, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_BITS, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_STOP_BITS);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_STOP_BITS, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_STOP_BITS, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_STOP_BITS, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_POLLING_EN);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_POLLING_EN, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_POLLING_EN, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_POLLING_EN, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_RX_CLEAN_FIFO, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_TX);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_TX, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_TX, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_TX, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_TX, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_RX);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_RX, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_RX, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_RX, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_EN_RX, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_UART_SETUP_R_UART_DIV);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_UART_SETUP_R_UART_DIV, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_UART_SETUP_R_UART_DIV, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_UART_SETUP_R_UART_DIV, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_UART_SETUP_R_UART_DIV, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_ERROR);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_ERROR, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_ERROR_R_ERR_OVERFLOW);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_ERROR_R_ERR_OVERFLOW, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_ERROR_R_ERR_OVERFLOW, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_ERROR_R_ERR_OVERFLOW, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_ERROR_R_ERR_OVERFLOW, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_ERROR_R_ERR_PARITY);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_ERROR_R_ERR_PARITY, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_ERROR_R_ERR_PARITY, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_ERROR_R_ERR_PARITY, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_ERROR_R_ERR_PARITY, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_IRQ_EN);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_IRQ_EN, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_IRQ_EN_R_UART_RX_IRQ_EN);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_IRQ_EN_R_UART_RX_IRQ_EN, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_IRQ_EN_R_UART_RX_IRQ_EN, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_IRQ_EN_R_UART_RX_IRQ_EN, baz);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_IRQ_EN_R_UART_ERR_IRQ_EN);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_IRQ_EN_R_UART_ERR_IRQ_EN, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_IRQ_EN_R_UART_ERR_IRQ_EN, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_IRQ_EN_R_UART_ERR_IRQ_EN, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_VALID);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_VALID, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_VALID_R_UART_RX_DATA_VALID);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_VALID_R_UART_RX_DATA_VALID, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_VALID_R_UART_RX_DATA_VALID, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_VALID_R_UART_RX_DATA_VALID, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_VALID_R_UART_RX_DATA_VALID, baz);

        let foo = udma_uart_3_csr.r(utra::udma_uart_3::REG_DATA);
        udma_uart_3_csr.wo(utra::udma_uart_3::REG_DATA, foo);
        let bar = udma_uart_3_csr.rf(utra::udma_uart_3::REG_DATA_R_UART_RX_DATA);
        udma_uart_3_csr.rmwf(utra::udma_uart_3::REG_DATA_R_UART_RX_DATA, bar);
        let mut baz = udma_uart_3_csr.zf(utra::udma_uart_3::REG_DATA_R_UART_RX_DATA, bar);
        baz |= udma_uart_3_csr.ms(utra::udma_uart_3::REG_DATA_R_UART_RX_DATA, 1);
        udma_uart_3_csr.wfo(utra::udma_uart_3::REG_DATA_R_UART_RX_DATA, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_spim_0_csr() {
        use super::*;
        let mut udma_spim_0_csr = CSR::new(HW_UDMA_SPIM_0_BASE as *mut u32);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_RX_SADDR);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_RX_SADDR, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_SADDR_R_RX_STARTADDR);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_RX_SIZE);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_RX_SIZE, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_SIZE_R_RX_SIZE);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_RX_CFG);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_RX_CFG, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_CFG_R_RX_DATASIZE);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_CFG_R_RX_DATASIZE, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_CFG_R_RX_DATASIZE, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_CFG_R_RX_DATASIZE, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_CFG_R_RX_DATASIZE, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_CFG_R_RX_EN);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_CFG_R_RX_EN, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_CFG_R_RX_CLR);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_CFG_R_RX_CLR, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_CFG_R_RX_CLR, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_RX_CFG_R_RX_BACKPRESSURE);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_RX_CFG_R_RX_BACKPRESSURE, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_RX_CFG_R_RX_BACKPRESSURE, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_TX_SADDR);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_TX_SADDR, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_TX_SADDR_R_TX_STARTADDR);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_TX_SIZE);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_TX_SIZE, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_TX_SIZE_R_TX_SIZE);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_TX_CFG);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_TX_CFG, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_TX_CFG_R_TX_DATASIZE);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_TX_CFG_R_TX_DATASIZE, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_TX_CFG_R_TX_DATASIZE, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_TX_CFG_R_TX_DATASIZE, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_TX_CFG_R_TX_DATASIZE, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_TX_CFG_R_TX_EN);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_TX_CFG_R_TX_EN, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_TX_CFG_R_TX_CLR);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_TX_CFG_R_TX_CLR, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_CMD_SADDR);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_CMD_SADDR, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_CMD_SIZE);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_CMD_SIZE, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_CMD_SIZE_R_CMD_SIZE);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_CMD_CFG);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_CMD_CFG, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_EN);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_CMD_CFG_R_CMD_EN, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_CMD_CFG_R_CMD_EN, baz);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CLR);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CLR, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CLR, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CLR, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_CMD_CFG_R_CMD_CLR, baz);

        let foo = udma_spim_0_csr.r(utra::udma_spim_0::REG_STATUS);
        udma_spim_0_csr.wo(utra::udma_spim_0::REG_STATUS, foo);
        let bar = udma_spim_0_csr.rf(utra::udma_spim_0::REG_STATUS_STATUS_I);
        udma_spim_0_csr.rmwf(utra::udma_spim_0::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_spim_0_csr.zf(utra::udma_spim_0::REG_STATUS_STATUS_I, bar);
        baz |= udma_spim_0_csr.ms(utra::udma_spim_0::REG_STATUS_STATUS_I, 1);
        udma_spim_0_csr.wfo(utra::udma_spim_0::REG_STATUS_STATUS_I, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_spim_1_csr() {
        use super::*;
        let mut udma_spim_1_csr = CSR::new(HW_UDMA_SPIM_1_BASE as *mut u32);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_RX_SADDR);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_RX_SADDR, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_SADDR_R_RX_STARTADDR);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_RX_SIZE);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_RX_SIZE, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_SIZE_R_RX_SIZE);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_RX_CFG);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_RX_CFG, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_CFG_R_RX_DATASIZE);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_CFG_R_RX_DATASIZE, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_CFG_R_RX_DATASIZE, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_CFG_R_RX_DATASIZE, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_CFG_R_RX_DATASIZE, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_CFG_R_RX_EN);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_CFG_R_RX_EN, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_CFG_R_RX_CLR);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_CFG_R_RX_CLR, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_CFG_R_RX_CLR, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_RX_CFG_R_RX_BACKPRESSURE);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_RX_CFG_R_RX_BACKPRESSURE, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_RX_CFG_R_RX_BACKPRESSURE, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_TX_SADDR);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_TX_SADDR, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_TX_SADDR_R_TX_STARTADDR);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_TX_SIZE);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_TX_SIZE, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_TX_SIZE_R_TX_SIZE);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_TX_CFG);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_TX_CFG, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_TX_CFG_R_TX_DATASIZE);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_TX_CFG_R_TX_DATASIZE, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_TX_CFG_R_TX_DATASIZE, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_TX_CFG_R_TX_DATASIZE, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_TX_CFG_R_TX_DATASIZE, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_TX_CFG_R_TX_EN);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_TX_CFG_R_TX_EN, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_TX_CFG_R_TX_CLR);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_TX_CFG_R_TX_CLR, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_CMD_SADDR);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_CMD_SADDR, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_CMD_SIZE);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_CMD_SIZE, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_CMD_SIZE_R_CMD_SIZE);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_CMD_CFG);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_CMD_CFG, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_EN);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_CMD_CFG_R_CMD_EN, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_CMD_CFG_R_CMD_EN, baz);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CLR);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CLR, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CLR, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CLR, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_CMD_CFG_R_CMD_CLR, baz);

        let foo = udma_spim_1_csr.r(utra::udma_spim_1::REG_STATUS);
        udma_spim_1_csr.wo(utra::udma_spim_1::REG_STATUS, foo);
        let bar = udma_spim_1_csr.rf(utra::udma_spim_1::REG_STATUS_STATUS_I);
        udma_spim_1_csr.rmwf(utra::udma_spim_1::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_spim_1_csr.zf(utra::udma_spim_1::REG_STATUS_STATUS_I, bar);
        baz |= udma_spim_1_csr.ms(utra::udma_spim_1::REG_STATUS_STATUS_I, 1);
        udma_spim_1_csr.wfo(utra::udma_spim_1::REG_STATUS_STATUS_I, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_spim_2_csr() {
        use super::*;
        let mut udma_spim_2_csr = CSR::new(HW_UDMA_SPIM_2_BASE as *mut u32);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_RX_SADDR);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_RX_SADDR, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_SADDR_R_RX_STARTADDR);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_RX_SIZE);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_RX_SIZE, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_SIZE_R_RX_SIZE);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_RX_CFG);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_RX_CFG, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_CFG_R_RX_DATASIZE);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_CFG_R_RX_DATASIZE, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_CFG_R_RX_DATASIZE, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_CFG_R_RX_DATASIZE, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_CFG_R_RX_DATASIZE, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_CFG_R_RX_EN);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_CFG_R_RX_EN, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_CFG_R_RX_CLR);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_CFG_R_RX_CLR, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_CFG_R_RX_CLR, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_RX_CFG_R_RX_BACKPRESSURE);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_RX_CFG_R_RX_BACKPRESSURE, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_RX_CFG_R_RX_BACKPRESSURE, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_TX_SADDR);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_TX_SADDR, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_TX_SADDR_R_TX_STARTADDR);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_TX_SIZE);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_TX_SIZE, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_TX_SIZE_R_TX_SIZE);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_TX_CFG);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_TX_CFG, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_TX_CFG_R_TX_DATASIZE);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_TX_CFG_R_TX_DATASIZE, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_TX_CFG_R_TX_DATASIZE, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_TX_CFG_R_TX_DATASIZE, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_TX_CFG_R_TX_DATASIZE, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_TX_CFG_R_TX_EN);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_TX_CFG_R_TX_EN, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_TX_CFG_R_TX_CLR);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_TX_CFG_R_TX_CLR, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_CMD_SADDR);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_CMD_SADDR, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_CMD_SIZE);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_CMD_SIZE, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_CMD_SIZE_R_CMD_SIZE);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_CMD_CFG);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_CMD_CFG, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_EN);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_CMD_CFG_R_CMD_EN, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_CMD_CFG_R_CMD_EN, baz);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CLR);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CLR, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CLR, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CLR, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_CMD_CFG_R_CMD_CLR, baz);

        let foo = udma_spim_2_csr.r(utra::udma_spim_2::REG_STATUS);
        udma_spim_2_csr.wo(utra::udma_spim_2::REG_STATUS, foo);
        let bar = udma_spim_2_csr.rf(utra::udma_spim_2::REG_STATUS_STATUS_I);
        udma_spim_2_csr.rmwf(utra::udma_spim_2::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_spim_2_csr.zf(utra::udma_spim_2::REG_STATUS_STATUS_I, bar);
        baz |= udma_spim_2_csr.ms(utra::udma_spim_2::REG_STATUS_STATUS_I, 1);
        udma_spim_2_csr.wfo(utra::udma_spim_2::REG_STATUS_STATUS_I, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_spim_3_csr() {
        use super::*;
        let mut udma_spim_3_csr = CSR::new(HW_UDMA_SPIM_3_BASE as *mut u32);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_RX_SADDR);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_RX_SADDR, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_SADDR_R_RX_STARTADDR);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_RX_SIZE);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_RX_SIZE, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_SIZE_R_RX_SIZE);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_RX_CFG);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_RX_CFG, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_CFG_R_RX_DATASIZE);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_CFG_R_RX_DATASIZE, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_CFG_R_RX_DATASIZE, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_CFG_R_RX_DATASIZE, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_CFG_R_RX_DATASIZE, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_CFG_R_RX_EN);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_CFG_R_RX_EN, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_CFG_R_RX_CLR);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_CFG_R_RX_CLR, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_CFG_R_RX_CLR, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_RX_CFG_R_RX_BACKPRESSURE);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_RX_CFG_R_RX_BACKPRESSURE, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_RX_CFG_R_RX_BACKPRESSURE, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_RX_CFG_R_RX_BACKPRESSURE, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_TX_SADDR);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_TX_SADDR, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_TX_SADDR_R_TX_STARTADDR);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_TX_SIZE);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_TX_SIZE, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_TX_SIZE_R_TX_SIZE);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_TX_CFG);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_TX_CFG, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_TX_CFG_R_TX_DATASIZE);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_TX_CFG_R_TX_DATASIZE, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_TX_CFG_R_TX_DATASIZE, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_TX_CFG_R_TX_DATASIZE, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_TX_CFG_R_TX_DATASIZE, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_TX_CFG_R_TX_EN);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_TX_CFG_R_TX_EN, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_TX_CFG_R_TX_CLR);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_TX_CFG_R_TX_CLR, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_CMD_SADDR);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_CMD_SADDR, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_CMD_SIZE);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_CMD_SIZE, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_CMD_SIZE_R_CMD_SIZE);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_CMD_CFG);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_CMD_CFG, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_EN);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_CMD_CFG_R_CMD_EN, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_CMD_CFG_R_CMD_EN, baz);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CLR);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CLR, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CLR, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CLR, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_CMD_CFG_R_CMD_CLR, baz);

        let foo = udma_spim_3_csr.r(utra::udma_spim_3::REG_STATUS);
        udma_spim_3_csr.wo(utra::udma_spim_3::REG_STATUS, foo);
        let bar = udma_spim_3_csr.rf(utra::udma_spim_3::REG_STATUS_STATUS_I);
        udma_spim_3_csr.rmwf(utra::udma_spim_3::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_spim_3_csr.zf(utra::udma_spim_3::REG_STATUS_STATUS_I, bar);
        baz |= udma_spim_3_csr.ms(utra::udma_spim_3::REG_STATUS_STATUS_I, 1);
        udma_spim_3_csr.wfo(utra::udma_spim_3::REG_STATUS_STATUS_I, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_i2c_0_csr() {
        use super::*;
        let mut udma_i2c_0_csr = CSR::new(HW_UDMA_I2C_0_BASE as *mut u32);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_RX_SADDR);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_RX_SADDR, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_RX_SADDR_R_RX_STARTADDR);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_RX_SIZE);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_RX_SIZE, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_RX_SIZE_R_RX_SIZE);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_RX_CFG);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_RX_CFG, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_RX_CFG_R_RX_EN);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_RX_CFG_R_RX_EN, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_RX_CFG_R_RX_EN, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_TX_SADDR);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_TX_SADDR, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_TX_SADDR_R_TX_STARTADDR);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_TX_SIZE);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_TX_SIZE, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_TX_SIZE_R_TX_SIZE);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_TX_CFG);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_TX_CFG, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_TX_CFG_R_TX_EN);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_TX_CFG_R_TX_EN, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_TX_CFG_R_TX_EN, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_CMD_SADDR);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_CMD_SADDR, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_CMD_SIZE);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_CMD_SIZE, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_CMD_SIZE_R_CMD_SIZE);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_CMD_CFG);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_CMD_CFG, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_EN);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_EN, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_CMD_CFG_R_CMD_EN, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_STATUS);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_STATUS, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_STATUS_R_BUSY);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_STATUS_R_BUSY, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_STATUS_R_BUSY, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_STATUS_R_BUSY, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_STATUS_R_BUSY, baz);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_STATUS_R_AL);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_STATUS_R_AL, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_STATUS_R_AL, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_STATUS_R_AL, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_STATUS_R_AL, baz);

        let foo = udma_i2c_0_csr.r(utra::udma_i2c_0::REG_ACK);
        udma_i2c_0_csr.wo(utra::udma_i2c_0::REG_ACK, foo);
        let bar = udma_i2c_0_csr.rf(utra::udma_i2c_0::REG_ACK_R_NACK);
        udma_i2c_0_csr.rmwf(utra::udma_i2c_0::REG_ACK_R_NACK, bar);
        let mut baz = udma_i2c_0_csr.zf(utra::udma_i2c_0::REG_ACK_R_NACK, bar);
        baz |= udma_i2c_0_csr.ms(utra::udma_i2c_0::REG_ACK_R_NACK, 1);
        udma_i2c_0_csr.wfo(utra::udma_i2c_0::REG_ACK_R_NACK, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_i2c_1_csr() {
        use super::*;
        let mut udma_i2c_1_csr = CSR::new(HW_UDMA_I2C_1_BASE as *mut u32);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_RX_SADDR);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_RX_SADDR, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_RX_SADDR_R_RX_STARTADDR);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_RX_SIZE);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_RX_SIZE, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_RX_SIZE_R_RX_SIZE);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_RX_CFG);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_RX_CFG, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_RX_CFG_R_RX_EN);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_RX_CFG_R_RX_EN, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_RX_CFG_R_RX_EN, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_TX_SADDR);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_TX_SADDR, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_TX_SADDR_R_TX_STARTADDR);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_TX_SIZE);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_TX_SIZE, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_TX_SIZE_R_TX_SIZE);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_TX_CFG);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_TX_CFG, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_TX_CFG_R_TX_EN);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_TX_CFG_R_TX_EN, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_TX_CFG_R_TX_EN, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_CMD_SADDR);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_CMD_SADDR, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_CMD_SIZE);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_CMD_SIZE, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_CMD_SIZE_R_CMD_SIZE);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_CMD_CFG);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_CMD_CFG, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_EN);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_EN, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_CMD_CFG_R_CMD_EN, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_STATUS);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_STATUS, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_STATUS_R_BUSY);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_STATUS_R_BUSY, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_STATUS_R_BUSY, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_STATUS_R_BUSY, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_STATUS_R_BUSY, baz);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_STATUS_R_AL);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_STATUS_R_AL, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_STATUS_R_AL, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_STATUS_R_AL, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_STATUS_R_AL, baz);

        let foo = udma_i2c_1_csr.r(utra::udma_i2c_1::REG_ACK);
        udma_i2c_1_csr.wo(utra::udma_i2c_1::REG_ACK, foo);
        let bar = udma_i2c_1_csr.rf(utra::udma_i2c_1::REG_ACK_R_NACK);
        udma_i2c_1_csr.rmwf(utra::udma_i2c_1::REG_ACK_R_NACK, bar);
        let mut baz = udma_i2c_1_csr.zf(utra::udma_i2c_1::REG_ACK_R_NACK, bar);
        baz |= udma_i2c_1_csr.ms(utra::udma_i2c_1::REG_ACK_R_NACK, 1);
        udma_i2c_1_csr.wfo(utra::udma_i2c_1::REG_ACK_R_NACK, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_i2c_2_csr() {
        use super::*;
        let mut udma_i2c_2_csr = CSR::new(HW_UDMA_I2C_2_BASE as *mut u32);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_RX_SADDR);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_RX_SADDR, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_RX_SADDR_R_RX_STARTADDR);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_RX_SIZE);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_RX_SIZE, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_RX_SIZE_R_RX_SIZE);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_RX_CFG);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_RX_CFG, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_RX_CFG_R_RX_EN);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_RX_CFG_R_RX_EN, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_RX_CFG_R_RX_EN, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_TX_SADDR);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_TX_SADDR, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_TX_SADDR_R_TX_STARTADDR);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_TX_SIZE);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_TX_SIZE, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_TX_SIZE_R_TX_SIZE);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_TX_CFG);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_TX_CFG, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_TX_CFG_R_TX_EN);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_TX_CFG_R_TX_EN, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_TX_CFG_R_TX_EN, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_CMD_SADDR);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_CMD_SADDR, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_CMD_SIZE);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_CMD_SIZE, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_CMD_SIZE_R_CMD_SIZE);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_CMD_CFG);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_CMD_CFG, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_EN);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_EN, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_CMD_CFG_R_CMD_EN, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_STATUS);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_STATUS, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_STATUS_R_BUSY);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_STATUS_R_BUSY, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_STATUS_R_BUSY, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_STATUS_R_BUSY, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_STATUS_R_BUSY, baz);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_STATUS_R_AL);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_STATUS_R_AL, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_STATUS_R_AL, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_STATUS_R_AL, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_STATUS_R_AL, baz);

        let foo = udma_i2c_2_csr.r(utra::udma_i2c_2::REG_ACK);
        udma_i2c_2_csr.wo(utra::udma_i2c_2::REG_ACK, foo);
        let bar = udma_i2c_2_csr.rf(utra::udma_i2c_2::REG_ACK_R_NACK);
        udma_i2c_2_csr.rmwf(utra::udma_i2c_2::REG_ACK_R_NACK, bar);
        let mut baz = udma_i2c_2_csr.zf(utra::udma_i2c_2::REG_ACK_R_NACK, bar);
        baz |= udma_i2c_2_csr.ms(utra::udma_i2c_2::REG_ACK_R_NACK, 1);
        udma_i2c_2_csr.wfo(utra::udma_i2c_2::REG_ACK_R_NACK, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_i2c_3_csr() {
        use super::*;
        let mut udma_i2c_3_csr = CSR::new(HW_UDMA_I2C_3_BASE as *mut u32);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_RX_SADDR);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_RX_SADDR, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_RX_SADDR_R_RX_STARTADDR);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_RX_SIZE);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_RX_SIZE, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_RX_SIZE_R_RX_SIZE);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_RX_CFG);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_RX_CFG, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_RX_CFG_R_RX_EN);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_RX_CFG_R_RX_EN, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_RX_CFG_R_RX_EN, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_TX_SADDR);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_TX_SADDR, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_TX_SADDR_R_TX_STARTADDR);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_TX_SIZE);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_TX_SIZE, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_TX_SIZE_R_TX_SIZE);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_TX_CFG);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_TX_CFG, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_TX_CFG_R_TX_EN);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_TX_CFG_R_TX_EN, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_TX_CFG_R_TX_EN, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_CMD_SADDR);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_CMD_SADDR, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_CMD_SADDR_R_CMD_STARTADDR);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_CMD_SADDR_R_CMD_STARTADDR, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_CMD_SADDR_R_CMD_STARTADDR, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_CMD_SADDR_R_CMD_STARTADDR, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_CMD_SIZE);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_CMD_SIZE, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_CMD_SIZE_R_CMD_SIZE);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_CMD_SIZE_R_CMD_SIZE, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_CMD_SIZE_R_CMD_SIZE, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_CMD_SIZE_R_CMD_SIZE, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_CMD_SIZE_R_CMD_SIZE, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_CMD_CFG);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_CMD_CFG, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_CONTINUOUS);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_CONTINUOUS, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_CONTINUOUS, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_CONTINUOUS, baz);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_EN);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_EN, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_EN, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_EN, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_CMD_CFG_R_CMD_EN, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_STATUS);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_STATUS, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_STATUS_R_BUSY);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_STATUS_R_BUSY, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_STATUS_R_BUSY, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_STATUS_R_BUSY, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_STATUS_R_BUSY, baz);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_STATUS_R_AL);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_STATUS_R_AL, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_STATUS_R_AL, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_STATUS_R_AL, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_STATUS_R_AL, baz);

        let foo = udma_i2c_3_csr.r(utra::udma_i2c_3::REG_ACK);
        udma_i2c_3_csr.wo(utra::udma_i2c_3::REG_ACK, foo);
        let bar = udma_i2c_3_csr.rf(utra::udma_i2c_3::REG_ACK_R_NACK);
        udma_i2c_3_csr.rmwf(utra::udma_i2c_3::REG_ACK_R_NACK, bar);
        let mut baz = udma_i2c_3_csr.zf(utra::udma_i2c_3::REG_ACK_R_NACK, bar);
        baz |= udma_i2c_3_csr.ms(utra::udma_i2c_3::REG_ACK_R_NACK, 1);
        udma_i2c_3_csr.wfo(utra::udma_i2c_3::REG_ACK_R_NACK, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_sdio_csr() {
        use super::*;
        let mut udma_sdio_csr = CSR::new(HW_UDMA_SDIO_BASE as *mut u32);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RX_SADDR);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RX_SADDR, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RX_SADDR_R_RX_STARTADDR);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RX_SIZE);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RX_SIZE, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RX_SIZE_R_RX_SIZE);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RX_CFG);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RX_CFG, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RX_CFG_R_RX_EN);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RX_CFG_R_RX_EN, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RX_CFG_R_RX_CLR);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RX_CFG_R_RX_CLR, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_TX_SADDR);
        udma_sdio_csr.wo(utra::udma_sdio::REG_TX_SADDR, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_TX_SADDR_R_TX_STARTADDR);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_TX_SIZE);
        udma_sdio_csr.wo(utra::udma_sdio::REG_TX_SIZE, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_TX_SIZE_R_TX_SIZE);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_TX_CFG);
        udma_sdio_csr.wo(utra::udma_sdio::REG_TX_CFG, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_TX_CFG_R_TX_EN);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_TX_CFG_R_TX_EN, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_TX_CFG_R_TX_CLR);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_TX_CFG_R_TX_CLR, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_CMD_OP);
        udma_sdio_csr.wo(utra::udma_sdio::REG_CMD_OP, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_CMD_OP_R_CMD_RSP_TYPE);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_CMD_OP_R_CMD_RSP_TYPE, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_CMD_OP_R_CMD_RSP_TYPE, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_CMD_OP_R_CMD_RSP_TYPE, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_CMD_OP_R_CMD_RSP_TYPE, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_CMD_OP_R_CMD_OP);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_CMD_OP_R_CMD_OP, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_CMD_OP_R_CMD_OP, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_CMD_OP_R_CMD_OP, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_CMD_OP_R_CMD_OP, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_CMD_OP_R_CMD_STOPOPT);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_CMD_OP_R_CMD_STOPOPT, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_CMD_OP_R_CMD_STOPOPT, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_CMD_OP_R_CMD_STOPOPT, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_CMD_OP_R_CMD_STOPOPT, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_DATA_SETUP);
        udma_sdio_csr.wo(utra::udma_sdio::REG_DATA_SETUP, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_EN);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_EN, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_EN, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_DATA_SETUP_R_DATA_EN, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_DATA_SETUP_R_DATA_EN, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_RWN);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_RWN, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_RWN, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_DATA_SETUP_R_DATA_RWN, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_DATA_SETUP_R_DATA_RWN, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_QUAD);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_QUAD, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_QUAD, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_DATA_SETUP_R_DATA_QUAD, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_DATA_SETUP_R_DATA_QUAD, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_NUM);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_NUM, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_NUM, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_NUM, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_NUM, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_SIZE);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_SIZE, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_SIZE, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_SIZE, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_DATA_SETUP_R_DATA_BLOCK_SIZE, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_START);
        udma_sdio_csr.wo(utra::udma_sdio::REG_START, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_START_R_SDIO_START);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_START_R_SDIO_START, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_START_R_SDIO_START, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_START_R_SDIO_START, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_START_R_SDIO_START, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RSP0);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RSP0, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RSP0_CFG_RSP_DATA_I_31_0);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RSP0_CFG_RSP_DATA_I_31_0, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RSP0_CFG_RSP_DATA_I_31_0, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RSP0_CFG_RSP_DATA_I_31_0, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RSP0_CFG_RSP_DATA_I_31_0, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RSP1);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RSP1, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RSP1_CFG_RSP_DATA_I_63_32);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RSP1_CFG_RSP_DATA_I_63_32, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RSP1_CFG_RSP_DATA_I_63_32, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RSP1_CFG_RSP_DATA_I_63_32, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RSP1_CFG_RSP_DATA_I_63_32, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RSP2);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RSP2, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RSP2_CFG_RSP_DATA_I_95_64);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RSP2_CFG_RSP_DATA_I_95_64, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RSP2_CFG_RSP_DATA_I_95_64, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RSP2_CFG_RSP_DATA_I_95_64, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RSP2_CFG_RSP_DATA_I_95_64, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_RSP3);
        udma_sdio_csr.wo(utra::udma_sdio::REG_RSP3, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_RSP3_CFG_RSP_DATA_I_127_96);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_RSP3_CFG_RSP_DATA_I_127_96, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_RSP3_CFG_RSP_DATA_I_127_96, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_RSP3_CFG_RSP_DATA_I_127_96, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_RSP3_CFG_RSP_DATA_I_127_96, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_CLK_DIV);
        udma_sdio_csr.wo(utra::udma_sdio::REG_CLK_DIV, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_DATA);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_DATA, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_DATA, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_DATA, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_DATA, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_VALID);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_VALID, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_VALID, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_VALID, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_CLK_DIV_R_CLK_DIV_VALID, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_STATUS);
        udma_sdio_csr.wo(utra::udma_sdio::REG_STATUS, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_STATUS_R_EOT);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_STATUS_R_EOT, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_STATUS_R_EOT, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_STATUS_R_EOT, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_STATUS_R_EOT, baz);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_STATUS_R_ERR);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_STATUS_R_ERR, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_STATUS_R_ERR, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_STATUS_R_ERR, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_STATUS_R_ERR, baz);

        let foo = udma_sdio_csr.r(utra::udma_sdio::REG_DATA_TIMEOUT);
        udma_sdio_csr.wo(utra::udma_sdio::REG_DATA_TIMEOUT, foo);
        let bar = udma_sdio_csr.rf(utra::udma_sdio::REG_DATA_TIMEOUT_R_DATA_TIMEOUT);
        udma_sdio_csr.rmwf(utra::udma_sdio::REG_DATA_TIMEOUT_R_DATA_TIMEOUT, bar);
        let mut baz = udma_sdio_csr.zf(utra::udma_sdio::REG_DATA_TIMEOUT_R_DATA_TIMEOUT, bar);
        baz |= udma_sdio_csr.ms(utra::udma_sdio::REG_DATA_TIMEOUT_R_DATA_TIMEOUT, 1);
        udma_sdio_csr.wfo(utra::udma_sdio::REG_DATA_TIMEOUT_R_DATA_TIMEOUT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_i2s_csr() {
        use super::*;
        let mut udma_i2s_csr = CSR::new(HW_UDMA_I2S_BASE as *mut u32);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_RX_SADDR);
        udma_i2s_csr.wo(utra::udma_i2s::REG_RX_SADDR, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_RX_SADDR_R_RX_STARTADDR);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_RX_SIZE);
        udma_i2s_csr.wo(utra::udma_i2s::REG_RX_SIZE, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_RX_SIZE_R_RX_SIZE);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_RX_CFG);
        udma_i2s_csr.wo(utra::udma_i2s::REG_RX_CFG, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_RX_CFG_R_RX_DATASIZE);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_RX_CFG_R_RX_DATASIZE, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_RX_CFG_R_RX_DATASIZE, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_RX_CFG_R_RX_DATASIZE, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_RX_CFG_R_RX_DATASIZE, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_RX_CFG_R_RX_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_RX_CFG_R_RX_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_RX_CFG_R_RX_CLR);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_RX_CFG_R_RX_CLR, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_TX_SADDR);
        udma_i2s_csr.wo(utra::udma_i2s::REG_TX_SADDR, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_TX_SADDR_R_TX_STARTADDR);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_TX_SIZE);
        udma_i2s_csr.wo(utra::udma_i2s::REG_TX_SIZE, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_TX_SIZE_R_TX_SIZE);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_TX_CFG);
        udma_i2s_csr.wo(utra::udma_i2s::REG_TX_CFG, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_TX_CFG_R_TX_DATASIZE);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_TX_CFG_R_TX_DATASIZE, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_TX_CFG_R_TX_DATASIZE, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_TX_CFG_R_TX_DATASIZE, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_TX_CFG_R_TX_DATASIZE, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_TX_CFG_R_TX_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_TX_CFG_R_TX_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_TX_CFG_R_TX_CLR);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_TX_CFG_R_TX_CLR, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_I2S_CLKCFG_SETUP);
        udma_i2s_csr.wo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_GEN_CLK_DIV, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_GEN_CLK_DIV, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_COMMON_GEN_CLK_DIV, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_CLK_EN, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_CLK_EN, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_PDM_CLK_EN, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_EXT, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_SLAVE_SEL_NUM, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_EXT, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_CLKCFG_SETUP_R_MASTER_SEL_NUM, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_I2S_SLV_SETUP);
        udma_i2s_csr.wo(utra::udma_i2s::REG_I2S_SLV_SETUP, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_WORDS, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_BITS_WORD, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_LSB_FIRST, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_2CH, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_SLV_SETUP_R_SLAVE_I2S_EN, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_I2S_MST_SETUP);
        udma_i2s_csr.wo(utra::udma_i2s::REG_I2S_MST_SETUP, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_WORDS, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_BITS_WORD, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_LSB_FIRST, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_2CH);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_2CH, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_2CH, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_2CH, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_2CH, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_MST_SETUP_R_MASTER_I2S_EN, baz);

        let foo = udma_i2s_csr.r(utra::udma_i2s::REG_I2S_PDM_SETUP);
        udma_i2s_csr.wo(utra::udma_i2s::REG_I2S_PDM_SETUP, foo);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_SHIFT, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_DECIMATION, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_MODE, baz);
        let bar = udma_i2s_csr.rf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN);
        udma_i2s_csr.rmwf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN, bar);
        let mut baz = udma_i2s_csr.zf(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN, bar);
        baz |= udma_i2s_csr.ms(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN, 1);
        udma_i2s_csr.wfo(utra::udma_i2s::REG_I2S_PDM_SETUP_R_SLAVE_PDM_EN, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_camera_csr() {
        use super::*;
        let mut udma_camera_csr = CSR::new(HW_UDMA_CAMERA_BASE as *mut u32);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_RX_SADDR);
        udma_camera_csr.wo(utra::udma_camera::REG_RX_SADDR, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_RX_SADDR_R_RX_STARTADDR);
        udma_camera_csr.rmwf(utra::udma_camera::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_RX_SIZE);
        udma_camera_csr.wo(utra::udma_camera::REG_RX_SIZE, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_RX_SIZE_R_RX_SIZE);
        udma_camera_csr.rmwf(utra::udma_camera::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_RX_CFG);
        udma_camera_csr.wo(utra::udma_camera::REG_RX_CFG, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_camera_csr.rmwf(utra::udma_camera::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_RX_CFG_R_RX_DATASIZE);
        udma_camera_csr.rmwf(utra::udma_camera::REG_RX_CFG_R_RX_DATASIZE, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_RX_CFG_R_RX_DATASIZE, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_RX_CFG_R_RX_DATASIZE, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_RX_CFG_R_RX_DATASIZE, baz);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_RX_CFG_R_RX_EN);
        udma_camera_csr.rmwf(utra::udma_camera::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_RX_CFG_R_RX_EN, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_RX_CFG_R_RX_CLR);
        udma_camera_csr.rmwf(utra::udma_camera::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_RX_CFG_R_RX_CLR, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_CAM_CFG_GLOB);
        udma_camera_csr.wo(utra::udma_camera::REG_CAM_CFG_GLOB, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_CFG_GLOB_R_CAM_CFG);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_CFG_GLOB_R_CAM_CFG, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_CFG_GLOB_R_CAM_CFG, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_CFG_GLOB_R_CAM_CFG, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_CFG_GLOB_R_CAM_CFG, baz);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_CFG_GLOB_CFG_CAM_IP_EN_I, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_CAM_CFG_LL);
        udma_camera_csr.wo(utra::udma_camera::REG_CAM_CFG_LL, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_CFG_LL_R_CAM_CFG_LL);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_CFG_LL_R_CAM_CFG_LL, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_CFG_LL_R_CAM_CFG_LL, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_CFG_LL_R_CAM_CFG_LL, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_CFG_LL_R_CAM_CFG_LL, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_CAM_CFG_UR);
        udma_camera_csr.wo(utra::udma_camera::REG_CAM_CFG_UR, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_CFG_UR_R_CAM_CFG_UR);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_CFG_UR_R_CAM_CFG_UR, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_CFG_UR_R_CAM_CFG_UR, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_CFG_UR_R_CAM_CFG_UR, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_CFG_UR_R_CAM_CFG_UR, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_CAM_CFG_SIZE);
        udma_camera_csr.wo(utra::udma_camera::REG_CAM_CFG_SIZE, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_CFG_SIZE_R_CAM_CFG_SIZE, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_CAM_CFG_FILTER);
        udma_camera_csr.wo(utra::udma_camera::REG_CAM_CFG_FILTER, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_CFG_FILTER_R_CAM_CFG_FILTER, baz);

        let foo = udma_camera_csr.r(utra::udma_camera::REG_CAM_VSYNC_POLARITY);
        udma_camera_csr.wo(utra::udma_camera::REG_CAM_VSYNC_POLARITY, foo);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_VSYNC_POLARITY, baz);
        let bar = udma_camera_csr.rf(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY);
        udma_camera_csr.rmwf(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY, bar);
        let mut baz = udma_camera_csr.zf(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY, bar);
        baz |= udma_camera_csr.ms(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY, 1);
        udma_camera_csr.wfo(utra::udma_camera::REG_CAM_VSYNC_POLARITY_R_CAM_HSYNC_POLARITY, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_filter_csr() {
        use super::*;
        let mut udma_filter_csr = CSR::new(HW_UDMA_FILTER_BASE as *mut u32);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH0_ADD);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH0_ADD, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH0_ADD_R_FILTER_TX_START_ADDR_0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH0_CFG);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH0_CFG, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_DATASIZE_0, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_MODE_0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_MODE_0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_MODE_0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_MODE_0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH0_CFG_R_FILTER_TX_MODE_0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH0_LEN0);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH0_LEN0, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH0_LEN0_R_FILTER_TX_LEN0_0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH0_LEN1);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH0_LEN1, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH0_LEN1_R_FILTER_TX_LEN1_0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH0_LEN2);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH0_LEN2, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH0_LEN2_R_FILTER_TX_LEN2_0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH1_ADD);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH1_ADD, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH1_ADD_R_FILTER_TX_START_ADDR_1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH1_CFG);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH1_CFG, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_DATASIZE_1, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_MODE_1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_MODE_1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_MODE_1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_MODE_1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH1_CFG_R_FILTER_TX_MODE_1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH1_LEN0);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH1_LEN0, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH1_LEN0_R_FILTER_TX_LEN0_1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH1_LEN1);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH1_LEN1, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH1_LEN1_R_FILTER_TX_LEN1_1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_TX_CH1_LEN2);
        udma_filter_csr.wo(utra::udma_filter::REG_TX_CH1_LEN2, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_TX_CH1_LEN2_R_FILTER_TX_LEN2_1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_RX_CH_ADD);
        udma_filter_csr.wo(utra::udma_filter::REG_RX_CH_ADD, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_RX_CH_ADD_R_FILTER_RX_START_ADDR);
        udma_filter_csr.rmwf(utra::udma_filter::REG_RX_CH_ADD_R_FILTER_RX_START_ADDR, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_RX_CH_ADD_R_FILTER_RX_START_ADDR, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_RX_CH_ADD_R_FILTER_RX_START_ADDR, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_RX_CH_ADD_R_FILTER_RX_START_ADDR, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_RX_CH_CFG);
        udma_filter_csr.wo(utra::udma_filter::REG_RX_CH_CFG, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_DATASIZE);
        udma_filter_csr.rmwf(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_DATASIZE, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_DATASIZE, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_DATASIZE, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_DATASIZE, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_MODE);
        udma_filter_csr.rmwf(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_MODE, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_MODE, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_MODE, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_RX_CH_CFG_R_FILTER_RX_MODE, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_RX_CH_LEN0);
        udma_filter_csr.wo(utra::udma_filter::REG_RX_CH_LEN0, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_RX_CH_LEN0_R_FILTER_RX_LEN0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_RX_CH_LEN0_R_FILTER_RX_LEN0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_RX_CH_LEN0_R_FILTER_RX_LEN0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_RX_CH_LEN0_R_FILTER_RX_LEN0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_RX_CH_LEN0_R_FILTER_RX_LEN0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_RX_CH_LEN1);
        udma_filter_csr.wo(utra::udma_filter::REG_RX_CH_LEN1, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_RX_CH_LEN1_R_FILTER_RX_LEN1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_RX_CH_LEN1_R_FILTER_RX_LEN1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_RX_CH_LEN1_R_FILTER_RX_LEN1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_RX_CH_LEN1_R_FILTER_RX_LEN1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_RX_CH_LEN1_R_FILTER_RX_LEN1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_RX_CH_LEN2);
        udma_filter_csr.wo(utra::udma_filter::REG_RX_CH_LEN2, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_RX_CH_LEN2_R_FILTER_RX_LEN2);
        udma_filter_csr.rmwf(utra::udma_filter::REG_RX_CH_LEN2_R_FILTER_RX_LEN2, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_RX_CH_LEN2_R_FILTER_RX_LEN2, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_RX_CH_LEN2_R_FILTER_RX_LEN2, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_RX_CH_LEN2_R_FILTER_RX_LEN2, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_AU_CFG);
        udma_filter_csr.wo(utra::udma_filter::REG_AU_CFG, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_AU_CFG_R_AU_USE_SIGNED);
        udma_filter_csr.rmwf(utra::udma_filter::REG_AU_CFG_R_AU_USE_SIGNED, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_AU_CFG_R_AU_USE_SIGNED, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_AU_CFG_R_AU_USE_SIGNED, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_AU_CFG_R_AU_USE_SIGNED, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_AU_CFG_R_AU_BYPASS);
        udma_filter_csr.rmwf(utra::udma_filter::REG_AU_CFG_R_AU_BYPASS, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_AU_CFG_R_AU_BYPASS, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_AU_CFG_R_AU_BYPASS, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_AU_CFG_R_AU_BYPASS, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_AU_CFG_R_AU_MODE);
        udma_filter_csr.rmwf(utra::udma_filter::REG_AU_CFG_R_AU_MODE, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_AU_CFG_R_AU_MODE, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_AU_CFG_R_AU_MODE, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_AU_CFG_R_AU_MODE, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_AU_CFG_R_AU_SHIFT);
        udma_filter_csr.rmwf(utra::udma_filter::REG_AU_CFG_R_AU_SHIFT, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_AU_CFG_R_AU_SHIFT, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_AU_CFG_R_AU_SHIFT, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_AU_CFG_R_AU_SHIFT, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_AU_REG0);
        udma_filter_csr.wo(utra::udma_filter::REG_AU_REG0, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_AU_REG0_R_COMMIT_AU_REG0);
        udma_filter_csr.rmwf(utra::udma_filter::REG_AU_REG0_R_COMMIT_AU_REG0, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_AU_REG0_R_COMMIT_AU_REG0, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_AU_REG0_R_COMMIT_AU_REG0, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_AU_REG0_R_COMMIT_AU_REG0, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_AU_REG1);
        udma_filter_csr.wo(utra::udma_filter::REG_AU_REG1, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_AU_REG1_R_COMMIT_AU_REG1);
        udma_filter_csr.rmwf(utra::udma_filter::REG_AU_REG1_R_COMMIT_AU_REG1, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_AU_REG1_R_COMMIT_AU_REG1, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_AU_REG1_R_COMMIT_AU_REG1, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_AU_REG1_R_COMMIT_AU_REG1, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_BINCU_TH);
        udma_filter_csr.wo(utra::udma_filter::REG_BINCU_TH, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD);
        udma_filter_csr.rmwf(utra::udma_filter::REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_BINCU_TH_R_COMMIT_BINCU_THRESHOLD, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_BINCU_CNT);
        udma_filter_csr.wo(utra::udma_filter::REG_BINCU_CNT, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_BINCU_CNT_R_BINCU_COUNTER);
        udma_filter_csr.rmwf(utra::udma_filter::REG_BINCU_CNT_R_BINCU_COUNTER, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_BINCU_CNT_R_BINCU_COUNTER, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_BINCU_CNT_R_BINCU_COUNTER, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_BINCU_CNT_R_BINCU_COUNTER, baz);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_BINCU_CNT_R_BINCU_EN_COUNTER);
        udma_filter_csr.rmwf(utra::udma_filter::REG_BINCU_CNT_R_BINCU_EN_COUNTER, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_BINCU_CNT_R_BINCU_EN_COUNTER, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_BINCU_CNT_R_BINCU_EN_COUNTER, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_BINCU_CNT_R_BINCU_EN_COUNTER, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_BINCU_SETUP);
        udma_filter_csr.wo(utra::udma_filter::REG_BINCU_SETUP, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_BINCU_SETUP_R_BINCU_DATASIZE);
        udma_filter_csr.rmwf(utra::udma_filter::REG_BINCU_SETUP_R_BINCU_DATASIZE, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_BINCU_SETUP_R_BINCU_DATASIZE, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_BINCU_SETUP_R_BINCU_DATASIZE, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_BINCU_SETUP_R_BINCU_DATASIZE, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_BINCU_VAL);
        udma_filter_csr.wo(utra::udma_filter::REG_BINCU_VAL, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_BINCU_VAL_BINCU_COUNTER_I);
        udma_filter_csr.rmwf(utra::udma_filter::REG_BINCU_VAL_BINCU_COUNTER_I, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_BINCU_VAL_BINCU_COUNTER_I, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_BINCU_VAL_BINCU_COUNTER_I, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_BINCU_VAL_BINCU_COUNTER_I, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_FILT);
        udma_filter_csr.wo(utra::udma_filter::REG_FILT, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_FILT_R_FILTER_MODE);
        udma_filter_csr.rmwf(utra::udma_filter::REG_FILT_R_FILTER_MODE, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_FILT_R_FILTER_MODE, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_FILT_R_FILTER_MODE, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_FILT_R_FILTER_MODE, baz);

        let foo = udma_filter_csr.r(utra::udma_filter::REG_STATUS);
        udma_filter_csr.wo(utra::udma_filter::REG_STATUS, foo);
        let bar = udma_filter_csr.rf(utra::udma_filter::REG_STATUS_R_FILTER_DONE);
        udma_filter_csr.rmwf(utra::udma_filter::REG_STATUS_R_FILTER_DONE, bar);
        let mut baz = udma_filter_csr.zf(utra::udma_filter::REG_STATUS_R_FILTER_DONE, bar);
        baz |= udma_filter_csr.ms(utra::udma_filter::REG_STATUS_R_FILTER_DONE, 1);
        udma_filter_csr.wfo(utra::udma_filter::REG_STATUS_R_FILTER_DONE, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_scif_csr() {
        use super::*;
        let mut udma_scif_csr = CSR::new(HW_UDMA_SCIF_BASE as *mut u32);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_RX_SADDR);
        udma_scif_csr.wo(utra::udma_scif::REG_RX_SADDR, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_RX_SADDR_R_RX_STARTADDR);
        udma_scif_csr.rmwf(utra::udma_scif::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_RX_SIZE);
        udma_scif_csr.wo(utra::udma_scif::REG_RX_SIZE, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_RX_SIZE_R_RX_SIZE);
        udma_scif_csr.rmwf(utra::udma_scif::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_RX_CFG);
        udma_scif_csr.wo(utra::udma_scif::REG_RX_CFG, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_scif_csr.rmwf(utra::udma_scif::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_RX_CFG_R_RX_EN);
        udma_scif_csr.rmwf(utra::udma_scif::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_RX_CFG_R_RX_EN, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_RX_CFG_R_RX_CLR);
        udma_scif_csr.rmwf(utra::udma_scif::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_RX_CFG_R_RX_CLR, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_TX_SADDR);
        udma_scif_csr.wo(utra::udma_scif::REG_TX_SADDR, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_TX_SADDR_R_TX_STARTADDR);
        udma_scif_csr.rmwf(utra::udma_scif::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_TX_SIZE);
        udma_scif_csr.wo(utra::udma_scif::REG_TX_SIZE, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_TX_SIZE_R_TX_SIZE);
        udma_scif_csr.rmwf(utra::udma_scif::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_TX_CFG);
        udma_scif_csr.wo(utra::udma_scif::REG_TX_CFG, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_scif_csr.rmwf(utra::udma_scif::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_TX_CFG_R_TX_EN);
        udma_scif_csr.rmwf(utra::udma_scif::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_TX_CFG_R_TX_EN, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_TX_CFG_R_TX_CLR);
        udma_scif_csr.rmwf(utra::udma_scif::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_TX_CFG_R_TX_CLR, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_STATUS);
        udma_scif_csr.wo(utra::udma_scif::REG_STATUS, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_STATUS_STATUS_I);
        udma_scif_csr.rmwf(utra::udma_scif::REG_STATUS_STATUS_I, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_STATUS_STATUS_I, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_STATUS_STATUS_I, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_STATUS_STATUS_I, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_SCIF_SETUP);
        udma_scif_csr.wo(utra::udma_scif::REG_SCIF_SETUP, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_PARITY_EN);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_PARITY_EN, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_PARITY_EN, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_PARITY_EN, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_PARITY_EN, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_BITS);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_BITS, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_BITS, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_BITS, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_BITS, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_STOP_BITS);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_STOP_BITS, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_STOP_BITS, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_STOP_BITS, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_STOP_BITS, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_POLLING_EN, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_RX_CLEAN_FIFO, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_TX);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_TX, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_TX, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_TX, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_TX, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_RX);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_RX, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_RX, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_RX, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_EN_RX, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_CLKSEL);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_CLKSEL, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_CLKSEL, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_CLKSEL, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_CLKSEL, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_DIV);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_DIV, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_DIV, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_DIV, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_SETUP_R_SCIF_DIV, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_ERROR);
        udma_scif_csr.wo(utra::udma_scif::REG_ERROR, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_ERROR_R_ERR_OVERFLOW);
        udma_scif_csr.rmwf(utra::udma_scif::REG_ERROR_R_ERR_OVERFLOW, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_ERROR_R_ERR_OVERFLOW, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_ERROR_R_ERR_OVERFLOW, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_ERROR_R_ERR_OVERFLOW, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_ERROR_R_ERR_PARITY);
        udma_scif_csr.rmwf(utra::udma_scif::REG_ERROR_R_ERR_PARITY, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_ERROR_R_ERR_PARITY, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_ERROR_R_ERR_PARITY, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_ERROR_R_ERR_PARITY, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_IRQ_EN);
        udma_scif_csr.wo(utra::udma_scif::REG_IRQ_EN, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_IRQ_EN_R_SCIF_RX_IRQ_EN);
        udma_scif_csr.rmwf(utra::udma_scif::REG_IRQ_EN_R_SCIF_RX_IRQ_EN, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_IRQ_EN_R_SCIF_RX_IRQ_EN, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_IRQ_EN_R_SCIF_RX_IRQ_EN, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_IRQ_EN_R_SCIF_RX_IRQ_EN, baz);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_IRQ_EN_R_SCIF_ERR_IRQ_EN);
        udma_scif_csr.rmwf(utra::udma_scif::REG_IRQ_EN_R_SCIF_ERR_IRQ_EN, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_IRQ_EN_R_SCIF_ERR_IRQ_EN, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_IRQ_EN_R_SCIF_ERR_IRQ_EN, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_IRQ_EN_R_SCIF_ERR_IRQ_EN, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_VALID);
        udma_scif_csr.wo(utra::udma_scif::REG_VALID, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_VALID_R_SCIF_RX_DATA_VALID);
        udma_scif_csr.rmwf(utra::udma_scif::REG_VALID_R_SCIF_RX_DATA_VALID, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_VALID_R_SCIF_RX_DATA_VALID, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_VALID_R_SCIF_RX_DATA_VALID, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_VALID_R_SCIF_RX_DATA_VALID, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_DATA);
        udma_scif_csr.wo(utra::udma_scif::REG_DATA, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_DATA_R_SCIF_RX_DATA);
        udma_scif_csr.rmwf(utra::udma_scif::REG_DATA_R_SCIF_RX_DATA, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_DATA_R_SCIF_RX_DATA, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_DATA_R_SCIF_RX_DATA, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_DATA_R_SCIF_RX_DATA, baz);

        let foo = udma_scif_csr.r(utra::udma_scif::REG_SCIF_ETU);
        udma_scif_csr.wo(utra::udma_scif::REG_SCIF_ETU, foo);
        let bar = udma_scif_csr.rf(utra::udma_scif::REG_SCIF_ETU_R_SCIF_ETU);
        udma_scif_csr.rmwf(utra::udma_scif::REG_SCIF_ETU_R_SCIF_ETU, bar);
        let mut baz = udma_scif_csr.zf(utra::udma_scif::REG_SCIF_ETU_R_SCIF_ETU, bar);
        baz |= udma_scif_csr.ms(utra::udma_scif::REG_SCIF_ETU_R_SCIF_ETU, 1);
        udma_scif_csr.wfo(utra::udma_scif::REG_SCIF_ETU_R_SCIF_ETU, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_spis_0_csr() {
        use super::*;
        let mut udma_spis_0_csr = CSR::new(HW_UDMA_SPIS_0_BASE as *mut u32);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_RX_SADDR);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_RX_SADDR, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_RX_SADDR_R_RX_STARTADDR);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_RX_SIZE);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_RX_SIZE, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_RX_SIZE_R_RX_SIZE);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_RX_CFG);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_RX_CFG, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_RX_CFG_R_RX_EN);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_RX_CFG_R_RX_EN, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_RX_CFG_R_RX_CLR);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_RX_CFG_R_RX_CLR, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_TX_SADDR);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_TX_SADDR, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_TX_SADDR_R_TX_STARTADDR);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_TX_SIZE);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_TX_SIZE, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_TX_SIZE_R_TX_SIZE);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_TX_CFG);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_TX_CFG, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_TX_CFG_R_TX_EN);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_TX_CFG_R_TX_EN, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_TX_CFG_R_TX_CLR);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_TX_CFG_R_TX_CLR, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_SPIS_SETUP);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_SPIS_SETUP, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPOL);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPOL, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPOL, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPOL, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPOL, baz);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPHA);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPHA, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPHA, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPHA, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SPIS_SETUP_CFGCPHA, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_SEOT_CNT);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_SEOT_CNT, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SEOT_CNT_SR_SEOT_CNT);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SEOT_CNT_SR_SEOT_CNT, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SEOT_CNT_SR_SEOT_CNT, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SEOT_CNT_SR_SEOT_CNT, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SEOT_CNT_SR_SEOT_CNT, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_SPIS_IRQ_EN);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_SPIS_IRQ_EN, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SPIS_IRQ_EN_SEOT_IRQ_EN);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_SPIS_RXCNT);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_SPIS_RXCNT, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SPIS_RXCNT_CFGRXCNT);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SPIS_RXCNT_CFGRXCNT, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SPIS_RXCNT_CFGRXCNT, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SPIS_RXCNT_CFGRXCNT, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SPIS_RXCNT_CFGRXCNT, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_SPIS_TXCNT);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_SPIS_TXCNT, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SPIS_TXCNT_CFGTXCNT);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SPIS_TXCNT_CFGTXCNT, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SPIS_TXCNT_CFGTXCNT, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SPIS_TXCNT_CFGTXCNT, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SPIS_TXCNT_CFGTXCNT, baz);

        let foo = udma_spis_0_csr.r(utra::udma_spis_0::REG_SPIS_DMCNT);
        udma_spis_0_csr.wo(utra::udma_spis_0::REG_SPIS_DMCNT, foo);
        let bar = udma_spis_0_csr.rf(utra::udma_spis_0::REG_SPIS_DMCNT_CFGDMCNT);
        udma_spis_0_csr.rmwf(utra::udma_spis_0::REG_SPIS_DMCNT_CFGDMCNT, bar);
        let mut baz = udma_spis_0_csr.zf(utra::udma_spis_0::REG_SPIS_DMCNT_CFGDMCNT, bar);
        baz |= udma_spis_0_csr.ms(utra::udma_spis_0::REG_SPIS_DMCNT_CFGDMCNT, 1);
        udma_spis_0_csr.wfo(utra::udma_spis_0::REG_SPIS_DMCNT_CFGDMCNT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_spis_1_csr() {
        use super::*;
        let mut udma_spis_1_csr = CSR::new(HW_UDMA_SPIS_1_BASE as *mut u32);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_RX_SADDR);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_RX_SADDR, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_RX_SADDR_R_RX_STARTADDR);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_RX_SIZE);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_RX_SIZE, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_RX_SIZE_R_RX_SIZE);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_RX_CFG);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_RX_CFG, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_RX_CFG_R_RX_EN);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_RX_CFG_R_RX_EN, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_RX_CFG_R_RX_CLR);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_RX_CFG_R_RX_CLR, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_TX_SADDR);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_TX_SADDR, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_TX_SADDR_R_TX_STARTADDR);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_TX_SADDR_R_TX_STARTADDR, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_TX_SADDR_R_TX_STARTADDR, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_TX_SADDR_R_TX_STARTADDR, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_TX_SIZE);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_TX_SIZE, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_TX_SIZE_R_TX_SIZE);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_TX_SIZE_R_TX_SIZE, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_TX_SIZE_R_TX_SIZE, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_TX_SIZE_R_TX_SIZE, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_TX_SIZE_R_TX_SIZE, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_TX_CFG);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_TX_CFG, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_TX_CFG_R_TX_CONTINUOUS);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_TX_CFG_R_TX_CONTINUOUS, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_TX_CFG_R_TX_CONTINUOUS, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_TX_CFG_R_TX_CONTINUOUS, baz);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_TX_CFG_R_TX_EN);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_TX_CFG_R_TX_EN, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_TX_CFG_R_TX_EN, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_TX_CFG_R_TX_EN, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_TX_CFG_R_TX_EN, baz);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_TX_CFG_R_TX_CLR);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_TX_CFG_R_TX_CLR, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_TX_CFG_R_TX_CLR, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_TX_CFG_R_TX_CLR, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_TX_CFG_R_TX_CLR, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_SPIS_SETUP);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_SPIS_SETUP, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPOL);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPOL, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPOL, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPOL, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPOL, baz);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPHA);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPHA, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPHA, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPHA, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SPIS_SETUP_CFGCPHA, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_SEOT_CNT);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_SEOT_CNT, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SEOT_CNT_SR_SEOT_CNT);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SEOT_CNT_SR_SEOT_CNT, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SEOT_CNT_SR_SEOT_CNT, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SEOT_CNT_SR_SEOT_CNT, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SEOT_CNT_SR_SEOT_CNT, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_SPIS_IRQ_EN);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_SPIS_IRQ_EN, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SPIS_IRQ_EN_SEOT_IRQ_EN);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SPIS_IRQ_EN_SEOT_IRQ_EN, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_SPIS_RXCNT);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_SPIS_RXCNT, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SPIS_RXCNT_CFGRXCNT);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SPIS_RXCNT_CFGRXCNT, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SPIS_RXCNT_CFGRXCNT, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SPIS_RXCNT_CFGRXCNT, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SPIS_RXCNT_CFGRXCNT, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_SPIS_TXCNT);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_SPIS_TXCNT, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SPIS_TXCNT_CFGTXCNT);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SPIS_TXCNT_CFGTXCNT, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SPIS_TXCNT_CFGTXCNT, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SPIS_TXCNT_CFGTXCNT, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SPIS_TXCNT_CFGTXCNT, baz);

        let foo = udma_spis_1_csr.r(utra::udma_spis_1::REG_SPIS_DMCNT);
        udma_spis_1_csr.wo(utra::udma_spis_1::REG_SPIS_DMCNT, foo);
        let bar = udma_spis_1_csr.rf(utra::udma_spis_1::REG_SPIS_DMCNT_CFGDMCNT);
        udma_spis_1_csr.rmwf(utra::udma_spis_1::REG_SPIS_DMCNT_CFGDMCNT, bar);
        let mut baz = udma_spis_1_csr.zf(utra::udma_spis_1::REG_SPIS_DMCNT_CFGDMCNT, bar);
        baz |= udma_spis_1_csr.ms(utra::udma_spis_1::REG_SPIS_DMCNT_CFGDMCNT, 1);
        udma_spis_1_csr.wfo(utra::udma_spis_1::REG_SPIS_DMCNT_CFGDMCNT, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_udma_adc_csr() {
        use super::*;
        let mut udma_adc_csr = CSR::new(HW_UDMA_ADC_BASE as *mut u32);

        let foo = udma_adc_csr.r(utra::udma_adc::REG_RX_SADDR);
        udma_adc_csr.wo(utra::udma_adc::REG_RX_SADDR, foo);
        let bar = udma_adc_csr.rf(utra::udma_adc::REG_RX_SADDR_R_RX_STARTADDR);
        udma_adc_csr.rmwf(utra::udma_adc::REG_RX_SADDR_R_RX_STARTADDR, bar);
        let mut baz = udma_adc_csr.zf(utra::udma_adc::REG_RX_SADDR_R_RX_STARTADDR, bar);
        baz |= udma_adc_csr.ms(utra::udma_adc::REG_RX_SADDR_R_RX_STARTADDR, 1);
        udma_adc_csr.wfo(utra::udma_adc::REG_RX_SADDR_R_RX_STARTADDR, baz);

        let foo = udma_adc_csr.r(utra::udma_adc::REG_RX_SIZE);
        udma_adc_csr.wo(utra::udma_adc::REG_RX_SIZE, foo);
        let bar = udma_adc_csr.rf(utra::udma_adc::REG_RX_SIZE_R_RX_SIZE);
        udma_adc_csr.rmwf(utra::udma_adc::REG_RX_SIZE_R_RX_SIZE, bar);
        let mut baz = udma_adc_csr.zf(utra::udma_adc::REG_RX_SIZE_R_RX_SIZE, bar);
        baz |= udma_adc_csr.ms(utra::udma_adc::REG_RX_SIZE_R_RX_SIZE, 1);
        udma_adc_csr.wfo(utra::udma_adc::REG_RX_SIZE_R_RX_SIZE, baz);

        let foo = udma_adc_csr.r(utra::udma_adc::REG_RX_CFG);
        udma_adc_csr.wo(utra::udma_adc::REG_RX_CFG, foo);
        let bar = udma_adc_csr.rf(utra::udma_adc::REG_RX_CFG_R_RX_CONTINUOUS);
        udma_adc_csr.rmwf(utra::udma_adc::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        let mut baz = udma_adc_csr.zf(utra::udma_adc::REG_RX_CFG_R_RX_CONTINUOUS, bar);
        baz |= udma_adc_csr.ms(utra::udma_adc::REG_RX_CFG_R_RX_CONTINUOUS, 1);
        udma_adc_csr.wfo(utra::udma_adc::REG_RX_CFG_R_RX_CONTINUOUS, baz);
        let bar = udma_adc_csr.rf(utra::udma_adc::REG_RX_CFG_R_RX_EN);
        udma_adc_csr.rmwf(utra::udma_adc::REG_RX_CFG_R_RX_EN, bar);
        let mut baz = udma_adc_csr.zf(utra::udma_adc::REG_RX_CFG_R_RX_EN, bar);
        baz |= udma_adc_csr.ms(utra::udma_adc::REG_RX_CFG_R_RX_EN, 1);
        udma_adc_csr.wfo(utra::udma_adc::REG_RX_CFG_R_RX_EN, baz);
        let bar = udma_adc_csr.rf(utra::udma_adc::REG_RX_CFG_R_RX_CLR);
        udma_adc_csr.rmwf(utra::udma_adc::REG_RX_CFG_R_RX_CLR, bar);
        let mut baz = udma_adc_csr.zf(utra::udma_adc::REG_RX_CFG_R_RX_CLR, bar);
        baz |= udma_adc_csr.ms(utra::udma_adc::REG_RX_CFG_R_RX_CLR, 1);
        udma_adc_csr.wfo(utra::udma_adc::REG_RX_CFG_R_RX_CLR, baz);

        let foo = udma_adc_csr.r(utra::udma_adc::REG_CR_ADC);
        udma_adc_csr.wo(utra::udma_adc::REG_CR_ADC, foo);
        let bar = udma_adc_csr.rf(utra::udma_adc::REG_CR_ADC_CR_ADC);
        udma_adc_csr.rmwf(utra::udma_adc::REG_CR_ADC_CR_ADC, bar);
        let mut baz = udma_adc_csr.zf(utra::udma_adc::REG_CR_ADC_CR_ADC, bar);
        baz |= udma_adc_csr.ms(utra::udma_adc::REG_CR_ADC_CR_ADC, 1);
        udma_adc_csr.wfo(utra::udma_adc::REG_CR_ADC_CR_ADC, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_bio_fifo0_csr() {
        use super::*;
        let mut bio_fifo0_csr = CSR::new(HW_BIO_FIFO0_BASE as *mut u32);

        let foo = bio_fifo0_csr.r(utra::bio_fifo0::SFR_FLEVEL);
        bio_fifo0_csr.wo(utra::bio_fifo0::SFR_FLEVEL, foo);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, baz);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, baz);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, baz);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, baz);

        let foo = bio_fifo0_csr.r(utra::bio_fifo0::SFR_TXF0);
        bio_fifo0_csr.wo(utra::bio_fifo0::SFR_TXF0, foo);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_TXF0_FDIN);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_TXF0_FDIN, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_TXF0_FDIN, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_TXF0_FDIN, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_TXF0_FDIN, baz);

        let foo = bio_fifo0_csr.r(utra::bio_fifo0::SFR_RXF0);
        bio_fifo0_csr.wo(utra::bio_fifo0::SFR_RXF0, foo);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_RXF0_FDOUT);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_RXF0_FDOUT, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_RXF0_FDOUT, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_RXF0_FDOUT, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_RXF0_FDOUT, baz);

        let foo = bio_fifo0_csr.r(utra::bio_fifo0::SFR_EVENT_SET);
        bio_fifo0_csr.wo(utra::bio_fifo0::SFR_EVENT_SET, foo);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_EVENT_SET_SFR_EVENT_SET);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_EVENT_SET_SFR_EVENT_SET, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_EVENT_SET_SFR_EVENT_SET, baz);

        let foo = bio_fifo0_csr.r(utra::bio_fifo0::SFR_EVENT_CLR);
        bio_fifo0_csr.wo(utra::bio_fifo0::SFR_EVENT_CLR, foo);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_EVENT_CLR_SFR_EVENT_CLR);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_EVENT_CLR_SFR_EVENT_CLR, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_EVENT_CLR_SFR_EVENT_CLR, baz);

        let foo = bio_fifo0_csr.r(utra::bio_fifo0::SFR_EVENT_STATUS);
        bio_fifo0_csr.wo(utra::bio_fifo0::SFR_EVENT_STATUS, foo);
        let bar = bio_fifo0_csr.rf(utra::bio_fifo0::SFR_EVENT_STATUS_SFR_EVENT_STATUS);
        bio_fifo0_csr.rmwf(utra::bio_fifo0::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        let mut baz = bio_fifo0_csr.zf(utra::bio_fifo0::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        baz |= bio_fifo0_csr.ms(utra::bio_fifo0::SFR_EVENT_STATUS_SFR_EVENT_STATUS, 1);
        bio_fifo0_csr.wfo(utra::bio_fifo0::SFR_EVENT_STATUS_SFR_EVENT_STATUS, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_bio_fifo1_csr() {
        use super::*;
        let mut bio_fifo1_csr = CSR::new(HW_BIO_FIFO1_BASE as *mut u32);

        let foo = bio_fifo1_csr.r(utra::bio_fifo1::SFR_FLEVEL);
        bio_fifo1_csr.wo(utra::bio_fifo1::SFR_FLEVEL, foo);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, baz);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, baz);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, baz);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, baz);

        let foo = bio_fifo1_csr.r(utra::bio_fifo1::SFR_TXF1);
        bio_fifo1_csr.wo(utra::bio_fifo1::SFR_TXF1, foo);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_TXF1_FDIN);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_TXF1_FDIN, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_TXF1_FDIN, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_TXF1_FDIN, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_TXF1_FDIN, baz);

        let foo = bio_fifo1_csr.r(utra::bio_fifo1::SFR_RXF1);
        bio_fifo1_csr.wo(utra::bio_fifo1::SFR_RXF1, foo);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_RXF1_FDOUT);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_RXF1_FDOUT, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_RXF1_FDOUT, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_RXF1_FDOUT, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_RXF1_FDOUT, baz);

        let foo = bio_fifo1_csr.r(utra::bio_fifo1::SFR_EVENT_SET);
        bio_fifo1_csr.wo(utra::bio_fifo1::SFR_EVENT_SET, foo);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_EVENT_SET_SFR_EVENT_SET);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_EVENT_SET_SFR_EVENT_SET, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_EVENT_SET_SFR_EVENT_SET, baz);

        let foo = bio_fifo1_csr.r(utra::bio_fifo1::SFR_EVENT_CLR);
        bio_fifo1_csr.wo(utra::bio_fifo1::SFR_EVENT_CLR, foo);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_EVENT_CLR_SFR_EVENT_CLR);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_EVENT_CLR_SFR_EVENT_CLR, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_EVENT_CLR_SFR_EVENT_CLR, baz);

        let foo = bio_fifo1_csr.r(utra::bio_fifo1::SFR_EVENT_STATUS);
        bio_fifo1_csr.wo(utra::bio_fifo1::SFR_EVENT_STATUS, foo);
        let bar = bio_fifo1_csr.rf(utra::bio_fifo1::SFR_EVENT_STATUS_SFR_EVENT_STATUS);
        bio_fifo1_csr.rmwf(utra::bio_fifo1::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        let mut baz = bio_fifo1_csr.zf(utra::bio_fifo1::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        baz |= bio_fifo1_csr.ms(utra::bio_fifo1::SFR_EVENT_STATUS_SFR_EVENT_STATUS, 1);
        bio_fifo1_csr.wfo(utra::bio_fifo1::SFR_EVENT_STATUS_SFR_EVENT_STATUS, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_bio_fifo2_csr() {
        use super::*;
        let mut bio_fifo2_csr = CSR::new(HW_BIO_FIFO2_BASE as *mut u32);

        let foo = bio_fifo2_csr.r(utra::bio_fifo2::SFR_FLEVEL);
        bio_fifo2_csr.wo(utra::bio_fifo2::SFR_FLEVEL, foo);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, baz);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, baz);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, baz);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, baz);

        let foo = bio_fifo2_csr.r(utra::bio_fifo2::SFR_TXF2);
        bio_fifo2_csr.wo(utra::bio_fifo2::SFR_TXF2, foo);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_TXF2_FDIN);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_TXF2_FDIN, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_TXF2_FDIN, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_TXF2_FDIN, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_TXF2_FDIN, baz);

        let foo = bio_fifo2_csr.r(utra::bio_fifo2::SFR_RXF2);
        bio_fifo2_csr.wo(utra::bio_fifo2::SFR_RXF2, foo);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_RXF2_FDOUT);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_RXF2_FDOUT, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_RXF2_FDOUT, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_RXF2_FDOUT, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_RXF2_FDOUT, baz);

        let foo = bio_fifo2_csr.r(utra::bio_fifo2::SFR_EVENT_SET);
        bio_fifo2_csr.wo(utra::bio_fifo2::SFR_EVENT_SET, foo);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_EVENT_SET_SFR_EVENT_SET);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_EVENT_SET_SFR_EVENT_SET, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_EVENT_SET_SFR_EVENT_SET, baz);

        let foo = bio_fifo2_csr.r(utra::bio_fifo2::SFR_EVENT_CLR);
        bio_fifo2_csr.wo(utra::bio_fifo2::SFR_EVENT_CLR, foo);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_EVENT_CLR_SFR_EVENT_CLR);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_EVENT_CLR_SFR_EVENT_CLR, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_EVENT_CLR_SFR_EVENT_CLR, baz);

        let foo = bio_fifo2_csr.r(utra::bio_fifo2::SFR_EVENT_STATUS);
        bio_fifo2_csr.wo(utra::bio_fifo2::SFR_EVENT_STATUS, foo);
        let bar = bio_fifo2_csr.rf(utra::bio_fifo2::SFR_EVENT_STATUS_SFR_EVENT_STATUS);
        bio_fifo2_csr.rmwf(utra::bio_fifo2::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        let mut baz = bio_fifo2_csr.zf(utra::bio_fifo2::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        baz |= bio_fifo2_csr.ms(utra::bio_fifo2::SFR_EVENT_STATUS_SFR_EVENT_STATUS, 1);
        bio_fifo2_csr.wfo(utra::bio_fifo2::SFR_EVENT_STATUS_SFR_EVENT_STATUS, baz);
  }

    #[test]
    #[ignore]
    fn compile_check_bio_fifo3_csr() {
        use super::*;
        let mut bio_fifo3_csr = CSR::new(HW_BIO_FIFO3_BASE as *mut u32);

        let foo = bio_fifo3_csr.r(utra::bio_fifo3::SFR_FLEVEL);
        bio_fifo3_csr.wo(utra::bio_fifo3::SFR_FLEVEL, foo);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL0, baz);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL1, baz);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL2, baz);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_FLEVEL_PCLK_REGFIFO_LEVEL3, baz);

        let foo = bio_fifo3_csr.r(utra::bio_fifo3::SFR_TXF3);
        bio_fifo3_csr.wo(utra::bio_fifo3::SFR_TXF3, foo);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_TXF3_FDIN);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_TXF3_FDIN, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_TXF3_FDIN, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_TXF3_FDIN, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_TXF3_FDIN, baz);

        let foo = bio_fifo3_csr.r(utra::bio_fifo3::SFR_RXF3);
        bio_fifo3_csr.wo(utra::bio_fifo3::SFR_RXF3, foo);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_RXF3_FDOUT);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_RXF3_FDOUT, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_RXF3_FDOUT, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_RXF3_FDOUT, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_RXF3_FDOUT, baz);

        let foo = bio_fifo3_csr.r(utra::bio_fifo3::SFR_EVENT_SET);
        bio_fifo3_csr.wo(utra::bio_fifo3::SFR_EVENT_SET, foo);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_EVENT_SET_SFR_EVENT_SET);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_EVENT_SET_SFR_EVENT_SET, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_EVENT_SET_SFR_EVENT_SET, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_EVENT_SET_SFR_EVENT_SET, baz);

        let foo = bio_fifo3_csr.r(utra::bio_fifo3::SFR_EVENT_CLR);
        bio_fifo3_csr.wo(utra::bio_fifo3::SFR_EVENT_CLR, foo);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_EVENT_CLR_SFR_EVENT_CLR);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_EVENT_CLR_SFR_EVENT_CLR, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_EVENT_CLR_SFR_EVENT_CLR, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_EVENT_CLR_SFR_EVENT_CLR, baz);

        let foo = bio_fifo3_csr.r(utra::bio_fifo3::SFR_EVENT_STATUS);
        bio_fifo3_csr.wo(utra::bio_fifo3::SFR_EVENT_STATUS, foo);
        let bar = bio_fifo3_csr.rf(utra::bio_fifo3::SFR_EVENT_STATUS_SFR_EVENT_STATUS);
        bio_fifo3_csr.rmwf(utra::bio_fifo3::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        let mut baz = bio_fifo3_csr.zf(utra::bio_fifo3::SFR_EVENT_STATUS_SFR_EVENT_STATUS, bar);
        baz |= bio_fifo3_csr.ms(utra::bio_fifo3::SFR_EVENT_STATUS_SFR_EVENT_STATUS, 1);
        bio_fifo3_csr.wfo(utra::bio_fifo3::SFR_EVENT_STATUS_SFR_EVENT_STATUS, baz);
  }
}
